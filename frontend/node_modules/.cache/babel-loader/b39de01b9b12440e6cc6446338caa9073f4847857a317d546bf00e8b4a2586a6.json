{"ast":null,"code":"var _jsxFileName = \"/Users/kei/AIdeator-LLM/frontend/src/components/MindMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './MindMap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MindMap = ({\n  centralQuestion,\n  concepts\n}) => {\n  _s();\n  const [positions, setPositions] = useState({});\n  const [dragging, setDragging] = useState(null);\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [activeNodes, setActiveNodes] = useState(concepts.map(() => true));\n  const [expandedNodeIndex, setExpandedNodeIndex] = useState(null);\n  const [expandedConcepts, setExpandedConcepts] = useState([]);\n  const mindMapRef = useRef(null);\n  const svgRef = useRef(null);\n  const conceptRefs = useRef({});\n  const centralQuestionRef = useRef(null);\n\n  // Initialize positions in a circle around the central question\n  useEffect(() => {\n    const initialPositions = {};\n    const radius = 200; // Distance from center\n\n    concepts.forEach((concept, index) => {\n      const angle = index / concepts.length * Math.PI * 2;\n      initialPositions[concept.id] = {\n        x: Math.cos(angle) * radius,\n        y: Math.sin(angle) * radius\n      };\n    });\n    setPositions(initialPositions);\n  }, [concepts]);\n\n  // Expand a node with 5 new child nodes\n  const expandNode = index => {\n    console.log(\"Expanding node\", index);\n    setExpandedNodeIndex(index);\n\n    // Create 5 new concept nodes with titles and descriptions\n    const newConcepts = [{\n      title: \"Fear of letting others down\",\n      description: \"Social and professional pressures can make people fear judgment from peers.\"\n    }, {\n      title: \"Concept B\",\n      description: \"A detailed description of concept B and its implications.\"\n    }, {\n      title: \"Concept C\",\n      description: \"A detailed description of concept C and its implications.\"\n    }, {\n      title: \"Concept D\",\n      description: \"A detailed description of concept D and its implications.\"\n    }, {\n      title: \"Concept E\",\n      description: \"A detailed description of concept E and its implications.\"\n    }];\n    setExpandedConcepts(newConcepts);\n\n    // Create positions for the new nodes following the parent's side\n    const parentPos = positions[`concept-${index}`];\n    const newPositions = {\n      ...positions\n    };\n\n    // Determine which side the parent node is on relative to the center\n    // This uses the standard layout: top, left, right, bottom-left, bottom-right\n    let direction;\n    if (index === 0) {\n      // Top node - place children above it\n      direction = 'top';\n    } else if (index === 1) {\n      // Left node - place children to the left\n      direction = 'left';\n    } else if (index === 2) {\n      // Right node - place children to the right\n      direction = 'right';\n    } else if (index === 3) {\n      // Bottom Left node - place children below and to the left\n      direction = 'bottom-left';\n    } else if (index === 4) {\n      // Bottom Right node - place children below and to the right\n      direction = 'bottom-right';\n    }\n    console.log(\"Direction for expanded nodes:\", direction);\n\n    // Position nodes based on the parent's position/direction\n    switch (direction) {\n      case 'top':\n        // Arrange horizontally above the parent\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + xOffset,\n            y: parentPos.y - 150\n          };\n        }\n        break;\n      case 'left':\n        // Arrange vertically to the left - increase spacing\n        for (let i = 0; i < newConcepts.length; i++) {\n          const yOffset = (i - 2) * 100; // -200, -100, 0, 100, 200\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x - 250,\n            y: parentPos.y + yOffset\n          };\n        }\n        break;\n      case 'right':\n        // Arrange vertically to the right - increase spacing\n        for (let i = 0; i < newConcepts.length; i++) {\n          const yOffset = (i - 2) * 100; // -200, -100, 0, 100, 200\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + 250,\n            y: parentPos.y + yOffset\n          };\n        }\n        break;\n      case 'bottom-left':\n        // Arrange horizontally below and to the left\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x - 100 + xOffset,\n            y: parentPos.y + 150\n          };\n        }\n        break;\n      case 'bottom-right':\n        // Arrange horizontally below and to the right\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + 100 + xOffset,\n            y: parentPos.y + 150\n          };\n        }\n        break;\n    }\n    setPositions(newPositions);\n  };\n\n  // Toggle node active state\n  const toggleNodeActive = index => {\n    // Count how many inactive nodes we currently have\n    const inactiveCount = activeNodes.filter(active => !active).length;\n\n    // If this node is already inactive, we can always make it active again\n    if (!activeNodes[index]) {\n      setActiveNodes(prev => {\n        const newActive = [...prev];\n        newActive[index] = true;\n        return newActive;\n      });\n      // If we're activating a node, clear expansion\n      if (expandedNodeIndex !== null) {\n        setExpandedNodeIndex(null);\n        setExpandedConcepts([]);\n      }\n      return;\n    }\n\n    // If this would be the 5th inactive node (all inactive), don't allow it\n    if (inactiveCount === 4) {\n      // Find the only remaining active node (which must be this one)\n      const activeNodeIndices = activeNodes.map((active, i) => active ? i : -1).filter(i => i >= 0);\n      if (activeNodeIndices.length === 1 && activeNodeIndices[0] === index) {\n        console.log(\"Can't deactivate the last node\");\n        return;\n      }\n    }\n\n    // Make this node inactive\n    setActiveNodes(prev => {\n      const newActive = [...prev];\n      newActive[index] = false;\n      return newActive;\n    });\n\n    // Check if we now have 4 inactive nodes (1 active)\n    const newInactiveCount = inactiveCount + 1;\n    if (newInactiveCount === 4) {\n      // Find the one remaining active node\n      const remainingActiveIndex = activeNodes.findIndex((active, i) => active && i !== index);\n      if (remainingActiveIndex !== -1) {\n        // Expand the remaining active node\n        expandNode(remainingActiveIndex);\n      }\n    }\n  };\n  const handleMouseDown = (e, id) => {\n    e.stopPropagation();\n    const rect = mindMapRef.current.getBoundingClientRect();\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n    setDragging(id);\n    setDragOffset({\n      x: e.clientX - (centerX + positions[id].x),\n      y: e.clientY - (centerY + positions[id].y)\n    });\n  };\n  const handleMouseMove = e => {\n    if (!dragging) return;\n    e.preventDefault();\n    const rect = mindMapRef.current.getBoundingClientRect();\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n    setPositions(prev => ({\n      ...prev,\n      [dragging]: {\n        x: e.clientX - centerX - dragOffset.x,\n        y: e.clientY - centerY - dragOffset.y\n      }\n    }));\n  };\n  const handleMouseUp = () => {\n    setDragging(null);\n  };\n\n  // Add and remove global event listeners\n  useEffect(() => {\n    if (dragging) {\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('mouseup', handleMouseUp);\n    }\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [dragging]);\n\n  // Render connections between central question and concepts\n  const renderConnections = () => {\n    if (!svgRef.current || !centralQuestionRef.current) return null;\n    return concepts.map(concept => {\n      if (!positions[concept.id] || !conceptRefs.current[concept.id]) return null;\n\n      // Get the central question position\n      const centralRect = centralQuestionRef.current.getBoundingClientRect();\n      const svgRect = svgRef.current.getBoundingClientRect();\n\n      // Calculate the center points\n      const centralX = centralRect.width / 2;\n      const centralY = centralRect.height / 2;\n\n      // Calculate concept center (it's already translated to center due to transform)\n      const conceptPos = positions[concept.id];\n      return /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: `50%`,\n        y1: `50%`,\n        x2: `calc(50% + ${conceptPos.x}px)`,\n        y2: `calc(50% + ${conceptPos.y}px)`,\n        className: \"connection\"\n      }, `connection-${concept.id}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  // Console log for debugging\n  console.log(\"Active nodes:\", activeNodes);\n  console.log(\"Expanded node index:\", expandedNodeIndex);\n  console.log(\"Expanded concepts:\", expandedConcepts);\n  console.log(\"Positions:\", positions);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mind-map-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mind-map\",\n      ref: mindMapRef,\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        className: \"connections\",\n        ref: svgRef,\n        children: renderConnections()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"central-question\",\n        ref: centralQuestionRef,\n        children: centralQuestion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this), concepts.map(concept => {\n        if (!positions[concept.id]) return null;\n        const {\n          x,\n          y\n        } = positions[concept.id];\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: el => conceptRefs.current[concept.id] = el,\n          className: `concept ${dragging === concept.id ? 'dragging' : ''}`,\n          style: {\n            left: `calc(50% + ${x}px)`,\n            top: `calc(50% + ${y}px)`\n          },\n          onMouseDown: e => handleMouseDown(e, concept.id),\n          children: concept.text\n        }, concept.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 13\n        }, this);\n      }), expandedNodeIndex !== null && expandedConcepts.map((concept, index) => {\n        const pos = positions[`expanded-${expandedNodeIndex}-${index}`];\n        if (!pos) return null;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"concept expanded-child\",\n          \"data-expanded-index\": `${expandedNodeIndex}-${index}`,\n          style: {\n            left: `${pos.x}px`,\n            top: `${pos.y}px`,\n            border: '2px solid #000'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"concept-title\",\n            children: concept.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 15\n          }, this), concept.description && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"concept-description\",\n            children: concept.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"concept-icon\",\n            children: /*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              viewBox: \"0 0 24 24\",\n              width: \"24\",\n              height: \"24\",\n              children: [/*#__PURE__*/_jsxDEV(\"path\", {\n                fill: \"none\",\n                d: \"M0 0h24v24H0z\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                d: \"M9.973 18h4.054c.132-1.202.745-2.194 1.74-3.277.113-.122.832-.867.917-.973a6 6 0 1 0-9.37-.002c.086.107.807.853.918.974.996 1.084 1.609 2.076 1.741 3.278zM14 20h-4v1h4v-1zm-8.246-5a8 8 0 1 1 12.49.002C17.624 15.774 16 17 16 18.5V21a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2v-2.5C8 17 6.375 15.774 5.754 15z\",\n                fill: \"rgba(0,0,0,0.6)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 15\n          }, this)]\n        }, `expanded-${expandedNodeIndex}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 5\n  }, this);\n};\n_s(MindMap, \"D+uAYIpAL/DZm41gI1oFU+ymYtk=\");\n_c = MindMap;\nexport default MindMap;\nvar _c;\n$RefreshReg$(_c, \"MindMap\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","MindMap","centralQuestion","concepts","_s","positions","setPositions","dragging","setDragging","dragOffset","setDragOffset","x","y","activeNodes","setActiveNodes","map","expandedNodeIndex","setExpandedNodeIndex","expandedConcepts","setExpandedConcepts","mindMapRef","svgRef","conceptRefs","centralQuestionRef","initialPositions","radius","forEach","concept","index","angle","length","Math","PI","id","cos","sin","expandNode","console","log","newConcepts","title","description","parentPos","newPositions","direction","i","xOffset","yOffset","toggleNodeActive","inactiveCount","filter","active","prev","newActive","activeNodeIndices","newInactiveCount","remainingActiveIndex","findIndex","handleMouseDown","e","stopPropagation","rect","current","getBoundingClientRect","centerX","width","centerY","height","clientX","clientY","handleMouseMove","preventDefault","handleMouseUp","window","addEventListener","removeEventListener","renderConnections","centralRect","svgRect","centralX","centralY","conceptPos","x1","y1","x2","y2","className","fileName","_jsxFileName","lineNumber","columnNumber","children","ref","el","style","left","top","onMouseDown","text","pos","border","xmlns","viewBox","fill","d","_c","$RefreshReg$"],"sources":["/Users/kei/AIdeator-LLM/frontend/src/components/MindMap.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './MindMap.css';\n\nconst MindMap = ({ centralQuestion, concepts }) => {\n  const [positions, setPositions] = useState({});\n  const [dragging, setDragging] = useState(null);\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n  const [activeNodes, setActiveNodes] = useState(concepts.map(() => true));\n  const [expandedNodeIndex, setExpandedNodeIndex] = useState(null);\n  const [expandedConcepts, setExpandedConcepts] = useState([]);\n  const mindMapRef = useRef(null);\n  const svgRef = useRef(null);\n  const conceptRefs = useRef({});\n  const centralQuestionRef = useRef(null);\n\n  // Initialize positions in a circle around the central question\n  useEffect(() => {\n    const initialPositions = {};\n    const radius = 200; // Distance from center\n    \n    concepts.forEach((concept, index) => {\n      const angle = (index / concepts.length) * Math.PI * 2;\n      initialPositions[concept.id] = {\n        x: Math.cos(angle) * radius,\n        y: Math.sin(angle) * radius\n      };\n    });\n    \n    setPositions(initialPositions);\n  }, [concepts]);\n\n  // Expand a node with 5 new child nodes\n  const expandNode = (index) => {\n    console.log(\"Expanding node\", index);\n    setExpandedNodeIndex(index);\n    \n    // Create 5 new concept nodes with titles and descriptions\n    const newConcepts = [\n      {\n        title: \"Fear of letting others down\",\n        description: \"Social and professional pressures can make people fear judgment from peers.\"\n      },\n      {\n        title: \"Concept B\",\n        description: \"A detailed description of concept B and its implications.\"\n      },\n      {\n        title: \"Concept C\",\n        description: \"A detailed description of concept C and its implications.\"\n      },\n      {\n        title: \"Concept D\",\n        description: \"A detailed description of concept D and its implications.\"\n      },\n      {\n        title: \"Concept E\",\n        description: \"A detailed description of concept E and its implications.\"\n      }\n    ];\n    \n    setExpandedConcepts(newConcepts);\n    \n    // Create positions for the new nodes following the parent's side\n    const parentPos = positions[`concept-${index}`];\n    const newPositions = { ...positions };\n    \n    // Determine which side the parent node is on relative to the center\n    // This uses the standard layout: top, left, right, bottom-left, bottom-right\n    let direction;\n    \n    if (index === 0) {\n      // Top node - place children above it\n      direction = 'top';\n    } else if (index === 1) {\n      // Left node - place children to the left\n      direction = 'left';\n    } else if (index === 2) {\n      // Right node - place children to the right\n      direction = 'right';\n    } else if (index === 3) {\n      // Bottom Left node - place children below and to the left\n      direction = 'bottom-left';\n    } else if (index === 4) {\n      // Bottom Right node - place children below and to the right\n      direction = 'bottom-right';\n    }\n    \n    console.log(\"Direction for expanded nodes:\", direction);\n    \n    // Position nodes based on the parent's position/direction\n    switch (direction) {\n      case 'top':\n        // Arrange horizontally above the parent\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + xOffset,\n            y: parentPos.y - 150\n          };\n        }\n        break;\n        \n      case 'left':\n        // Arrange vertically to the left - increase spacing\n        for (let i = 0; i < newConcepts.length; i++) {\n          const yOffset = (i - 2) * 100; // -200, -100, 0, 100, 200\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x - 250,\n            y: parentPos.y + yOffset\n          };\n        }\n        break;\n        \n      case 'right':\n        // Arrange vertically to the right - increase spacing\n        for (let i = 0; i < newConcepts.length; i++) {\n          const yOffset = (i - 2) * 100; // -200, -100, 0, 100, 200\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + 250,\n            y: parentPos.y + yOffset\n          };\n        }\n        break;\n        \n      case 'bottom-left':\n        // Arrange horizontally below and to the left\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x - 100 + xOffset,\n            y: parentPos.y + 150\n          };\n        }\n        break;\n        \n      case 'bottom-right':\n        // Arrange horizontally below and to the right\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + 100 + xOffset,\n            y: parentPos.y + 150\n          };\n        }\n        break;\n    }\n    \n    setPositions(newPositions);\n  };\n\n  // Toggle node active state\n  const toggleNodeActive = (index) => {\n    // Count how many inactive nodes we currently have\n    const inactiveCount = activeNodes.filter(active => !active).length;\n    \n    // If this node is already inactive, we can always make it active again\n    if (!activeNodes[index]) {\n      setActiveNodes(prev => {\n        const newActive = [...prev];\n        newActive[index] = true;\n        return newActive;\n      });\n      // If we're activating a node, clear expansion\n      if (expandedNodeIndex !== null) {\n        setExpandedNodeIndex(null);\n        setExpandedConcepts([]);\n      }\n      return;\n    }\n    \n    // If this would be the 5th inactive node (all inactive), don't allow it\n    if (inactiveCount === 4) {\n      // Find the only remaining active node (which must be this one)\n      const activeNodeIndices = activeNodes.map((active, i) => active ? i : -1).filter(i => i >= 0);\n      if (activeNodeIndices.length === 1 && activeNodeIndices[0] === index) {\n        console.log(\"Can't deactivate the last node\");\n        return;\n      }\n    }\n    \n    // Make this node inactive\n    setActiveNodes(prev => {\n      const newActive = [...prev];\n      newActive[index] = false;\n      return newActive;\n    });\n    \n    // Check if we now have 4 inactive nodes (1 active)\n    const newInactiveCount = inactiveCount + 1;\n    if (newInactiveCount === 4) {\n      // Find the one remaining active node\n      const remainingActiveIndex = activeNodes.findIndex((active, i) => active && i !== index);\n      if (remainingActiveIndex !== -1) {\n        // Expand the remaining active node\n        expandNode(remainingActiveIndex);\n      }\n    }\n  };\n\n  const handleMouseDown = (e, id) => {\n    e.stopPropagation();\n    \n    const rect = mindMapRef.current.getBoundingClientRect();\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n    \n    setDragging(id);\n    setDragOffset({\n      x: e.clientX - (centerX + positions[id].x),\n      y: e.clientY - (centerY + positions[id].y)\n    });\n  };\n\n  const handleMouseMove = (e) => {\n    if (!dragging) return;\n    \n    e.preventDefault();\n    \n    const rect = mindMapRef.current.getBoundingClientRect();\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n    \n    setPositions(prev => ({\n      ...prev,\n      [dragging]: {\n        x: e.clientX - centerX - dragOffset.x,\n        y: e.clientY - centerY - dragOffset.y\n      }\n    }));\n  };\n\n  const handleMouseUp = () => {\n    setDragging(null);\n  };\n\n  // Add and remove global event listeners\n  useEffect(() => {\n    if (dragging) {\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('mouseup', handleMouseUp);\n    }\n    \n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [dragging]);\n\n  // Render connections between central question and concepts\n  const renderConnections = () => {\n    if (!svgRef.current || !centralQuestionRef.current) return null;\n    \n    return concepts.map(concept => {\n      if (!positions[concept.id] || !conceptRefs.current[concept.id]) return null;\n      \n      // Get the central question position\n      const centralRect = centralQuestionRef.current.getBoundingClientRect();\n      const svgRect = svgRef.current.getBoundingClientRect();\n      \n      // Calculate the center points\n      const centralX = centralRect.width / 2;\n      const centralY = centralRect.height / 2;\n      \n      // Calculate concept center (it's already translated to center due to transform)\n      const conceptPos = positions[concept.id];\n      \n      return (\n        <line\n          key={`connection-${concept.id}`}\n          x1={`50%`}\n          y1={`50%`}\n          x2={`calc(50% + ${conceptPos.x}px)`}\n          y2={`calc(50% + ${conceptPos.y}px)`}\n          className=\"connection\"\n        />\n      );\n    });\n  };\n\n  // Console log for debugging\n  console.log(\"Active nodes:\", activeNodes);\n  console.log(\"Expanded node index:\", expandedNodeIndex);\n  console.log(\"Expanded concepts:\", expandedConcepts);\n  console.log(\"Positions:\", positions);\n\n  return (\n    <div className=\"mind-map-container\">\n      <div className=\"mind-map\" ref={mindMapRef}>\n        <svg className=\"connections\" ref={svgRef}>\n          {renderConnections()}\n        </svg>\n        \n        <div className=\"central-question\" ref={centralQuestionRef}>\n          {centralQuestion}\n        </div>\n        \n        {concepts.map(concept => {\n          if (!positions[concept.id]) return null;\n          \n          const { x, y } = positions[concept.id];\n          \n          return (\n            <div\n              key={concept.id}\n              ref={el => conceptRefs.current[concept.id] = el}\n              className={`concept ${dragging === concept.id ? 'dragging' : ''}`}\n              style={{\n                left: `calc(50% + ${x}px)`,\n                top: `calc(50% + ${y}px)`\n              }}\n              onMouseDown={(e) => handleMouseDown(e, concept.id)}\n            >\n              {concept.text}\n            </div>\n          );\n        })}\n        \n        {/* Expanded Concept Nodes */}\n        {expandedNodeIndex !== null && expandedConcepts.map((concept, index) => {\n          const pos = positions[`expanded-${expandedNodeIndex}-${index}`];\n          if (!pos) return null;\n          \n          return (\n            <div\n              key={`expanded-${expandedNodeIndex}-${index}`}\n              className=\"concept expanded-child\"\n              data-expanded-index={`${expandedNodeIndex}-${index}`}\n              style={{\n                left: `${pos.x}px`,\n                top: `${pos.y}px`,\n                border: '2px solid #000'\n              }}\n            >\n              <div className=\"concept-title\">{concept.title}</div>\n              {concept.description && (\n                <div className=\"concept-description\">{concept.description}</div>\n              )}\n              <div className=\"concept-icon\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\n                  <path fill=\"none\" d=\"M0 0h24v24H0z\"/>\n                  <path d=\"M9.973 18h4.054c.132-1.202.745-2.194 1.74-3.277.113-.122.832-.867.917-.973a6 6 0 1 0-9.37-.002c.086.107.807.853.918.974.996 1.084 1.609 2.076 1.741 3.278zM14 20h-4v1h4v-1zm-8.246-5a8 8 0 1 1 12.49.002C17.624 15.774 16 17 16 18.5V21a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2v-2.5C8 17 6.375 15.774 5.754 15z\" fill=\"rgba(0,0,0,0.6)\"/>\n                </svg>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default MindMap; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}