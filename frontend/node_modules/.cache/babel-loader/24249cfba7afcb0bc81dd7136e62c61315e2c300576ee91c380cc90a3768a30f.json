{"ast":null,"code":"var _jsxFileName = \"/Users/kei/AIdeator-LLM/frontend/src/components/MindMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './MindMap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MindMap = ({\n  centralQuestion,\n  concepts\n}) => {\n  _s();\n  const [positions, setPositions] = useState({});\n  const [draggedConcept, setDraggedConcept] = useState(null);\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [activeNodes, setActiveNodes] = useState(concepts.map(() => true));\n  const [expandedNodeIndex, setExpandedNodeIndex] = useState(null);\n  const [expandedConcepts, setExpandedConcepts] = useState([]);\n  const [nodeSizes, setNodeSizes] = useState({});\n  const mapRef = useRef(null);\n  const conceptRefs = useRef([]);\n  const centralRef = useRef(null);\n\n  // Initialize refs for concept nodes\n  useEffect(() => {\n    conceptRefs.current = Array(concepts.length).fill().map(() => /*#__PURE__*/React.createRef());\n  }, [concepts.length]);\n\n  // Initialize positions in a balanced layout\n  useEffect(() => {\n    if (Object.keys(positions).length === 0) {\n      // Positions that match the reference image exactly\n      const initialPositions = {\n        'concept-0': {\n          x: 0,\n          y: -180\n        },\n        // Top\n        'concept-1': {\n          x: -280,\n          y: 0\n        },\n        // Left\n        'concept-2': {\n          x: 280,\n          y: 0\n        },\n        // Right\n        'concept-3': {\n          x: -180,\n          y: 200\n        },\n        // Bottom Left\n        'concept-4': {\n          x: 180,\n          y: 200\n        } // Bottom Right\n      };\n      setPositions(initialPositions);\n    }\n  }, [positions]);\n\n  // Expand a node with 5 new child nodes\n  const expandNode = index => {\n    console.log(\"Expanding node\", index);\n    setExpandedNodeIndex(index);\n\n    // Create 5 new concept nodes with titles and descriptions\n    const newConcepts = [{\n      title: \"Fear of letting others down\",\n      description: \"Social and professional pressures can make people fear judgment from peers.\"\n    }, {\n      title: \"Concept B\",\n      description: \"A detailed description of concept B and its implications.\"\n    }, {\n      title: \"Concept C\",\n      description: \"A detailed description of concept C and its implications.\"\n    }, {\n      title: \"Concept D\",\n      description: \"A detailed description of concept D and its implications.\"\n    }, {\n      title: \"Concept E\",\n      description: \"A detailed description of concept E and its implications.\"\n    }];\n    setExpandedConcepts(newConcepts);\n\n    // Create positions for the new nodes following the parent's side\n    const parentPos = positions[`concept-${index}`];\n    const newPositions = {\n      ...positions\n    };\n\n    // Determine which side the parent node is on relative to the center\n    // This uses the standard layout: top, left, right, bottom-left, bottom-right\n    let direction;\n    if (index === 0) {\n      // Top node - place children above it\n      direction = 'top';\n    } else if (index === 1) {\n      // Left node - place children to the left\n      direction = 'left';\n    } else if (index === 2) {\n      // Right node - place children to the right\n      direction = 'right';\n    } else if (index === 3) {\n      // Bottom Left node - place children below and to the left\n      direction = 'bottom-left';\n    } else if (index === 4) {\n      // Bottom Right node - place children below and to the right\n      direction = 'bottom-right';\n    }\n    console.log(\"Direction for expanded nodes:\", direction);\n\n    // Position nodes based on the parent's position/direction\n    switch (direction) {\n      case 'top':\n        // Arrange horizontally above the parent\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + xOffset,\n            y: parentPos.y - 150\n          };\n        }\n        break;\n      case 'left':\n        // Arrange vertically to the left - increase spacing\n        for (let i = 0; i < newConcepts.length; i++) {\n          const yOffset = (i - 2) * 100; // -200, -100, 0, 100, 200\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x - 250,\n            y: parentPos.y + yOffset\n          };\n        }\n        break;\n      case 'right':\n        // Arrange vertically to the right - increase spacing\n        for (let i = 0; i < newConcepts.length; i++) {\n          const yOffset = (i - 2) * 100; // -200, -100, 0, 100, 200\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + 250,\n            y: parentPos.y + yOffset\n          };\n        }\n        break;\n      case 'bottom-left':\n        // Arrange horizontally below and to the left\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x - 100 + xOffset,\n            y: parentPos.y + 150\n          };\n        }\n        break;\n      case 'bottom-right':\n        // Arrange horizontally below and to the right\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + 100 + xOffset,\n            y: parentPos.y + 150\n          };\n        }\n        break;\n    }\n    setPositions(newPositions);\n  };\n\n  // Toggle node active state\n  const toggleNodeActive = index => {\n    // Count how many inactive nodes we currently have\n    const inactiveCount = activeNodes.filter(active => !active).length;\n\n    // If this node is already inactive, we can always make it active again\n    if (!activeNodes[index]) {\n      setActiveNodes(prev => {\n        const newActive = [...prev];\n        newActive[index] = true;\n        return newActive;\n      });\n      // If we're activating a node, clear expansion\n      if (expandedNodeIndex !== null) {\n        setExpandedNodeIndex(null);\n        setExpandedConcepts([]);\n      }\n      return;\n    }\n\n    // If this would be the 5th inactive node (all inactive), don't allow it\n    if (inactiveCount === 4) {\n      // Find the only remaining active node (which must be this one)\n      const activeNodeIndices = activeNodes.map((active, i) => active ? i : -1).filter(i => i >= 0);\n      if (activeNodeIndices.length === 1 && activeNodeIndices[0] === index) {\n        console.log(\"Can't deactivate the last node\");\n        return;\n      }\n    }\n\n    // Make this node inactive\n    setActiveNodes(prev => {\n      const newActive = [...prev];\n      newActive[index] = false;\n      return newActive;\n    });\n\n    // Check if we now have 4 inactive nodes (1 active)\n    const newInactiveCount = inactiveCount + 1;\n    if (newInactiveCount === 4) {\n      // Find the one remaining active node\n      const remainingActiveIndex = activeNodes.findIndex((active, i) => active && i !== index);\n      if (remainingActiveIndex !== -1) {\n        // Expand the remaining active node\n        expandNode(remainingActiveIndex);\n      }\n    }\n  };\n\n  // Helper function to calculate intersection points between line and node\n  const getIntersection = (center, nodeCenter, nodeSize) => {\n    const dx = nodeCenter.x - center.x;\n    const dy = nodeCenter.y - center.y;\n\n    // If centers are the same, return the node center\n    if (dx === 0 && dy === 0) return nodeCenter;\n\n    // Get half width and height\n    const width = nodeSize.width || 0;\n    const height = nodeSize.height || 0;\n\n    // Make sure we have valid dimensions to avoid division by zero\n    if (width <= 0 || height <= 0) return nodeCenter;\n    const halfWidth = width / 2;\n    const halfHeight = height / 2;\n\n    // Calculate scale factors for intersection with rectangle\n    const scaleX = halfWidth / Math.abs(dx);\n    const scaleY = halfHeight / Math.abs(dy);\n\n    // Choose the smaller scale (the first intersection)\n    const scale = Math.min(scaleX, scaleY);\n\n    // Calculate intersection point\n    return {\n      x: nodeCenter.x - dx * scale,\n      y: nodeCenter.y - dy * scale\n    };\n  };\n\n  // Render connections between nodes using SVG\n  const renderConnections = () => {\n    if (!mapRef.current) return null;\n\n    // Get map dimensions\n    const mapRect = mapRef.current.getBoundingClientRect();\n    const center = {\n      x: mapRect.width / 2,\n      y: mapRect.height / 2\n    };\n    return /*#__PURE__*/_jsxDEV(\"svg\", {\n      className: \"connections\",\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        pointerEvents: 'none',\n        zIndex: 1,\n        overflow: 'visible'\n      },\n      children: [concepts.map((_, index) => {\n        const pos = positions[`concept-${index}`] || {\n          x: 0,\n          y: 0\n        };\n\n        // Get node sizes for accurate connection points\n        const centralSize = nodeSizes['central'] || {\n          width: 0,\n          height: 0\n        };\n        const conceptSize = nodeSizes[`concept-${index}`] || {\n          width: 0,\n          height: 0\n        };\n\n        // Calculate node centers\n        const centralCenter = {\n          x: center.x,\n          y: center.y\n        };\n        const conceptCenter = {\n          x: center.x + pos.x,\n          y: center.y + pos.y\n        };\n\n        // Calculate intersection points for line endpoints\n        const centralIntersect = getIntersection(conceptCenter, centralCenter, centralSize);\n        const conceptIntersect = getIntersection(centralCenter, conceptCenter, conceptSize);\n        return /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: centralIntersect.x,\n          y1: centralIntersect.y,\n          x2: conceptIntersect.x,\n          y2: conceptIntersect.y,\n          stroke: activeNodes[index] ? \"#000\" : \"#aaa\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeDasharray: activeNodes[index] ? \"none\" : \"5,5\",\n          opacity: activeNodes[index] ? 1 : 0.7\n        }, `line-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this);\n      }), expandedNodeIndex !== null && expandedConcepts.map((_, i) => {\n        const parentPos = positions[`concept-${expandedNodeIndex}`] || {\n          x: 0,\n          y: 0\n        };\n        const childPos = positions[`expanded-${expandedNodeIndex}-${i}`];\n        if (!childPos) return null;\n\n        // Get node sizes for accurate connection points\n        const parentSize = nodeSizes[`concept-${expandedNodeIndex}`] || {\n          width: 0,\n          height: 0\n        };\n        const childSize = nodeSizes[`expanded-${expandedNodeIndex}-${i}`] || {\n          width: 0,\n          height: 0\n        };\n\n        // Calculate node centers\n        const parentCenter = {\n          x: center.x + parentPos.x,\n          y: center.y + parentPos.y\n        };\n        const childCenter = {\n          x: center.x + childPos.x,\n          y: center.y + childPos.y\n        };\n\n        // Calculate intersection points for line endpoints\n        const parentIntersect = getIntersection(childCenter, parentCenter, parentSize);\n        const childIntersect = getIntersection(parentCenter, childCenter, childSize);\n        return /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: parentIntersect.x,\n          y1: parentIntersect.y,\n          x2: childIntersect.x,\n          y2: childIntersect.y,\n          stroke: \"#000\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\"\n        }, `expanded-line-${expandedNodeIndex}-${i}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Handle starting to drag a concept\n  const handleMouseDown = (e, conceptId) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const rect = e.currentTarget.getBoundingClientRect();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    setDraggedConcept(conceptId);\n    setDragOffset({\n      x: e.clientX - (rect.left - mapRect.left),\n      y: e.clientY - (rect.top - mapRect.top)\n    });\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle dragging a concept\n  const handleMouseMove = e => {\n    if (!draggedConcept) return;\n    e.preventDefault();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    const newX = e.clientX - mapRect.left - dragOffset.x;\n    const newY = e.clientY - mapRect.top - dragOffset.y;\n\n    // Update position in state\n    setPositions(prev => ({\n      ...prev,\n      [draggedConcept]: {\n        x: newX,\n        y: newY\n      }\n    }));\n  };\n\n  // Handle dropping a concept\n  const handleMouseUp = () => {\n    setDraggedConcept(null);\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Use useEffect to observe and store node sizes\n  useEffect(() => {\n    // Create a resize observer to detect size changes in nodes\n    const resizeObserver = new ResizeObserver(entries => {\n      const newSizes = {\n        ...nodeSizes\n      };\n      entries.forEach(entry => {\n        const nodeId = entry.target.getAttribute('data-node-id');\n        if (nodeId) {\n          newSizes[nodeId] = {\n            width: entry.contentRect.width,\n            height: entry.contentRect.height\n          };\n        }\n      });\n      setNodeSizes(newSizes);\n    });\n\n    // Observe central node\n    if (centralRef.current) {\n      centralRef.current.setAttribute('data-node-id', 'central');\n      resizeObserver.observe(centralRef.current);\n    }\n\n    // Observe all concept nodes\n    conceptRefs.current.forEach((ref, index) => {\n      if (ref.current) {\n        ref.current.setAttribute('data-node-id', `concept-${index}`);\n        resizeObserver.observe(ref.current);\n      }\n    });\n\n    // Observe any expanded nodes\n    const expandedNodes = document.querySelectorAll('.expanded-child');\n    expandedNodes.forEach(node => {\n      const nodeId = node.getAttribute('data-node-id');\n      if (nodeId) {\n        resizeObserver.observe(node);\n      }\n    });\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, [conceptRefs.current.length, expandedNodeIndex, expandedConcepts]);\n\n  // Debug logging\n  useEffect(() => {\n    console.log(\"Node sizes:\", nodeSizes);\n  }, [nodeSizes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mind-map-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mind-map\",\n      ref: mapRef,\n      children: [renderConnections(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"central-question\",\n        ref: centralRef,\n        \"data-node-id\": \"central\",\n        children: centralQuestion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 9\n      }, this), concepts.map((concept, index) => {\n        const pos = positions[`concept-${index}`] || {\n          x: 0,\n          y: 0\n        };\n        const isDragging = draggedConcept === `concept-${index}`;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `concept ${!activeNodes[index] ? 'inactive' : ''} ${isDragging ? 'dragging' : ''} ${index === expandedNodeIndex ? 'expanded' : ''}`,\n          style: {\n            top: `calc(50% + ${pos.y}px)`,\n            left: `calc(50% + ${pos.x}px)`,\n            cursor: isDragging ? 'grabbing' : 'grab'\n          },\n          ref: conceptRefs.current[index],\n          \"data-node-id\": `concept-${index}`,\n          onMouseDown: e => handleMouseDown(e, `concept-${index}`),\n          onClick: e => {\n            e.stopPropagation();\n            if (!draggedConcept) {\n              toggleNodeActive(index);\n            }\n          },\n          children: concept\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 13\n        }, this);\n      }), expandedNodeIndex !== null && expandedConcepts.map((concept, index) => {\n        const pos = positions[`expanded-${expandedNodeIndex}-${index}`];\n        if (!pos) return null;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"concept expanded-child\",\n          \"data-node-id\": `expanded-${expandedNodeIndex}-${index}`,\n          style: {\n            top: `calc(50% + ${pos.y}px)`,\n            left: `calc(50% + ${pos.x}px)`,\n            border: '2px solid #000'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"concept-title\",\n            children: concept.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 15\n          }, this), concept.description && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"concept-description\",\n            children: concept.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"concept-icon\",\n            children: /*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              viewBox: \"0 0 24 24\",\n              width: \"24\",\n              height: \"24\",\n              children: [/*#__PURE__*/_jsxDEV(\"path\", {\n                fill: \"none\",\n                d: \"M0 0h24v24H0z\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 486,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                d: \"M9.973 18h4.054c.132-1.202.745-2.194 1.74-3.277.113-.122.832-.867.917-.973a6 6 0 1 0-9.37-.002c.086.107.807.853.918.974.996 1.084 1.609 2.076 1.741 3.278zM14 20h-4v1h4v-1zm-8.246-5a8 8 0 1 1 12.49.002C17.624 15.774 16 17 16 18.5V21a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2v-2.5C8 17 6.375 15.774 5.754 15z\",\n                fill: \"rgba(0,0,0,0.6)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 487,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 485,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 15\n          }, this)]\n        }, `expanded-${expandedNodeIndex}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 421,\n    columnNumber: 5\n  }, this);\n};\n_s(MindMap, \"a+CBl6jGmv9IFbTBNsp+g5MtfXI=\");\n_c = MindMap;\nexport default MindMap;\nvar _c;\n$RefreshReg$(_c, \"MindMap\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","MindMap","centralQuestion","concepts","_s","positions","setPositions","draggedConcept","setDraggedConcept","dragOffset","setDragOffset","x","y","activeNodes","setActiveNodes","map","expandedNodeIndex","setExpandedNodeIndex","expandedConcepts","setExpandedConcepts","nodeSizes","setNodeSizes","mapRef","conceptRefs","centralRef","current","Array","length","fill","createRef","Object","keys","initialPositions","expandNode","index","console","log","newConcepts","title","description","parentPos","newPositions","direction","i","xOffset","yOffset","toggleNodeActive","inactiveCount","filter","active","prev","newActive","activeNodeIndices","newInactiveCount","remainingActiveIndex","findIndex","getIntersection","center","nodeCenter","nodeSize","dx","dy","width","height","halfWidth","halfHeight","scaleX","Math","abs","scaleY","scale","min","renderConnections","mapRect","getBoundingClientRect","className","style","position","top","left","pointerEvents","zIndex","overflow","children","_","pos","centralSize","conceptSize","centralCenter","conceptCenter","centralIntersect","conceptIntersect","x1","y1","x2","y2","stroke","strokeWidth","strokeLinecap","strokeDasharray","opacity","fileName","_jsxFileName","lineNumber","columnNumber","childPos","parentSize","childSize","parentCenter","childCenter","parentIntersect","childIntersect","handleMouseDown","e","conceptId","preventDefault","stopPropagation","rect","currentTarget","clientX","clientY","document","addEventListener","handleMouseMove","handleMouseUp","newX","newY","removeEventListener","resizeObserver","ResizeObserver","entries","newSizes","forEach","entry","nodeId","target","getAttribute","contentRect","setAttribute","observe","ref","expandedNodes","querySelectorAll","node","disconnect","concept","isDragging","cursor","onMouseDown","onClick","border","xmlns","viewBox","d","_c","$RefreshReg$"],"sources":["/Users/kei/AIdeator-LLM/frontend/src/components/MindMap.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './MindMap.css';\n\nconst MindMap = ({ centralQuestion, concepts }) => {\n  const [positions, setPositions] = useState({});\n  const [draggedConcept, setDraggedConcept] = useState(null);\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n  const [activeNodes, setActiveNodes] = useState(concepts.map(() => true));\n  const [expandedNodeIndex, setExpandedNodeIndex] = useState(null);\n  const [expandedConcepts, setExpandedConcepts] = useState([]);\n  const [nodeSizes, setNodeSizes] = useState({});\n  const mapRef = useRef(null);\n  const conceptRefs = useRef([]);\n  const centralRef = useRef(null);\n\n  // Initialize refs for concept nodes\n  useEffect(() => {\n    conceptRefs.current = Array(concepts.length).fill().map(() => React.createRef());\n  }, [concepts.length]);\n\n  // Initialize positions in a balanced layout\n  useEffect(() => {\n    if (Object.keys(positions).length === 0) {\n      // Positions that match the reference image exactly\n      const initialPositions = {\n        'concept-0': { x: 0, y: -180 },      // Top\n        'concept-1': { x: -280, y: 0 },      // Left\n        'concept-2': { x: 280, y: 0 },       // Right\n        'concept-3': { x: -180, y: 200 },    // Bottom Left\n        'concept-4': { x: 180, y: 200 }      // Bottom Right\n      };\n      \n      setPositions(initialPositions);\n    }\n  }, [positions]);\n\n  // Expand a node with 5 new child nodes\n  const expandNode = (index) => {\n    console.log(\"Expanding node\", index);\n    setExpandedNodeIndex(index);\n    \n    // Create 5 new concept nodes with titles and descriptions\n    const newConcepts = [\n      {\n        title: \"Fear of letting others down\",\n        description: \"Social and professional pressures can make people fear judgment from peers.\"\n      },\n      {\n        title: \"Concept B\",\n        description: \"A detailed description of concept B and its implications.\"\n      },\n      {\n        title: \"Concept C\",\n        description: \"A detailed description of concept C and its implications.\"\n      },\n      {\n        title: \"Concept D\",\n        description: \"A detailed description of concept D and its implications.\"\n      },\n      {\n        title: \"Concept E\",\n        description: \"A detailed description of concept E and its implications.\"\n      }\n    ];\n    \n    setExpandedConcepts(newConcepts);\n    \n    // Create positions for the new nodes following the parent's side\n    const parentPos = positions[`concept-${index}`];\n    const newPositions = { ...positions };\n    \n    // Determine which side the parent node is on relative to the center\n    // This uses the standard layout: top, left, right, bottom-left, bottom-right\n    let direction;\n    \n    if (index === 0) {\n      // Top node - place children above it\n      direction = 'top';\n    } else if (index === 1) {\n      // Left node - place children to the left\n      direction = 'left';\n    } else if (index === 2) {\n      // Right node - place children to the right\n      direction = 'right';\n    } else if (index === 3) {\n      // Bottom Left node - place children below and to the left\n      direction = 'bottom-left';\n    } else if (index === 4) {\n      // Bottom Right node - place children below and to the right\n      direction = 'bottom-right';\n    }\n    \n    console.log(\"Direction for expanded nodes:\", direction);\n    \n    // Position nodes based on the parent's position/direction\n    switch (direction) {\n      case 'top':\n        // Arrange horizontally above the parent\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + xOffset,\n            y: parentPos.y - 150\n          };\n        }\n        break;\n        \n      case 'left':\n        // Arrange vertically to the left - increase spacing\n        for (let i = 0; i < newConcepts.length; i++) {\n          const yOffset = (i - 2) * 100; // -200, -100, 0, 100, 200\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x - 250,\n            y: parentPos.y + yOffset\n          };\n        }\n        break;\n        \n      case 'right':\n        // Arrange vertically to the right - increase spacing\n        for (let i = 0; i < newConcepts.length; i++) {\n          const yOffset = (i - 2) * 100; // -200, -100, 0, 100, 200\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + 250,\n            y: parentPos.y + yOffset\n          };\n        }\n        break;\n        \n      case 'bottom-left':\n        // Arrange horizontally below and to the left\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x - 100 + xOffset,\n            y: parentPos.y + 150\n          };\n        }\n        break;\n        \n      case 'bottom-right':\n        // Arrange horizontally below and to the right\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + 100 + xOffset,\n            y: parentPos.y + 150\n          };\n        }\n        break;\n    }\n    \n    setPositions(newPositions);\n  };\n\n  // Toggle node active state\n  const toggleNodeActive = (index) => {\n    // Count how many inactive nodes we currently have\n    const inactiveCount = activeNodes.filter(active => !active).length;\n    \n    // If this node is already inactive, we can always make it active again\n    if (!activeNodes[index]) {\n      setActiveNodes(prev => {\n        const newActive = [...prev];\n        newActive[index] = true;\n        return newActive;\n      });\n      // If we're activating a node, clear expansion\n      if (expandedNodeIndex !== null) {\n        setExpandedNodeIndex(null);\n        setExpandedConcepts([]);\n      }\n      return;\n    }\n    \n    // If this would be the 5th inactive node (all inactive), don't allow it\n    if (inactiveCount === 4) {\n      // Find the only remaining active node (which must be this one)\n      const activeNodeIndices = activeNodes.map((active, i) => active ? i : -1).filter(i => i >= 0);\n      if (activeNodeIndices.length === 1 && activeNodeIndices[0] === index) {\n        console.log(\"Can't deactivate the last node\");\n        return;\n      }\n    }\n    \n    // Make this node inactive\n    setActiveNodes(prev => {\n      const newActive = [...prev];\n      newActive[index] = false;\n      return newActive;\n    });\n    \n    // Check if we now have 4 inactive nodes (1 active)\n    const newInactiveCount = inactiveCount + 1;\n    if (newInactiveCount === 4) {\n      // Find the one remaining active node\n      const remainingActiveIndex = activeNodes.findIndex((active, i) => active && i !== index);\n      if (remainingActiveIndex !== -1) {\n        // Expand the remaining active node\n        expandNode(remainingActiveIndex);\n      }\n    }\n  };\n  \n  // Helper function to calculate intersection points between line and node\n  const getIntersection = (center, nodeCenter, nodeSize) => {\n    const dx = nodeCenter.x - center.x;\n    const dy = nodeCenter.y - center.y;\n    \n    // If centers are the same, return the node center\n    if (dx === 0 && dy === 0) return nodeCenter;\n    \n    // Get half width and height\n    const width = nodeSize.width || 0;\n    const height = nodeSize.height || 0;\n    \n    // Make sure we have valid dimensions to avoid division by zero\n    if (width <= 0 || height <= 0) return nodeCenter;\n    \n    const halfWidth = width / 2;\n    const halfHeight = height / 2;\n    \n    // Calculate scale factors for intersection with rectangle\n    const scaleX = halfWidth / Math.abs(dx);\n    const scaleY = halfHeight / Math.abs(dy);\n    \n    // Choose the smaller scale (the first intersection)\n    const scale = Math.min(scaleX, scaleY);\n    \n    // Calculate intersection point\n    return {\n      x: nodeCenter.x - dx * scale,\n      y: nodeCenter.y - dy * scale\n    };\n  };\n  \n  // Render connections between nodes using SVG\n  const renderConnections = () => {\n    if (!mapRef.current) return null;\n    \n    // Get map dimensions\n    const mapRect = mapRef.current.getBoundingClientRect();\n    const center = {\n      x: mapRect.width / 2,\n      y: mapRect.height / 2\n    };\n    \n    return (\n      <svg className=\"connections\" style={{\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        pointerEvents: 'none',\n        zIndex: 1,\n        overflow: 'visible'\n      }}>\n        {/* Main lines - from central node to concept nodes */}\n        {concepts.map((_, index) => {\n          const pos = positions[`concept-${index}`] || { x: 0, y: 0 };\n          \n          // Get node sizes for accurate connection points\n          const centralSize = nodeSizes['central'] || { width: 0, height: 0 };\n          const conceptSize = nodeSizes[`concept-${index}`] || { width: 0, height: 0 };\n          \n          // Calculate node centers\n          const centralCenter = { x: center.x, y: center.y };\n          const conceptCenter = { x: center.x + pos.x, y: center.y + pos.y };\n          \n          // Calculate intersection points for line endpoints\n          const centralIntersect = getIntersection(conceptCenter, centralCenter, centralSize);\n          const conceptIntersect = getIntersection(centralCenter, conceptCenter, conceptSize);\n          \n          return (\n            <line\n              key={`line-${index}`}\n              x1={centralIntersect.x}\n              y1={centralIntersect.y}\n              x2={conceptIntersect.x}\n              y2={conceptIntersect.y}\n              stroke={activeNodes[index] ? \"#000\" : \"#aaa\"}\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeDasharray={activeNodes[index] ? \"none\" : \"5,5\"}\n              opacity={activeNodes[index] ? 1 : 0.7}\n            />\n          );\n        })}\n        \n        {/* Expanded node connections - from parent node to expanded children */}\n        {expandedNodeIndex !== null && expandedConcepts.map((_, i) => {\n          const parentPos = positions[`concept-${expandedNodeIndex}`] || { x: 0, y: 0 };\n          const childPos = positions[`expanded-${expandedNodeIndex}-${i}`];\n          \n          if (!childPos) return null;\n          \n          // Get node sizes for accurate connection points\n          const parentSize = nodeSizes[`concept-${expandedNodeIndex}`] || { width: 0, height: 0 };\n          const childSize = nodeSizes[`expanded-${expandedNodeIndex}-${i}`] || { width: 0, height: 0 };\n          \n          // Calculate node centers\n          const parentCenter = { x: center.x + parentPos.x, y: center.y + parentPos.y };\n          const childCenter = { x: center.x + childPos.x, y: center.y + childPos.y };\n          \n          // Calculate intersection points for line endpoints\n          const parentIntersect = getIntersection(childCenter, parentCenter, parentSize);\n          const childIntersect = getIntersection(parentCenter, childCenter, childSize);\n          \n          return (\n            <line\n              key={`expanded-line-${expandedNodeIndex}-${i}`}\n              x1={parentIntersect.x}\n              y1={parentIntersect.y}\n              x2={childIntersect.x}\n              y2={childIntersect.y}\n              stroke=\"#000\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n            />\n          );\n        })}\n      </svg>\n    );\n  };\n\n  // Handle starting to drag a concept\n  const handleMouseDown = (e, conceptId) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    const rect = e.currentTarget.getBoundingClientRect();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    \n    setDraggedConcept(conceptId);\n    setDragOffset({\n      x: e.clientX - (rect.left - mapRect.left),\n      y: e.clientY - (rect.top - mapRect.top)\n    });\n    \n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle dragging a concept\n  const handleMouseMove = (e) => {\n    if (!draggedConcept) return;\n    \n    e.preventDefault();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    const newX = e.clientX - mapRect.left - dragOffset.x;\n    const newY = e.clientY - mapRect.top - dragOffset.y;\n\n    // Update position in state\n    setPositions(prev => ({\n      ...prev,\n      [draggedConcept]: { x: newX, y: newY }\n    }));\n  };\n\n  // Handle dropping a concept\n  const handleMouseUp = () => {\n    setDraggedConcept(null);\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Use useEffect to observe and store node sizes\n  useEffect(() => {\n    // Create a resize observer to detect size changes in nodes\n    const resizeObserver = new ResizeObserver(entries => {\n      const newSizes = {...nodeSizes};\n      \n      entries.forEach(entry => {\n        const nodeId = entry.target.getAttribute('data-node-id');\n        if (nodeId) {\n          newSizes[nodeId] = {\n            width: entry.contentRect.width,\n            height: entry.contentRect.height\n          };\n        }\n      });\n      \n      setNodeSizes(newSizes);\n    });\n    \n    // Observe central node\n    if (centralRef.current) {\n      centralRef.current.setAttribute('data-node-id', 'central');\n      resizeObserver.observe(centralRef.current);\n    }\n    \n    // Observe all concept nodes\n    conceptRefs.current.forEach((ref, index) => {\n      if (ref.current) {\n        ref.current.setAttribute('data-node-id', `concept-${index}`);\n        resizeObserver.observe(ref.current);\n      }\n    });\n    \n    // Observe any expanded nodes\n    const expandedNodes = document.querySelectorAll('.expanded-child');\n    expandedNodes.forEach(node => {\n      const nodeId = node.getAttribute('data-node-id');\n      if (nodeId) {\n        resizeObserver.observe(node);\n      }\n    });\n    \n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, [conceptRefs.current.length, expandedNodeIndex, expandedConcepts]);\n\n  // Debug logging\n  useEffect(() => {\n    console.log(\"Node sizes:\", nodeSizes);\n  }, [nodeSizes]);\n\n  return (\n    <div className=\"mind-map-container\">\n      <div className=\"mind-map\" ref={mapRef}>\n        {/* SVG connections */}\n        {renderConnections()}\n        \n        {/* Central Question Node */}\n        <div \n          className=\"central-question\" \n          ref={centralRef}\n          data-node-id=\"central\"\n        >\n          {centralQuestion}\n        </div>\n        \n        {/* Concept Nodes */}\n        {concepts.map((concept, index) => {\n          const pos = positions[`concept-${index}`] || { x: 0, y: 0 };\n          const isDragging = draggedConcept === `concept-${index}`;\n          \n          return (\n            <div\n              key={index}\n              className={`concept ${!activeNodes[index] ? 'inactive' : ''} ${isDragging ? 'dragging' : ''} ${index === expandedNodeIndex ? 'expanded' : ''}`}\n              style={{\n                top: `calc(50% + ${pos.y}px)`,\n                left: `calc(50% + ${pos.x}px)`,\n                cursor: isDragging ? 'grabbing' : 'grab'\n              }}\n              ref={conceptRefs.current[index]}\n              data-node-id={`concept-${index}`}\n              onMouseDown={(e) => handleMouseDown(e, `concept-${index}`)}\n              onClick={(e) => {\n                e.stopPropagation();\n                if (!draggedConcept) {\n                  toggleNodeActive(index);\n                }\n              }}\n            >\n              {concept}\n            </div>\n          );\n        })}\n        \n        {/* Expanded Concept Nodes */}\n        {expandedNodeIndex !== null && expandedConcepts.map((concept, index) => {\n          const pos = positions[`expanded-${expandedNodeIndex}-${index}`];\n          if (!pos) return null;\n          \n          return (\n            <div\n              key={`expanded-${expandedNodeIndex}-${index}`}\n              className=\"concept expanded-child\"\n              data-node-id={`expanded-${expandedNodeIndex}-${index}`}\n              style={{\n                top: `calc(50% + ${pos.y}px)`,\n                left: `calc(50% + ${pos.x}px)`,\n                border: '2px solid #000'\n              }}\n            >\n              <div className=\"concept-title\">{concept.title}</div>\n              {concept.description && (\n                <div className=\"concept-description\">{concept.description}</div>\n              )}\n              <div className=\"concept-icon\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\n                  <path fill=\"none\" d=\"M0 0h24v24H0z\"/>\n                  <path d=\"M9.973 18h4.054c.132-1.202.745-2.194 1.74-3.277.113-.122.832-.867.917-.973a6 6 0 1 0-9.37-.002c.086.107.807.853.918.974.996 1.084 1.609 2.076 1.741 3.278zM14 20h-4v1h4v-1zm-8.246-5a8 8 0 1 1 12.49.002C17.624 15.774 16 17 16 18.5V21a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2v-2.5C8 17 6.375 15.774 5.754 15z\" fill=\"rgba(0,0,0,0.6)\"/>\n                </svg>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default MindMap; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}