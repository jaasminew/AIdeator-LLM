{"ast":null,"code":"var _jsxFileName = \"/Users/kei/AIdeator-LLM/frontend/src/components/MindMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport './MindMap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MindMap = ({\n  centralQuestion,\n  concepts\n}) => {\n  _s();\n  const [positions, setPositions] = useState({});\n  const [dragging, setDragging] = useState(null);\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [activeNodes, setActiveNodes] = useState(concepts.map(() => true));\n  const [expandedNodeIndex, setExpandedNodeIndex] = useState(null);\n  const [expandedConcepts, setExpandedConcepts] = useState([]);\n  const mindMapRef = useRef(null);\n  const svgRef = useRef(null);\n  const conceptRefs = useRef({});\n  const centralQuestionRef = useRef(null);\n\n  // Initialize refs for concept nodes\n  useEffect(() => {\n    conceptRefs.current = Array(concepts.length).fill().map(() => /*#__PURE__*/React.createRef());\n  }, [concepts.length]);\n\n  // Calculate initial positions in a circle around the center\n  useEffect(() => {\n    // Use a quarter of the smallest window dimension for radius\n    const radius = Math.min(window.innerWidth, window.innerHeight) / 4;\n    const centerX = window.innerWidth / 2;\n    const centerY = window.innerHeight / 2;\n    const newPositions = {};\n\n    // Position concepts in a circle around the central question\n    concepts.forEach((concept, index) => {\n      // Calculate angle based on index and total number of concepts\n      const angle = 2 * Math.PI * index / concepts.length;\n      // Calculate position using angle and radius\n      const x = centerX + radius * Math.cos(angle);\n      const y = centerY + radius * Math.sin(angle);\n      newPositions[`concept-${index}`] = {\n        x,\n        y\n      };\n    });\n    setPositions(newPositions);\n  }, [concepts]);\n\n  // Expand a node with 5 new child nodes\n  const expandNode = index => {\n    console.log(\"Expanding node\", index);\n    setExpandedNodeIndex(index);\n\n    // Create 5 new concept nodes with titles and descriptions\n    const newConcepts = [{\n      title: \"Fear of letting others down\",\n      description: \"Social and professional pressures can make people fear judgment from peers.\"\n    }, {\n      title: \"Concept B\",\n      description: \"A detailed description of concept B and its implications.\"\n    }, {\n      title: \"Concept C\",\n      description: \"A detailed description of concept C and its implications.\"\n    }, {\n      title: \"Concept D\",\n      description: \"A detailed description of concept D and its implications.\"\n    }, {\n      title: \"Concept E\",\n      description: \"A detailed description of concept E and its implications.\"\n    }];\n    setExpandedConcepts(newConcepts);\n\n    // Create positions for the new nodes following the parent's side\n    const parentPos = positions[`concept-${index}`];\n    const newPositions = {\n      ...positions\n    };\n\n    // Determine which side the parent node is on relative to the center\n    // This uses the standard layout: top, left, right, bottom-left, bottom-right\n    let direction;\n    if (index === 0) {\n      // Top node - place children above it\n      direction = 'top';\n    } else if (index === 1) {\n      // Left node - place children to the left\n      direction = 'left';\n    } else if (index === 2) {\n      // Right node - place children to the right\n      direction = 'right';\n    } else if (index === 3) {\n      // Bottom Left node - place children below and to the left\n      direction = 'bottom-left';\n    } else if (index === 4) {\n      // Bottom Right node - place children below and to the right\n      direction = 'bottom-right';\n    }\n    console.log(\"Direction for expanded nodes:\", direction);\n\n    // Position nodes based on the parent's position/direction\n    switch (direction) {\n      case 'top':\n        // Arrange horizontally above the parent\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + xOffset,\n            y: parentPos.y - 150\n          };\n        }\n        break;\n      case 'left':\n        // Arrange vertically to the left - increase spacing\n        for (let i = 0; i < newConcepts.length; i++) {\n          const yOffset = (i - 2) * 100; // -200, -100, 0, 100, 200\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x - 250,\n            y: parentPos.y + yOffset\n          };\n        }\n        break;\n      case 'right':\n        // Arrange vertically to the right - increase spacing\n        for (let i = 0; i < newConcepts.length; i++) {\n          const yOffset = (i - 2) * 100; // -200, -100, 0, 100, 200\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + 250,\n            y: parentPos.y + yOffset\n          };\n        }\n        break;\n      case 'bottom-left':\n        // Arrange horizontally below and to the left\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x - 100 + xOffset,\n            y: parentPos.y + 150\n          };\n        }\n        break;\n      case 'bottom-right':\n        // Arrange horizontally below and to the right\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + 100 + xOffset,\n            y: parentPos.y + 150\n          };\n        }\n        break;\n    }\n    setPositions(newPositions);\n  };\n\n  // Toggle node active state\n  const toggleNodeActive = index => {\n    // Count how many inactive nodes we currently have\n    const inactiveCount = activeNodes.filter(active => !active).length;\n\n    // If this node is already inactive, we can always make it active again\n    if (!activeNodes[index]) {\n      setActiveNodes(prev => {\n        const newActive = [...prev];\n        newActive[index] = true;\n        return newActive;\n      });\n      // If we're activating a node, clear expansion\n      if (expandedNodeIndex !== null) {\n        setExpandedNodeIndex(null);\n        setExpandedConcepts([]);\n      }\n      return;\n    }\n\n    // If this would be the 5th inactive node (all inactive), don't allow it\n    if (inactiveCount === 4) {\n      // Find the only remaining active node (which must be this one)\n      const activeNodeIndices = activeNodes.map((active, i) => active ? i : -1).filter(i => i >= 0);\n      if (activeNodeIndices.length === 1 && activeNodeIndices[0] === index) {\n        console.log(\"Can't deactivate the last node\");\n        return;\n      }\n    }\n\n    // Make this node inactive\n    setActiveNodes(prev => {\n      const newActive = [...prev];\n      newActive[index] = false;\n      return newActive;\n    });\n\n    // Check if we now have 4 inactive nodes (1 active)\n    const newInactiveCount = inactiveCount + 1;\n    if (newInactiveCount === 4) {\n      // Find the one remaining active node\n      const remainingActiveIndex = activeNodes.findIndex((active, i) => active && i !== index);\n      if (remainingActiveIndex !== -1) {\n        // Expand the remaining active node\n        expandNode(remainingActiveIndex);\n      }\n    }\n  };\n  const handleMouseDown = useCallback((e, id) => {\n    e.stopPropagation();\n\n    // Calculate offset from mouse position to concept center\n    const rect = conceptRefs.current[id].getBoundingClientRect();\n    const offsetX = e.clientX - rect.left - rect.width / 2;\n    const offsetY = e.clientY - rect.top - rect.height / 2;\n    setDragOffset({\n      x: offsetX,\n      y: offsetY\n    });\n    setDragging(id);\n  }, []);\n  const handleMouseMove = useCallback(e => {\n    if (dragging) {\n      e.preventDefault();\n\n      // Update position based on mouse movement, accounting for offset\n      setPositions(prev => ({\n        ...prev,\n        [dragging]: {\n          x: e.clientX - dragOffset.x,\n          y: e.clientY - dragOffset.y\n        }\n      }));\n    }\n  }, [dragging, dragOffset]);\n  const handleMouseUp = useCallback(() => {\n    setDragging(null);\n  }, []);\n\n  // Add and remove event listeners for dragging\n  useEffect(() => {\n    if (dragging) {\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    }\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [dragging, handleMouseMove, handleMouseUp]);\n  const renderConnections = () => {\n    if (!centralQuestionRef.current || !svgRef.current) return null;\n\n    // Get SVG's bounding rect to calculate coordinates relative to it\n    const svgRect = svgRef.current.getBoundingClientRect();\n\n    // Get the central question's bounding rect\n    const centralRect = centralQuestionRef.current.getBoundingClientRect();\n    // Calculate center points relative to the SVG\n    const centralX = centralRect.left + centralRect.width / 2 - svgRect.left;\n    const centralY = centralRect.top + centralRect.height / 2 - svgRect.top;\n    return concepts.map((concept, index) => {\n      const conceptId = `concept-${index}`;\n      const pos = positions[conceptId];\n      if (!pos || !conceptRefs.current[conceptId]) return null;\n\n      // Get concept's bounding rect\n      const conceptRect = conceptRefs.current[conceptId].getBoundingClientRect();\n      // Calculate center point relative to the SVG\n      const conceptX = conceptRect.left + conceptRect.width / 2 - svgRect.left;\n      const conceptY = conceptRect.top + conceptRect.height / 2 - svgRect.top;\n      return /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: centralX,\n        y1: centralY,\n        x2: conceptX,\n        y2: conceptY,\n        className: \"connection\"\n      }, conceptId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  // Use ResizeObserver to update connections when elements resize\n  useEffect(() => {\n    if (!svgRef.current) return;\n    const updateConnections = () => {\n      // Force a re-render to update connections\n      setPositions({\n        ...positions\n      });\n    };\n\n    // Create a resize observer to detect size changes\n    const resizeObserver = new ResizeObserver(updateConnections);\n\n    // Observe the SVG container\n    resizeObserver.observe(svgRef.current);\n\n    // Observe central question\n    if (centralQuestionRef.current) {\n      resizeObserver.observe(centralQuestionRef.current);\n    }\n\n    // Observe window size changes\n    window.addEventListener('resize', updateConnections);\n    return () => {\n      resizeObserver.disconnect();\n      window.removeEventListener('resize', updateConnections);\n    };\n  }, [positions]);\n\n  // Console log for debugging\n  console.log(\"Active nodes:\", activeNodes);\n  console.log(\"Expanded node index:\", expandedNodeIndex);\n  console.log(\"Expanded concepts:\", expandedConcepts);\n  console.log(\"Positions:\", positions);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mind-map-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mind-map\",\n      ref: mindMapRef,\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        className: \"connections\",\n        ref: svgRef,\n        children: renderConnections()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"central-question\",\n        ref: centralQuestionRef,\n        children: centralQuestion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this), concepts.map((concept, index) => {\n        const conceptId = `concept-${index}`;\n        const pos = positions[conceptId] || {\n          x: 0,\n          y: 0\n        };\n        const isDragging = dragging === conceptId;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `concept ${!activeNodes[index] ? 'inactive' : ''} ${isDragging ? 'dragging' : ''} ${index === expandedNodeIndex ? 'expanded' : ''}`,\n          style: {\n            left: `${pos.x}px`,\n            top: `${pos.y}px`,\n            cursor: isDragging ? 'grabbing' : 'grab'\n          },\n          ref: el => conceptRefs.current[conceptId] = el,\n          onMouseDown: e => handleMouseDown(e, conceptId),\n          onClick: e => {\n            e.stopPropagation();\n            if (!dragging) {\n              toggleNodeActive(index);\n            }\n          },\n          children: concept\n        }, conceptId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 13\n        }, this);\n      }), expandedNodeIndex !== null && expandedConcepts.map((concept, index) => {\n        const pos = positions[`expanded-${expandedNodeIndex}-${index}`];\n        if (!pos) return null;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"concept expanded-child\",\n          \"data-expanded-index\": `${expandedNodeIndex}-${index}`,\n          style: {\n            left: `${pos.x}px`,\n            top: `${pos.y}px`,\n            border: '2px solid #000'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"concept-title\",\n            children: concept.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 15\n          }, this), concept.description && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"concept-description\",\n            children: concept.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"concept-icon\",\n            children: /*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              viewBox: \"0 0 24 24\",\n              width: \"24\",\n              height: \"24\",\n              children: [/*#__PURE__*/_jsxDEV(\"path\", {\n                fill: \"none\",\n                d: \"M0 0h24v24H0z\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                d: \"M9.973 18h4.054c.132-1.202.745-2.194 1.74-3.277.113-.122.832-.867.917-.973a6 6 0 1 0-9.37-.002c.086.107.807.853.918.974.996 1.084 1.609 2.076 1.741 3.278zM14 20h-4v1h4v-1zm-8.246-5a8 8 0 1 1 12.49.002C17.624 15.774 16 17 16 18.5V21a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2v-2.5C8 17 6.375 15.774 5.754 15z\",\n                fill: \"rgba(0,0,0,0.6)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 395,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 15\n          }, this)]\n        }, `expanded-${expandedNodeIndex}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 331,\n    columnNumber: 5\n  }, this);\n};\n_s(MindMap, \"8ssdKN3RseU1KfVbQ9bY+ce5cow=\");\n_c = MindMap;\nexport default MindMap;\nvar _c;\n$RefreshReg$(_c, \"MindMap\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","jsxDEV","_jsxDEV","MindMap","centralQuestion","concepts","_s","positions","setPositions","dragging","setDragging","dragOffset","setDragOffset","x","y","activeNodes","setActiveNodes","map","expandedNodeIndex","setExpandedNodeIndex","expandedConcepts","setExpandedConcepts","mindMapRef","svgRef","conceptRefs","centralQuestionRef","current","Array","length","fill","createRef","radius","Math","min","window","innerWidth","innerHeight","centerX","centerY","newPositions","forEach","concept","index","angle","PI","cos","sin","expandNode","console","log","newConcepts","title","description","parentPos","direction","i","xOffset","yOffset","toggleNodeActive","inactiveCount","filter","active","prev","newActive","activeNodeIndices","newInactiveCount","remainingActiveIndex","findIndex","handleMouseDown","e","id","stopPropagation","rect","getBoundingClientRect","offsetX","clientX","left","width","offsetY","clientY","top","height","handleMouseMove","preventDefault","handleMouseUp","addEventListener","removeEventListener","renderConnections","svgRect","centralRect","centralX","centralY","conceptId","pos","conceptRect","conceptX","conceptY","x1","y1","x2","y2","className","fileName","_jsxFileName","lineNumber","columnNumber","updateConnections","resizeObserver","ResizeObserver","observe","disconnect","children","ref","isDragging","style","cursor","el","onMouseDown","onClick","border","xmlns","viewBox","d","_c","$RefreshReg$"],"sources":["/Users/kei/AIdeator-LLM/frontend/src/components/MindMap.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport './MindMap.css';\n\nconst MindMap = ({ centralQuestion, concepts }) => {\n  const [positions, setPositions] = useState({});\n  const [dragging, setDragging] = useState(null);\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n  const [activeNodes, setActiveNodes] = useState(concepts.map(() => true));\n  const [expandedNodeIndex, setExpandedNodeIndex] = useState(null);\n  const [expandedConcepts, setExpandedConcepts] = useState([]);\n  const mindMapRef = useRef(null);\n  const svgRef = useRef(null);\n  const conceptRefs = useRef({});\n  const centralQuestionRef = useRef(null);\n\n  // Initialize refs for concept nodes\n  useEffect(() => {\n    conceptRefs.current = Array(concepts.length).fill().map(() => React.createRef());\n  }, [concepts.length]);\n\n  // Calculate initial positions in a circle around the center\n  useEffect(() => {\n    // Use a quarter of the smallest window dimension for radius\n    const radius = Math.min(window.innerWidth, window.innerHeight) / 4;\n    const centerX = window.innerWidth / 2;\n    const centerY = window.innerHeight / 2;\n\n    const newPositions = {};\n    \n    // Position concepts in a circle around the central question\n    concepts.forEach((concept, index) => {\n      // Calculate angle based on index and total number of concepts\n      const angle = (2 * Math.PI * index) / concepts.length;\n      // Calculate position using angle and radius\n      const x = centerX + radius * Math.cos(angle);\n      const y = centerY + radius * Math.sin(angle);\n      \n      newPositions[`concept-${index}`] = { x, y };\n    });\n    \n    setPositions(newPositions);\n  }, [concepts]);\n\n  // Expand a node with 5 new child nodes\n  const expandNode = (index) => {\n    console.log(\"Expanding node\", index);\n    setExpandedNodeIndex(index);\n    \n    // Create 5 new concept nodes with titles and descriptions\n    const newConcepts = [\n      {\n        title: \"Fear of letting others down\",\n        description: \"Social and professional pressures can make people fear judgment from peers.\"\n      },\n      {\n        title: \"Concept B\",\n        description: \"A detailed description of concept B and its implications.\"\n      },\n      {\n        title: \"Concept C\",\n        description: \"A detailed description of concept C and its implications.\"\n      },\n      {\n        title: \"Concept D\",\n        description: \"A detailed description of concept D and its implications.\"\n      },\n      {\n        title: \"Concept E\",\n        description: \"A detailed description of concept E and its implications.\"\n      }\n    ];\n    \n    setExpandedConcepts(newConcepts);\n    \n    // Create positions for the new nodes following the parent's side\n    const parentPos = positions[`concept-${index}`];\n    const newPositions = { ...positions };\n    \n    // Determine which side the parent node is on relative to the center\n    // This uses the standard layout: top, left, right, bottom-left, bottom-right\n    let direction;\n    \n    if (index === 0) {\n      // Top node - place children above it\n      direction = 'top';\n    } else if (index === 1) {\n      // Left node - place children to the left\n      direction = 'left';\n    } else if (index === 2) {\n      // Right node - place children to the right\n      direction = 'right';\n    } else if (index === 3) {\n      // Bottom Left node - place children below and to the left\n      direction = 'bottom-left';\n    } else if (index === 4) {\n      // Bottom Right node - place children below and to the right\n      direction = 'bottom-right';\n    }\n    \n    console.log(\"Direction for expanded nodes:\", direction);\n    \n    // Position nodes based on the parent's position/direction\n    switch (direction) {\n      case 'top':\n        // Arrange horizontally above the parent\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + xOffset,\n            y: parentPos.y - 150\n          };\n        }\n        break;\n        \n      case 'left':\n        // Arrange vertically to the left - increase spacing\n        for (let i = 0; i < newConcepts.length; i++) {\n          const yOffset = (i - 2) * 100; // -200, -100, 0, 100, 200\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x - 250,\n            y: parentPos.y + yOffset\n          };\n        }\n        break;\n        \n      case 'right':\n        // Arrange vertically to the right - increase spacing\n        for (let i = 0; i < newConcepts.length; i++) {\n          const yOffset = (i - 2) * 100; // -200, -100, 0, 100, 200\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + 250,\n            y: parentPos.y + yOffset\n          };\n        }\n        break;\n        \n      case 'bottom-left':\n        // Arrange horizontally below and to the left\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x - 100 + xOffset,\n            y: parentPos.y + 150\n          };\n        }\n        break;\n        \n      case 'bottom-right':\n        // Arrange horizontally below and to the right\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + 100 + xOffset,\n            y: parentPos.y + 150\n          };\n        }\n        break;\n    }\n    \n    setPositions(newPositions);\n  };\n\n  // Toggle node active state\n  const toggleNodeActive = (index) => {\n    // Count how many inactive nodes we currently have\n    const inactiveCount = activeNodes.filter(active => !active).length;\n    \n    // If this node is already inactive, we can always make it active again\n    if (!activeNodes[index]) {\n      setActiveNodes(prev => {\n        const newActive = [...prev];\n        newActive[index] = true;\n        return newActive;\n      });\n      // If we're activating a node, clear expansion\n      if (expandedNodeIndex !== null) {\n        setExpandedNodeIndex(null);\n        setExpandedConcepts([]);\n      }\n      return;\n    }\n    \n    // If this would be the 5th inactive node (all inactive), don't allow it\n    if (inactiveCount === 4) {\n      // Find the only remaining active node (which must be this one)\n      const activeNodeIndices = activeNodes.map((active, i) => active ? i : -1).filter(i => i >= 0);\n      if (activeNodeIndices.length === 1 && activeNodeIndices[0] === index) {\n        console.log(\"Can't deactivate the last node\");\n        return;\n      }\n    }\n    \n    // Make this node inactive\n    setActiveNodes(prev => {\n      const newActive = [...prev];\n      newActive[index] = false;\n      return newActive;\n    });\n    \n    // Check if we now have 4 inactive nodes (1 active)\n    const newInactiveCount = inactiveCount + 1;\n    if (newInactiveCount === 4) {\n      // Find the one remaining active node\n      const remainingActiveIndex = activeNodes.findIndex((active, i) => active && i !== index);\n      if (remainingActiveIndex !== -1) {\n        // Expand the remaining active node\n        expandNode(remainingActiveIndex);\n      }\n    }\n  };\n  \n  const handleMouseDown = useCallback((e, id) => {\n    e.stopPropagation();\n    \n    // Calculate offset from mouse position to concept center\n    const rect = conceptRefs.current[id].getBoundingClientRect();\n    const offsetX = e.clientX - rect.left - rect.width / 2;\n    const offsetY = e.clientY - rect.top - rect.height / 2;\n    \n    setDragOffset({ x: offsetX, y: offsetY });\n    setDragging(id);\n  }, []);\n\n  const handleMouseMove = useCallback((e) => {\n    if (dragging) {\n      e.preventDefault();\n      \n      // Update position based on mouse movement, accounting for offset\n      setPositions(prev => ({\n        ...prev,\n        [dragging]: {\n          x: e.clientX - dragOffset.x,\n          y: e.clientY - dragOffset.y\n        }\n      }));\n    }\n  }, [dragging, dragOffset]);\n\n  const handleMouseUp = useCallback(() => {\n    setDragging(null);\n  }, []);\n\n  // Add and remove event listeners for dragging\n  useEffect(() => {\n    if (dragging) {\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    }\n    \n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [dragging, handleMouseMove, handleMouseUp]);\n\n  const renderConnections = () => {\n    if (!centralQuestionRef.current || !svgRef.current) return null;\n    \n    // Get SVG's bounding rect to calculate coordinates relative to it\n    const svgRect = svgRef.current.getBoundingClientRect();\n    \n    // Get the central question's bounding rect\n    const centralRect = centralQuestionRef.current.getBoundingClientRect();\n    // Calculate center points relative to the SVG\n    const centralX = centralRect.left + centralRect.width / 2 - svgRect.left;\n    const centralY = centralRect.top + centralRect.height / 2 - svgRect.top;\n    \n    return concepts.map((concept, index) => {\n      const conceptId = `concept-${index}`;\n      const pos = positions[conceptId];\n      if (!pos || !conceptRefs.current[conceptId]) return null;\n      \n      // Get concept's bounding rect\n      const conceptRect = conceptRefs.current[conceptId].getBoundingClientRect();\n      // Calculate center point relative to the SVG\n      const conceptX = conceptRect.left + conceptRect.width / 2 - svgRect.left;\n      const conceptY = conceptRect.top + conceptRect.height / 2 - svgRect.top;\n      \n      return (\n        <line\n          key={conceptId}\n          x1={centralX}\n          y1={centralY}\n          x2={conceptX}\n          y2={conceptY}\n          className=\"connection\"\n        />\n      );\n    });\n  };\n\n  // Use ResizeObserver to update connections when elements resize\n  useEffect(() => {\n    if (!svgRef.current) return;\n    \n    const updateConnections = () => {\n      // Force a re-render to update connections\n      setPositions({...positions});\n    };\n    \n    // Create a resize observer to detect size changes\n    const resizeObserver = new ResizeObserver(updateConnections);\n    \n    // Observe the SVG container\n    resizeObserver.observe(svgRef.current);\n    \n    // Observe central question\n    if (centralQuestionRef.current) {\n      resizeObserver.observe(centralQuestionRef.current);\n    }\n    \n    // Observe window size changes\n    window.addEventListener('resize', updateConnections);\n    \n    return () => {\n      resizeObserver.disconnect();\n      window.removeEventListener('resize', updateConnections);\n    };\n  }, [positions]);\n\n  // Console log for debugging\n  console.log(\"Active nodes:\", activeNodes);\n  console.log(\"Expanded node index:\", expandedNodeIndex);\n  console.log(\"Expanded concepts:\", expandedConcepts);\n  console.log(\"Positions:\", positions);\n\n  return (\n    <div className=\"mind-map-container\">\n      <div className=\"mind-map\" ref={mindMapRef}>\n        <svg className=\"connections\" ref={svgRef}>\n          {renderConnections()}\n        </svg>\n        \n        <div \n          className=\"central-question\"\n          ref={centralQuestionRef}\n        >\n          {centralQuestion}\n        </div>\n        \n        {concepts.map((concept, index) => {\n          const conceptId = `concept-${index}`;\n          const pos = positions[conceptId] || { x: 0, y: 0 };\n          const isDragging = dragging === conceptId;\n          \n          return (\n            <div\n              key={conceptId}\n              className={`concept ${!activeNodes[index] ? 'inactive' : ''} ${isDragging ? 'dragging' : ''} ${index === expandedNodeIndex ? 'expanded' : ''}`}\n              style={{\n                left: `${pos.x}px`,\n                top: `${pos.y}px`,\n                cursor: isDragging ? 'grabbing' : 'grab'\n              }}\n              ref={el => conceptRefs.current[conceptId] = el}\n              onMouseDown={(e) => handleMouseDown(e, conceptId)}\n              onClick={(e) => {\n                e.stopPropagation();\n                if (!dragging) {\n                  toggleNodeActive(index);\n                }\n              }}\n            >\n              {concept}\n            </div>\n          );\n        })}\n        \n        {/* Expanded Concept Nodes */}\n        {expandedNodeIndex !== null && expandedConcepts.map((concept, index) => {\n          const pos = positions[`expanded-${expandedNodeIndex}-${index}`];\n          if (!pos) return null;\n          \n          return (\n            <div\n              key={`expanded-${expandedNodeIndex}-${index}`}\n              className=\"concept expanded-child\"\n              data-expanded-index={`${expandedNodeIndex}-${index}`}\n              style={{\n                left: `${pos.x}px`,\n                top: `${pos.y}px`,\n                border: '2px solid #000'\n              }}\n            >\n              <div className=\"concept-title\">{concept.title}</div>\n              {concept.description && (\n                <div className=\"concept-description\">{concept.description}</div>\n              )}\n              <div className=\"concept-icon\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\n                  <path fill=\"none\" d=\"M0 0h24v24H0z\"/>\n                  <path d=\"M9.973 18h4.054c.132-1.202.745-2.194 1.74-3.277.113-.122.832-.867.917-.973a6 6 0 1 0-9.37-.002c.086.107.807.853.918.974.996 1.084 1.609 2.076 1.741 3.278zM14 20h-4v1h4v-1zm-8.246-5a8 8 0 1 1 12.49.002C17.624 15.774 16 17 16 18.5V21a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2v-2.5C8 17 6.375 15.774 5.754 15z\" fill=\"rgba(0,0,0,0.6)\"/>\n                </svg>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default MindMap; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}