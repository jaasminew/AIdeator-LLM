{"ast":null,"code":"var _jsxFileName = \"/Users/kei/AIdeator-LLM/frontend/src/components/MindMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './MindMap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MindMap = ({\n  centralQuestion,\n  concepts\n}) => {\n  _s();\n  const [positions, setPositions] = useState({});\n  const [draggedConcept, setDraggedConcept] = useState(null);\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [activeNodes, setActiveNodes] = useState(concepts.map((_, i) => true));\n  const [nodeRefs, setNodeRefs] = useState({});\n  const [connectionPoints, setConnectionPoints] = useState([]);\n  const mapRef = useRef(null);\n  const centralRef = useRef(null);\n\n  // Create refs for each concept node\n  useEffect(() => {\n    const refs = {};\n    concepts.forEach((_, index) => {\n      refs[`concept-${index}`] = /*#__PURE__*/React.createRef();\n    });\n    setNodeRefs(refs);\n  }, [concepts]);\n\n  // Initialize positions in a circular pattern around the center\n  useEffect(() => {\n    if (Object.keys(positions).length === 0) {\n      const initialPositions = {};\n\n      // Position concepts evenly in a circle around the central question\n      concepts.forEach((_, index) => {\n        const angle = 2 * Math.PI * index / concepts.length;\n        initialPositions[`concept-${index}`] = {\n          x: Math.cos(angle) * 300,\n          y: Math.sin(angle) * 200\n        };\n      });\n      setPositions(initialPositions);\n    }\n  }, [concepts, positions]);\n\n  // Update connection points when positions change or after initial render\n  useEffect(() => {\n    // Only calculate if all refs are available\n    if (!centralRef.current || !mapRef.current) return;\n    const points = concepts.map((_, index) => {\n      var _nodeRefs;\n      if (!((_nodeRefs = nodeRefs[`concept-${index}`]) !== null && _nodeRefs !== void 0 && _nodeRefs.current)) return null;\n      const centralRect = centralRef.current.getBoundingClientRect();\n      const nodeRect = nodeRefs[`concept-${index}`].current.getBoundingClientRect();\n      const mapRect = mapRef.current.getBoundingClientRect();\n\n      // Get center points\n      const centralX = centralRect.width / 2;\n      const centralY = centralRect.height / 2;\n      const nodeX = nodeRect.left - mapRect.left + nodeRect.width / 2;\n      const nodeY = nodeRect.top - mapRect.top + nodeRect.height / 2;\n\n      // Calculate angle between centers\n      const dx = nodeX - centralRect.left + mapRect.left - centralRect.width / 2;\n      const dy = nodeY - centralRect.top + mapRect.top - centralRect.height / 2;\n      const angle = Math.atan2(dy, dx);\n\n      // Calculate intersection with central question box\n      const centralEndX = centralX + Math.cos(angle) * centralRect.width / 2;\n      const centralEndY = centralY + Math.sin(angle) * centralRect.height / 2;\n\n      // Calculate intersection with concept box\n      const conceptAngle = Math.atan2(-dy, -dx);\n      const conceptEndX = nodeX + Math.cos(conceptAngle) * nodeRect.width / 2;\n      const conceptEndY = nodeY + Math.sin(conceptAngle) * nodeRect.height / 2;\n      return {\n        x1: centralEndX,\n        y1: centralEndY,\n        x2: conceptEndX,\n        y2: conceptEndY\n      };\n    });\n    setConnectionPoints(points);\n  }, [positions, nodeRefs, concepts]);\n\n  // Handle starting to drag a concept\n  const handleMouseDown = (e, conceptId) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const rect = e.currentTarget.getBoundingClientRect();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    setDraggedConcept(conceptId);\n    setDragOffset({\n      x: e.clientX - (rect.left - mapRect.left),\n      y: e.clientY - (rect.top - mapRect.top)\n    });\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle dragging a concept\n  const handleMouseMove = e => {\n    if (!draggedConcept) return;\n    e.preventDefault();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    const newX = e.clientX - mapRect.left - dragOffset.x;\n    const newY = e.clientY - mapRect.top - dragOffset.y;\n    setPositions(prev => ({\n      ...prev,\n      [draggedConcept]: {\n        x: newX,\n        y: newY\n      }\n    }));\n  };\n\n  // Handle dropping a concept\n  const handleMouseUp = () => {\n    setDraggedConcept(null);\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Toggle active/inactive state of a concept when clicked\n  const handleConceptClick = index => {\n    if (draggedConcept) return; // Don't toggle if we're dragging\n\n    setActiveNodes(prev => {\n      const newActiveNodes = [...prev];\n      newActiveNodes[index] = !newActiveNodes[index];\n      return newActiveNodes;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mind-map-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mind-map\",\n      ref: mapRef,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"central-question\",\n        ref: centralRef,\n        children: centralQuestion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n        className: \"connections\",\n        children: concepts.map((_, index) => {\n          const pos = positions[`concept-${index}`];\n          if (!pos) return null;\n          const connectionPoint = connectionPoints[index];\n\n          // If connection points calculated, use them, otherwise use simple lines\n          return connectionPoint ? /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: connectionPoint.x1,\n            y1: connectionPoint.y1,\n            x2: connectionPoint.x2,\n            y2: connectionPoint.y2,\n            className: !activeNodes[index] ? 'connection inactive' : 'connection'\n          }, `line-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"50%\",\n            y1: \"50%\",\n            x2: `calc(50% + ${pos.x}px)`,\n            y2: `calc(50% + ${pos.y}px)`,\n            className: !activeNodes[index] ? 'connection inactive' : 'connection'\n          }, `line-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), concepts.map((concept, index) => {\n        const pos = positions[`concept-${index}`] || {\n          x: 0,\n          y: 0\n        };\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `concept ${!activeNodes[index] ? 'inactive' : ''} ${draggedConcept === `concept-${index}` ? 'dragging' : ''}`,\n          style: {\n            transform: `translate(calc(50% + ${pos.x}px), calc(50% + ${pos.y}px))`,\n            cursor: draggedConcept === `concept-${index}` ? 'grabbing' : 'grab'\n          },\n          ref: nodeRefs[`concept-${index}`],\n          onMouseDown: e => handleMouseDown(e, `concept-${index}`),\n          onClick: () => handleConceptClick(index),\n          children: concept\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n_s(MindMap, \"jZ1PV1Umon/hqAYHJtgleeb7qK0=\");\n_c = MindMap;\nexport default MindMap;\nvar _c;\n$RefreshReg$(_c, \"MindMap\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","MindMap","centralQuestion","concepts","_s","positions","setPositions","draggedConcept","setDraggedConcept","dragOffset","setDragOffset","x","y","activeNodes","setActiveNodes","map","_","i","nodeRefs","setNodeRefs","connectionPoints","setConnectionPoints","mapRef","centralRef","refs","forEach","index","createRef","Object","keys","length","initialPositions","angle","Math","PI","cos","sin","current","points","_nodeRefs","centralRect","getBoundingClientRect","nodeRect","mapRect","centralX","width","centralY","height","nodeX","left","nodeY","top","dx","dy","atan2","centralEndX","centralEndY","conceptAngle","conceptEndX","conceptEndY","x1","y1","x2","y2","handleMouseDown","e","conceptId","preventDefault","stopPropagation","rect","currentTarget","clientX","clientY","document","addEventListener","handleMouseMove","handleMouseUp","newX","newY","prev","removeEventListener","handleConceptClick","newActiveNodes","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","pos","connectionPoint","concept","style","transform","cursor","onMouseDown","onClick","_c","$RefreshReg$"],"sources":["/Users/kei/AIdeator-LLM/frontend/src/components/MindMap.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport './MindMap.css';\n\nconst MindMap = ({ centralQuestion, concepts }) => {\n  const [positions, setPositions] = useState({});\n  const [draggedConcept, setDraggedConcept] = useState(null);\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n  const [activeNodes, setActiveNodes] = useState(concepts.map((_, i) => true));\n  const [nodeRefs, setNodeRefs] = useState({});\n  const [connectionPoints, setConnectionPoints] = useState([]);\n  const mapRef = useRef(null);\n  const centralRef = useRef(null);\n\n  // Create refs for each concept node\n  useEffect(() => {\n    const refs = {};\n    concepts.forEach((_, index) => {\n      refs[`concept-${index}`] = React.createRef();\n    });\n    setNodeRefs(refs);\n  }, [concepts]);\n\n  // Initialize positions in a circular pattern around the center\n  useEffect(() => {\n    if (Object.keys(positions).length === 0) {\n      const initialPositions = {};\n      \n      // Position concepts evenly in a circle around the central question\n      concepts.forEach((_, index) => {\n        const angle = (2 * Math.PI * index) / concepts.length;\n        initialPositions[`concept-${index}`] = {\n          x: Math.cos(angle) * 300,\n          y: Math.sin(angle) * 200\n        };\n      });\n      \n      setPositions(initialPositions);\n    }\n  }, [concepts, positions]);\n\n  // Update connection points when positions change or after initial render\n  useEffect(() => {\n    // Only calculate if all refs are available\n    if (!centralRef.current || !mapRef.current) return;\n    \n    const points = concepts.map((_, index) => {\n      if (!nodeRefs[`concept-${index}`]?.current) return null;\n      \n      const centralRect = centralRef.current.getBoundingClientRect();\n      const nodeRect = nodeRefs[`concept-${index}`].current.getBoundingClientRect();\n      const mapRect = mapRef.current.getBoundingClientRect();\n      \n      // Get center points\n      const centralX = centralRect.width / 2;\n      const centralY = centralRect.height / 2;\n      \n      const nodeX = nodeRect.left - mapRect.left + nodeRect.width / 2;\n      const nodeY = nodeRect.top - mapRect.top + nodeRect.height / 2;\n      \n      // Calculate angle between centers\n      const dx = nodeX - centralRect.left + mapRect.left - centralRect.width / 2;\n      const dy = nodeY - centralRect.top + mapRect.top - centralRect.height / 2;\n      const angle = Math.atan2(dy, dx);\n      \n      // Calculate intersection with central question box\n      const centralEndX = centralX + Math.cos(angle) * centralRect.width / 2;\n      const centralEndY = centralY + Math.sin(angle) * centralRect.height / 2;\n      \n      // Calculate intersection with concept box\n      const conceptAngle = Math.atan2(-dy, -dx);\n      const conceptEndX = nodeX + Math.cos(conceptAngle) * nodeRect.width / 2;\n      const conceptEndY = nodeY + Math.sin(conceptAngle) * nodeRect.height / 2;\n      \n      return {\n        x1: centralEndX,\n        y1: centralEndY,\n        x2: conceptEndX,\n        y2: conceptEndY\n      };\n    });\n    \n    setConnectionPoints(points);\n  }, [positions, nodeRefs, concepts]);\n\n  // Handle starting to drag a concept\n  const handleMouseDown = (e, conceptId) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    const rect = e.currentTarget.getBoundingClientRect();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    \n    setDraggedConcept(conceptId);\n    setDragOffset({\n      x: e.clientX - (rect.left - mapRect.left),\n      y: e.clientY - (rect.top - mapRect.top)\n    });\n    \n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle dragging a concept\n  const handleMouseMove = (e) => {\n    if (!draggedConcept) return;\n    \n    e.preventDefault();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    const newX = e.clientX - mapRect.left - dragOffset.x;\n    const newY = e.clientY - mapRect.top - dragOffset.y;\n\n    setPositions(prev => ({\n      ...prev,\n      [draggedConcept]: { x: newX, y: newY }\n    }));\n  };\n\n  // Handle dropping a concept\n  const handleMouseUp = () => {\n    setDraggedConcept(null);\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Toggle active/inactive state of a concept when clicked\n  const handleConceptClick = (index) => {\n    if (draggedConcept) return; // Don't toggle if we're dragging\n    \n    setActiveNodes(prev => {\n      const newActiveNodes = [...prev];\n      newActiveNodes[index] = !newActiveNodes[index];\n      return newActiveNodes;\n    });\n  };\n\n  return (\n    <div className=\"mind-map-container\">\n      <div \n        className=\"mind-map\" \n        ref={mapRef}\n      >\n        <div className=\"central-question\" ref={centralRef}>\n          {centralQuestion}\n        </div>\n        \n        <svg className=\"connections\">\n          {concepts.map((_, index) => {\n            const pos = positions[`concept-${index}`];\n            if (!pos) return null;\n            \n            const connectionPoint = connectionPoints[index];\n            \n            // If connection points calculated, use them, otherwise use simple lines\n            return connectionPoint ? (\n              <line\n                key={`line-${index}`}\n                x1={connectionPoint.x1}\n                y1={connectionPoint.y1}\n                x2={connectionPoint.x2}\n                y2={connectionPoint.y2}\n                className={!activeNodes[index] ? 'connection inactive' : 'connection'}\n              />\n            ) : (\n              <line\n                key={`line-${index}`}\n                x1=\"50%\"\n                y1=\"50%\"\n                x2={`calc(50% + ${pos.x}px)`}\n                y2={`calc(50% + ${pos.y}px)`}\n                className={!activeNodes[index] ? 'connection inactive' : 'connection'}\n              />\n            );\n          })}\n        </svg>\n        \n        {concepts.map((concept, index) => {\n          const pos = positions[`concept-${index}`] || { x: 0, y: 0 };\n          return (\n            <div\n              key={index}\n              className={`concept ${!activeNodes[index] ? 'inactive' : ''} ${draggedConcept === `concept-${index}` ? 'dragging' : ''}`}\n              style={{\n                transform: `translate(calc(50% + ${pos.x}px), calc(50% + ${pos.y}px))`,\n                cursor: draggedConcept === `concept-${index}` ? 'grabbing' : 'grab'\n              }}\n              ref={nodeRefs[`concept-${index}`]}\n              onMouseDown={(e) => handleMouseDown(e, `concept-${index}`)}\n              onClick={() => handleConceptClick(index)}\n            >\n              {concept}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default MindMap; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}