{"ast":null,"code":"var _jsxFileName = \"/Users/kei/AIdeator-LLM/frontend/src/components/MindMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './MindMap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MindMap = ({\n  centralQuestion,\n  concepts\n}) => {\n  _s();\n  const [positions, setPositions] = useState({});\n  const [draggedConcept, setDraggedConcept] = useState(null);\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [activeNodes, setActiveNodes] = useState(concepts.map((_, i) => true));\n  const mapRef = useRef(null);\n  const centralRef = useRef(null);\n\n  // Initialize positions in a circular pattern around the center\n  useEffect(() => {\n    if (Object.keys(positions).length === 0) {\n      const initialPositions = {};\n\n      // Position concepts evenly in a circle around the central question\n      concepts.forEach((_, index) => {\n        const angle = 2 * Math.PI * index / concepts.length;\n        initialPositions[`concept-${index}`] = {\n          x: Math.cos(angle) * 300,\n          y: Math.sin(angle) * 200\n        };\n      });\n      setPositions(initialPositions);\n    }\n  }, [concepts, positions]);\n\n  // Handle starting to drag a concept\n  const handleMouseDown = (e, conceptId) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const rect = e.currentTarget.getBoundingClientRect();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    setDraggedConcept(conceptId);\n    setDragOffset({\n      x: e.clientX - (rect.left - mapRect.left),\n      y: e.clientY - (rect.top - mapRect.top)\n    });\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle dragging a concept\n  const handleMouseMove = e => {\n    if (!draggedConcept) return;\n    e.preventDefault();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    const newX = e.clientX - mapRect.left - dragOffset.x;\n    const newY = e.clientY - mapRect.top - dragOffset.y;\n    setPositions(prev => ({\n      ...prev,\n      [draggedConcept]: {\n        x: newX,\n        y: newY\n      }\n    }));\n  };\n\n  // Handle dropping a concept\n  const handleMouseUp = () => {\n    setDraggedConcept(null);\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Toggle active/inactive state of a concept when clicked\n  const handleConceptClick = index => {\n    if (draggedConcept) return; // Don't toggle if we're dragging\n\n    setActiveNodes(prev => {\n      const newActiveNodes = [...prev];\n      newActiveNodes[index] = !newActiveNodes[index];\n      return newActiveNodes;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mind-map-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mind-map\",\n      ref: mapRef,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"central-question\",\n        ref: centralRef,\n        children: centralQuestion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n        className: \"connections\",\n        children: concepts.map((_, index) => {\n          const pos = positions[`concept-${index}`];\n          if (!pos) return null;\n          return /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"50%\",\n            y1: \"50%\",\n            x2: `calc(50% + ${pos.x}px)`,\n            y2: `calc(50% + ${pos.y}px)`,\n            className: !activeNodes[index] ? 'connection inactive' : 'connection'\n          }, `line-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), concepts.map((concept, index) => {\n        const pos = positions[`concept-${index}`] || {\n          x: 0,\n          y: 0\n        };\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `concept ${!activeNodes[index] ? 'inactive' : ''} ${draggedConcept === `concept-${index}` ? 'dragging' : ''}`,\n          style: {\n            transform: `translate(calc(50% + ${pos.x}px), calc(50% + ${pos.y}px))`,\n            cursor: draggedConcept === `concept-${index}` ? 'grabbing' : 'grab'\n          },\n          onMouseDown: e => handleMouseDown(e, `concept-${index}`),\n          onClick: () => handleConceptClick(index),\n          children: concept\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(MindMap, \"Lbji3cum4f92EWFLegUGcFSXLyI=\");\n_c = MindMap;\nexport default MindMap;\nvar _c;\n$RefreshReg$(_c, \"MindMap\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","MindMap","centralQuestion","concepts","_s","positions","setPositions","draggedConcept","setDraggedConcept","dragOffset","setDragOffset","x","y","activeNodes","setActiveNodes","map","_","i","mapRef","centralRef","Object","keys","length","initialPositions","forEach","index","angle","Math","PI","cos","sin","handleMouseDown","e","conceptId","preventDefault","stopPropagation","rect","currentTarget","getBoundingClientRect","mapRect","current","clientX","left","clientY","top","document","addEventListener","handleMouseMove","handleMouseUp","newX","newY","prev","removeEventListener","handleConceptClick","newActiveNodes","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","pos","x1","y1","x2","y2","concept","style","transform","cursor","onMouseDown","onClick","_c","$RefreshReg$"],"sources":["/Users/kei/AIdeator-LLM/frontend/src/components/MindMap.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport './MindMap.css';\n\nconst MindMap = ({ centralQuestion, concepts }) => {\n  const [positions, setPositions] = useState({});\n  const [draggedConcept, setDraggedConcept] = useState(null);\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n  const [activeNodes, setActiveNodes] = useState(concepts.map((_, i) => true));\n  const mapRef = useRef(null);\n  const centralRef = useRef(null);\n\n  // Initialize positions in a circular pattern around the center\n  useEffect(() => {\n    if (Object.keys(positions).length === 0) {\n      const initialPositions = {};\n      \n      // Position concepts evenly in a circle around the central question\n      concepts.forEach((_, index) => {\n        const angle = (2 * Math.PI * index) / concepts.length;\n        initialPositions[`concept-${index}`] = {\n          x: Math.cos(angle) * 300,\n          y: Math.sin(angle) * 200\n        };\n      });\n      \n      setPositions(initialPositions);\n    }\n  }, [concepts, positions]);\n\n  // Handle starting to drag a concept\n  const handleMouseDown = (e, conceptId) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    const rect = e.currentTarget.getBoundingClientRect();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    \n    setDraggedConcept(conceptId);\n    setDragOffset({\n      x: e.clientX - (rect.left - mapRect.left),\n      y: e.clientY - (rect.top - mapRect.top)\n    });\n    \n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle dragging a concept\n  const handleMouseMove = (e) => {\n    if (!draggedConcept) return;\n    \n    e.preventDefault();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    const newX = e.clientX - mapRect.left - dragOffset.x;\n    const newY = e.clientY - mapRect.top - dragOffset.y;\n\n    setPositions(prev => ({\n      ...prev,\n      [draggedConcept]: { x: newX, y: newY }\n    }));\n  };\n\n  // Handle dropping a concept\n  const handleMouseUp = () => {\n    setDraggedConcept(null);\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Toggle active/inactive state of a concept when clicked\n  const handleConceptClick = (index) => {\n    if (draggedConcept) return; // Don't toggle if we're dragging\n    \n    setActiveNodes(prev => {\n      const newActiveNodes = [...prev];\n      newActiveNodes[index] = !newActiveNodes[index];\n      return newActiveNodes;\n    });\n  };\n\n  return (\n    <div className=\"mind-map-container\">\n      <div \n        className=\"mind-map\" \n        ref={mapRef}\n      >\n        <div className=\"central-question\" ref={centralRef}>\n          {centralQuestion}\n        </div>\n        \n        <svg className=\"connections\">\n          {concepts.map((_, index) => {\n            const pos = positions[`concept-${index}`];\n            if (!pos) return null;\n            \n            return (\n              <line\n                key={`line-${index}`}\n                x1=\"50%\"\n                y1=\"50%\"\n                x2={`calc(50% + ${pos.x}px)`}\n                y2={`calc(50% + ${pos.y}px)`}\n                className={!activeNodes[index] ? 'connection inactive' : 'connection'}\n              />\n            );\n          })}\n        </svg>\n        \n        {concepts.map((concept, index) => {\n          const pos = positions[`concept-${index}`] || { x: 0, y: 0 };\n          return (\n            <div\n              key={index}\n              className={`concept ${!activeNodes[index] ? 'inactive' : ''} ${draggedConcept === `concept-${index}` ? 'dragging' : ''}`}\n              style={{\n                transform: `translate(calc(50% + ${pos.x}px), calc(50% + ${pos.y}px))`,\n                cursor: draggedConcept === `concept-${index}` ? 'grabbing' : 'grab'\n              }}\n              onMouseDown={(e) => handleMouseDown(e, `concept-${index}`)}\n              onClick={() => handleConceptClick(index)}\n            >\n              {concept}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default MindMap; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}