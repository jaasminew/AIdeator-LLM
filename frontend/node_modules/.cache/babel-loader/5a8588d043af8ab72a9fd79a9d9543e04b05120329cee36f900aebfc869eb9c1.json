{"ast":null,"code":"var _jsxFileName = \"/Users/kei/AIdeator-LLM/frontend/src/components/MindMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './MindMap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MindMap = ({\n  centralQuestion,\n  concepts\n}) => {\n  _s();\n  const [positions, setPositions] = useState({});\n  const [draggedConcept, setDraggedConcept] = useState(null);\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [activeNodes, setActiveNodes] = useState(concepts.map(() => true));\n  const [expandedNodeIndex, setExpandedNodeIndex] = useState(null);\n  const [expandedConcepts, setExpandedConcepts] = useState([]);\n  const mapRef = useRef(null);\n  const conceptRefs = useRef([]);\n  const centralRef = useRef(null);\n\n  // Initialize refs for concept nodes\n  useEffect(() => {\n    conceptRefs.current = Array(concepts.length).fill().map(() => /*#__PURE__*/React.createRef());\n  }, [concepts.length]);\n\n  // Initialize positions in a balanced layout\n  useEffect(() => {\n    if (Object.keys(positions).length === 0) {\n      // Positions that match the reference image exactly\n      const initialPositions = {\n        'concept-0': {\n          x: 0,\n          y: -180\n        },\n        // Top\n        'concept-1': {\n          x: -280,\n          y: 0\n        },\n        // Left\n        'concept-2': {\n          x: 280,\n          y: 0\n        },\n        // Right\n        'concept-3': {\n          x: -180,\n          y: 200\n        },\n        // Bottom Left\n        'concept-4': {\n          x: 180,\n          y: 200\n        } // Bottom Right\n      };\n      setPositions(initialPositions);\n    }\n  }, [positions]);\n\n  // Expand a node with 5 new child nodes\n  const expandNode = index => {\n    console.log(\"Expanding node\", index);\n    setExpandedNodeIndex(index);\n\n    // Create 5 new concept nodes with titles and descriptions\n    const newConcepts = [{\n      title: \"Fear of letting others down\",\n      description: \"Social and professional pressures can make people fear judgment from peers.\"\n    }, {\n      title: \"Concept B\",\n      description: \"A detailed description of concept B and its implications.\"\n    }, {\n      title: \"Concept C\",\n      description: \"A detailed description of concept C and its implications.\"\n    }, {\n      title: \"Concept D\",\n      description: \"A detailed description of concept D and its implications.\"\n    }, {\n      title: \"Concept E\",\n      description: \"A detailed description of concept E and its implications.\"\n    }];\n    setExpandedConcepts(newConcepts);\n\n    // Create positions for the new nodes following the parent's side\n    const parentPos = positions[`concept-${index}`];\n    const newPositions = {\n      ...positions\n    };\n\n    // Determine which side the parent node is on relative to the center\n    // This uses the standard layout: top, left, right, bottom-left, bottom-right\n    let direction;\n    if (index === 0) {\n      // Top node - place children above it\n      direction = 'top';\n    } else if (index === 1) {\n      // Left node - place children to the left\n      direction = 'left';\n    } else if (index === 2) {\n      // Right node - place children to the right\n      direction = 'right';\n    } else if (index === 3) {\n      // Bottom Left node - place children below and to the left\n      direction = 'bottom-left';\n    } else if (index === 4) {\n      // Bottom Right node - place children below and to the right\n      direction = 'bottom-right';\n    }\n    console.log(\"Direction for expanded nodes:\", direction);\n\n    // Position nodes based on the parent's position/direction\n    switch (direction) {\n      case 'top':\n        // Arrange horizontally above the parent\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + xOffset,\n            y: parentPos.y - 150\n          };\n        }\n        break;\n      case 'left':\n        // Arrange vertically to the left - increase spacing\n        for (let i = 0; i < newConcepts.length; i++) {\n          const yOffset = (i - 2) * 100; // -200, -100, 0, 100, 200\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x - 250,\n            y: parentPos.y + yOffset\n          };\n        }\n        break;\n      case 'right':\n        // Arrange vertically to the right - increase spacing\n        for (let i = 0; i < newConcepts.length; i++) {\n          const yOffset = (i - 2) * 100; // -200, -100, 0, 100, 200\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + 250,\n            y: parentPos.y + yOffset\n          };\n        }\n        break;\n      case 'bottom-left':\n        // Arrange horizontally below and to the left\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x - 100 + xOffset,\n            y: parentPos.y + 150\n          };\n        }\n        break;\n      case 'bottom-right':\n        // Arrange horizontally below and to the right\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + 100 + xOffset,\n            y: parentPos.y + 150\n          };\n        }\n        break;\n    }\n    setPositions(newPositions);\n  };\n\n  // Toggle node active state\n  const toggleNodeActive = index => {\n    // Count how many inactive nodes we currently have\n    const inactiveCount = activeNodes.filter(active => !active).length;\n\n    // If this node is already inactive, we can always make it active again\n    if (!activeNodes[index]) {\n      setActiveNodes(prev => {\n        const newActive = [...prev];\n        newActive[index] = true;\n        return newActive;\n      });\n      // If we're activating a node, clear expansion\n      if (expandedNodeIndex !== null) {\n        setExpandedNodeIndex(null);\n        setExpandedConcepts([]);\n      }\n      return;\n    }\n\n    // If this would be the 5th inactive node (all inactive), don't allow it\n    if (inactiveCount === 4) {\n      // Find the only remaining active node (which must be this one)\n      const activeNodeIndices = activeNodes.map((active, i) => active ? i : -1).filter(i => i >= 0);\n      if (activeNodeIndices.length === 1 && activeNodeIndices[0] === index) {\n        console.log(\"Can't deactivate the last node\");\n        return;\n      }\n    }\n\n    // Make this node inactive\n    setActiveNodes(prev => {\n      const newActive = [...prev];\n      newActive[index] = false;\n      return newActive;\n    });\n\n    // Check if we now have 4 inactive nodes (1 active)\n    const newInactiveCount = inactiveCount + 1;\n    if (newInactiveCount === 4) {\n      // Find the one remaining active node\n      const remainingActiveIndex = activeNodes.findIndex((active, i) => active && i !== index);\n      if (remainingActiveIndex !== -1) {\n        // Expand the remaining active node\n        expandNode(remainingActiveIndex);\n      }\n    }\n  };\n\n  // Handle starting to drag a concept\n  const handleMouseDown = (e, conceptId) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const rect = e.currentTarget.getBoundingClientRect();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    setDraggedConcept(conceptId);\n    setDragOffset({\n      x: e.clientX - (rect.left - mapRect.left),\n      y: e.clientY - (rect.top - mapRect.top)\n    });\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle dragging a concept\n  const handleMouseMove = e => {\n    if (!draggedConcept) return;\n    e.preventDefault();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    const newX = e.clientX - mapRect.left - dragOffset.x;\n    const newY = e.clientY - mapRect.top - dragOffset.y;\n    setPositions(prev => ({\n      ...prev,\n      [draggedConcept]: {\n        x: newX,\n        y: newY\n      }\n    }));\n  };\n\n  // Handle dropping a concept\n  const handleMouseUp = () => {\n    setDraggedConcept(null);\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Use a simpler approach for connections - plain HTML/CSS\n  const renderConnections = () => {\n    if (!mapRef.current) return null;\n    const lines = [];\n\n    // Calculate center of map\n    const mapWidth = mapRef.current.offsetWidth;\n    const mapHeight = mapRef.current.offsetHeight;\n    const centerX = mapWidth / 2;\n    const centerY = mapHeight / 2;\n\n    // Main concept connections\n    concepts.forEach((_, index) => {\n      const pos = positions[`concept-${index}`] || {\n        x: 0,\n        y: 0\n      };\n      const x1 = centerX;\n      const y1 = centerY;\n      const x2 = centerX + pos.x;\n      const y2 = centerY + pos.y;\n\n      // Calculate angle and length\n      const angle = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;\n      const length = Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\n      lines.push(/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `line-connection ${!activeNodes[index] ? 'inactive' : ''}`,\n        style: {\n          width: `${length}px`,\n          left: `${x1}px`,\n          top: `${y1}px`,\n          transform: `rotate(${angle}deg)`,\n          transformOrigin: '0 0'\n        }\n      }, `line-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this));\n    });\n\n    // Expanded node connections\n    if (expandedNodeIndex !== null) {\n      const parentPos = positions[`concept-${expandedNodeIndex}`] || {\n        x: 0,\n        y: 0\n      };\n      const parentX = centerX + parentPos.x;\n      const parentY = centerY + parentPos.y;\n      expandedConcepts.forEach((_, i) => {\n        const childPos = positions[`expanded-${expandedNodeIndex}-${i}`];\n        if (!childPos) return;\n        const childX = centerX + childPos.x;\n        const childY = centerY + childPos.y;\n\n        // Calculate angle and length for expanded connection\n        const angle = Math.atan2(childY - parentY, childX - parentX) * 180 / Math.PI;\n        const length = Math.sqrt((childX - parentX) ** 2 + (childY - parentY) ** 2);\n        lines.push(/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"line-connection expanded\",\n          style: {\n            width: `${length}px`,\n            left: `${parentX}px`,\n            top: `${parentY}px`,\n            transform: `rotate(${angle}deg)`,\n            transformOrigin: '0 0'\n          }\n        }, `expanded-line-${expandedNodeIndex}-${i}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this));\n      });\n    }\n    return lines;\n  };\n\n  // Use useEffect to ensure connections are updated when node dimensions change\n  useEffect(() => {\n    // Create a resize observer to detect size changes in nodes\n    const resizeObserver = new ResizeObserver(() => {\n      // Force a re-render to update connections\n      setPositions({\n        ...positions\n      });\n    });\n\n    // Observe central node\n    if (centralRef.current) {\n      resizeObserver.observe(centralRef.current);\n    }\n\n    // Observe all concept nodes\n    conceptRefs.current.forEach(ref => {\n      if (ref.current) {\n        resizeObserver.observe(ref.current);\n      }\n    });\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, [conceptRefs.current.length, centralRef.current, expandedNodeIndex]);\n\n  // Console log for debugging\n  console.log(\"Active nodes:\", activeNodes);\n  console.log(\"Expanded node index:\", expandedNodeIndex);\n  console.log(\"Expanded concepts:\", expandedConcepts);\n  console.log(\"Positions:\", positions);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mind-map-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mind-map\",\n      ref: mapRef,\n      children: [renderConnections(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"central-question\",\n        ref: centralRef,\n        children: centralQuestion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this), concepts.map((concept, index) => {\n        const pos = positions[`concept-${index}`] || {\n          x: 0,\n          y: 0\n        };\n        const isDragging = draggedConcept === `concept-${index}`;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `concept ${!activeNodes[index] ? 'inactive' : ''} ${isDragging ? 'dragging' : ''} ${index === expandedNodeIndex ? 'expanded' : ''}`,\n          style: {\n            top: `calc(50% + ${pos.y}px)`,\n            left: `calc(50% + ${pos.x}px)`,\n            cursor: isDragging ? 'grabbing' : 'grab'\n          },\n          ref: conceptRefs.current[index],\n          onMouseDown: e => handleMouseDown(e, `concept-${index}`),\n          onClick: e => {\n            e.stopPropagation();\n            if (!draggedConcept) {\n              toggleNodeActive(index);\n            }\n          },\n          children: concept\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 13\n        }, this);\n      }), expandedNodeIndex !== null && expandedConcepts.map((concept, index) => {\n        const pos = positions[`expanded-${expandedNodeIndex}-${index}`];\n        if (!pos) return null;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"concept expanded-child\",\n          \"data-expanded-index\": `${expandedNodeIndex}-${index}`,\n          style: {\n            top: `calc(50% + ${pos.y}px)`,\n            left: `calc(50% + ${pos.x}px)`,\n            border: '2px solid #000'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"concept-title\",\n            children: concept.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 15\n          }, this), concept.description && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"concept-description\",\n            children: concept.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"concept-icon\",\n            children: /*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              viewBox: \"0 0 24 24\",\n              width: \"24\",\n              height: \"24\",\n              children: [/*#__PURE__*/_jsxDEV(\"path\", {\n                fill: \"none\",\n                d: \"M0 0h24v24H0z\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 412,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                d: \"M9.973 18h4.054c.132-1.202.745-2.194 1.74-3.277.113-.122.832-.867.917-.973a6 6 0 1 0-9.37-.002c.086.107.807.853.918.974.996 1.084 1.609 2.076 1.741 3.278zM14 20h-4v1h4v-1zm-8.246-5a8 8 0 1 1 12.49.002C17.624 15.774 16 17 16 18.5V21a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2v-2.5C8 17 6.375 15.774 5.754 15z\",\n                fill: \"rgba(0,0,0,0.6)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 413,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 411,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 15\n          }, this)]\n        }, `expanded-${expandedNodeIndex}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 352,\n    columnNumber: 5\n  }, this);\n};\n_s(MindMap, \"7LMd7otXTawRJ1C+5ihBsmUns34=\");\n_c = MindMap;\nexport default MindMap;\nvar _c;\n$RefreshReg$(_c, \"MindMap\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","MindMap","centralQuestion","concepts","_s","positions","setPositions","draggedConcept","setDraggedConcept","dragOffset","setDragOffset","x","y","activeNodes","setActiveNodes","map","expandedNodeIndex","setExpandedNodeIndex","expandedConcepts","setExpandedConcepts","mapRef","conceptRefs","centralRef","current","Array","length","fill","createRef","Object","keys","initialPositions","expandNode","index","console","log","newConcepts","title","description","parentPos","newPositions","direction","i","xOffset","yOffset","toggleNodeActive","inactiveCount","filter","active","prev","newActive","activeNodeIndices","newInactiveCount","remainingActiveIndex","findIndex","handleMouseDown","e","conceptId","preventDefault","stopPropagation","rect","currentTarget","getBoundingClientRect","mapRect","clientX","left","clientY","top","document","addEventListener","handleMouseMove","handleMouseUp","newX","newY","removeEventListener","renderConnections","lines","mapWidth","offsetWidth","mapHeight","offsetHeight","centerX","centerY","forEach","_","pos","x1","y1","x2","y2","angle","Math","atan2","PI","sqrt","push","className","style","width","transform","transformOrigin","fileName","_jsxFileName","lineNumber","columnNumber","parentX","parentY","childPos","childX","childY","resizeObserver","ResizeObserver","observe","ref","disconnect","children","concept","isDragging","cursor","onMouseDown","onClick","border","xmlns","viewBox","height","d","_c","$RefreshReg$"],"sources":["/Users/kei/AIdeator-LLM/frontend/src/components/MindMap.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './MindMap.css';\n\nconst MindMap = ({ centralQuestion, concepts }) => {\n  const [positions, setPositions] = useState({});\n  const [draggedConcept, setDraggedConcept] = useState(null);\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n  const [activeNodes, setActiveNodes] = useState(concepts.map(() => true));\n  const [expandedNodeIndex, setExpandedNodeIndex] = useState(null);\n  const [expandedConcepts, setExpandedConcepts] = useState([]);\n  const mapRef = useRef(null);\n  const conceptRefs = useRef([]);\n  const centralRef = useRef(null);\n\n  // Initialize refs for concept nodes\n  useEffect(() => {\n    conceptRefs.current = Array(concepts.length).fill().map(() => React.createRef());\n  }, [concepts.length]);\n\n  // Initialize positions in a balanced layout\n  useEffect(() => {\n    if (Object.keys(positions).length === 0) {\n      // Positions that match the reference image exactly\n      const initialPositions = {\n        'concept-0': { x: 0, y: -180 },      // Top\n        'concept-1': { x: -280, y: 0 },      // Left\n        'concept-2': { x: 280, y: 0 },       // Right\n        'concept-3': { x: -180, y: 200 },    // Bottom Left\n        'concept-4': { x: 180, y: 200 }      // Bottom Right\n      };\n      \n      setPositions(initialPositions);\n    }\n  }, [positions]);\n\n  // Expand a node with 5 new child nodes\n  const expandNode = (index) => {\n    console.log(\"Expanding node\", index);\n    setExpandedNodeIndex(index);\n    \n    // Create 5 new concept nodes with titles and descriptions\n    const newConcepts = [\n      {\n        title: \"Fear of letting others down\",\n        description: \"Social and professional pressures can make people fear judgment from peers.\"\n      },\n      {\n        title: \"Concept B\",\n        description: \"A detailed description of concept B and its implications.\"\n      },\n      {\n        title: \"Concept C\",\n        description: \"A detailed description of concept C and its implications.\"\n      },\n      {\n        title: \"Concept D\",\n        description: \"A detailed description of concept D and its implications.\"\n      },\n      {\n        title: \"Concept E\",\n        description: \"A detailed description of concept E and its implications.\"\n      }\n    ];\n    \n    setExpandedConcepts(newConcepts);\n    \n    // Create positions for the new nodes following the parent's side\n    const parentPos = positions[`concept-${index}`];\n    const newPositions = { ...positions };\n    \n    // Determine which side the parent node is on relative to the center\n    // This uses the standard layout: top, left, right, bottom-left, bottom-right\n    let direction;\n    \n    if (index === 0) {\n      // Top node - place children above it\n      direction = 'top';\n    } else if (index === 1) {\n      // Left node - place children to the left\n      direction = 'left';\n    } else if (index === 2) {\n      // Right node - place children to the right\n      direction = 'right';\n    } else if (index === 3) {\n      // Bottom Left node - place children below and to the left\n      direction = 'bottom-left';\n    } else if (index === 4) {\n      // Bottom Right node - place children below and to the right\n      direction = 'bottom-right';\n    }\n    \n    console.log(\"Direction for expanded nodes:\", direction);\n    \n    // Position nodes based on the parent's position/direction\n    switch (direction) {\n      case 'top':\n        // Arrange horizontally above the parent\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + xOffset,\n            y: parentPos.y - 150\n          };\n        }\n        break;\n        \n      case 'left':\n        // Arrange vertically to the left - increase spacing\n        for (let i = 0; i < newConcepts.length; i++) {\n          const yOffset = (i - 2) * 100; // -200, -100, 0, 100, 200\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x - 250,\n            y: parentPos.y + yOffset\n          };\n        }\n        break;\n        \n      case 'right':\n        // Arrange vertically to the right - increase spacing\n        for (let i = 0; i < newConcepts.length; i++) {\n          const yOffset = (i - 2) * 100; // -200, -100, 0, 100, 200\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + 250,\n            y: parentPos.y + yOffset\n          };\n        }\n        break;\n        \n      case 'bottom-left':\n        // Arrange horizontally below and to the left\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x - 100 + xOffset,\n            y: parentPos.y + 150\n          };\n        }\n        break;\n        \n      case 'bottom-right':\n        // Arrange horizontally below and to the right\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + 100 + xOffset,\n            y: parentPos.y + 150\n          };\n        }\n        break;\n    }\n    \n    setPositions(newPositions);\n  };\n\n  // Toggle node active state\n  const toggleNodeActive = (index) => {\n    // Count how many inactive nodes we currently have\n    const inactiveCount = activeNodes.filter(active => !active).length;\n    \n    // If this node is already inactive, we can always make it active again\n    if (!activeNodes[index]) {\n      setActiveNodes(prev => {\n        const newActive = [...prev];\n        newActive[index] = true;\n        return newActive;\n      });\n      // If we're activating a node, clear expansion\n      if (expandedNodeIndex !== null) {\n        setExpandedNodeIndex(null);\n        setExpandedConcepts([]);\n      }\n      return;\n    }\n    \n    // If this would be the 5th inactive node (all inactive), don't allow it\n    if (inactiveCount === 4) {\n      // Find the only remaining active node (which must be this one)\n      const activeNodeIndices = activeNodes.map((active, i) => active ? i : -1).filter(i => i >= 0);\n      if (activeNodeIndices.length === 1 && activeNodeIndices[0] === index) {\n        console.log(\"Can't deactivate the last node\");\n        return;\n      }\n    }\n    \n    // Make this node inactive\n    setActiveNodes(prev => {\n      const newActive = [...prev];\n      newActive[index] = false;\n      return newActive;\n    });\n    \n    // Check if we now have 4 inactive nodes (1 active)\n    const newInactiveCount = inactiveCount + 1;\n    if (newInactiveCount === 4) {\n      // Find the one remaining active node\n      const remainingActiveIndex = activeNodes.findIndex((active, i) => active && i !== index);\n      if (remainingActiveIndex !== -1) {\n        // Expand the remaining active node\n        expandNode(remainingActiveIndex);\n      }\n    }\n  };\n  \n  // Handle starting to drag a concept\n  const handleMouseDown = (e, conceptId) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    const rect = e.currentTarget.getBoundingClientRect();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    \n    setDraggedConcept(conceptId);\n    setDragOffset({\n      x: e.clientX - (rect.left - mapRect.left),\n      y: e.clientY - (rect.top - mapRect.top)\n    });\n    \n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle dragging a concept\n  const handleMouseMove = (e) => {\n    if (!draggedConcept) return;\n    \n    e.preventDefault();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    const newX = e.clientX - mapRect.left - dragOffset.x;\n    const newY = e.clientY - mapRect.top - dragOffset.y;\n\n    setPositions(prev => ({\n      ...prev,\n      [draggedConcept]: { x: newX, y: newY }\n    }));\n  };\n\n  // Handle dropping a concept\n  const handleMouseUp = () => {\n    setDraggedConcept(null);\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Use a simpler approach for connections - plain HTML/CSS\n  const renderConnections = () => {\n    if (!mapRef.current) return null;\n    \n    const lines = [];\n    \n    // Calculate center of map\n    const mapWidth = mapRef.current.offsetWidth;\n    const mapHeight = mapRef.current.offsetHeight;\n    const centerX = mapWidth / 2;\n    const centerY = mapHeight / 2;\n    \n    // Main concept connections\n    concepts.forEach((_, index) => {\n      const pos = positions[`concept-${index}`] || { x: 0, y: 0 };\n      \n      const x1 = centerX;\n      const y1 = centerY;\n      const x2 = centerX + pos.x;\n      const y2 = centerY + pos.y;\n      \n      // Calculate angle and length\n      const angle = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;\n      const length = Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\n      \n      lines.push(\n        <div\n          key={`line-${index}`}\n          className={`line-connection ${!activeNodes[index] ? 'inactive' : ''}`}\n          style={{\n            width: `${length}px`,\n            left: `${x1}px`,\n            top: `${y1}px`,\n            transform: `rotate(${angle}deg)`,\n            transformOrigin: '0 0',\n          }}\n        />\n      );\n    });\n    \n    // Expanded node connections\n    if (expandedNodeIndex !== null) {\n      const parentPos = positions[`concept-${expandedNodeIndex}`] || { x: 0, y: 0 };\n      const parentX = centerX + parentPos.x;\n      const parentY = centerY + parentPos.y;\n      \n      expandedConcepts.forEach((_, i) => {\n        const childPos = positions[`expanded-${expandedNodeIndex}-${i}`];\n        if (!childPos) return;\n        \n        const childX = centerX + childPos.x;\n        const childY = centerY + childPos.y;\n        \n        // Calculate angle and length for expanded connection\n        const angle = Math.atan2(childY - parentY, childX - parentX) * 180 / Math.PI;\n        const length = Math.sqrt((childX - parentX) ** 2 + (childY - parentY) ** 2);\n        \n        lines.push(\n          <div\n            key={`expanded-line-${expandedNodeIndex}-${i}`}\n            className=\"line-connection expanded\"\n            style={{\n              width: `${length}px`,\n              left: `${parentX}px`,\n              top: `${parentY}px`,\n              transform: `rotate(${angle}deg)`,\n              transformOrigin: '0 0',\n            }}\n          />\n        );\n      });\n    }\n    \n    return lines;\n  };\n\n  // Use useEffect to ensure connections are updated when node dimensions change\n  useEffect(() => {\n    // Create a resize observer to detect size changes in nodes\n    const resizeObserver = new ResizeObserver(() => {\n      // Force a re-render to update connections\n      setPositions({...positions});\n    });\n    \n    // Observe central node\n    if (centralRef.current) {\n      resizeObserver.observe(centralRef.current);\n    }\n    \n    // Observe all concept nodes\n    conceptRefs.current.forEach(ref => {\n      if (ref.current) {\n        resizeObserver.observe(ref.current);\n      }\n    });\n    \n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, [conceptRefs.current.length, centralRef.current, expandedNodeIndex]);\n\n  // Console log for debugging\n  console.log(\"Active nodes:\", activeNodes);\n  console.log(\"Expanded node index:\", expandedNodeIndex);\n  console.log(\"Expanded concepts:\", expandedConcepts);\n  console.log(\"Positions:\", positions);\n\n  return (\n    <div className=\"mind-map-container\">\n      <div className=\"mind-map\" ref={mapRef}>\n        {/* Lines for connections */}\n        {renderConnections()}\n        \n        {/* Central Question Node */}\n        <div className=\"central-question\" ref={centralRef}>\n          {centralQuestion}\n        </div>\n        \n        {/* Concept Nodes */}\n        {concepts.map((concept, index) => {\n          const pos = positions[`concept-${index}`] || { x: 0, y: 0 };\n          const isDragging = draggedConcept === `concept-${index}`;\n          \n          return (\n            <div\n              key={index}\n              className={`concept ${!activeNodes[index] ? 'inactive' : ''} ${isDragging ? 'dragging' : ''} ${index === expandedNodeIndex ? 'expanded' : ''}`}\n              style={{\n                top: `calc(50% + ${pos.y}px)`,\n                left: `calc(50% + ${pos.x}px)`,\n                cursor: isDragging ? 'grabbing' : 'grab'\n              }}\n              ref={conceptRefs.current[index]}\n              onMouseDown={(e) => handleMouseDown(e, `concept-${index}`)}\n              onClick={(e) => {\n                e.stopPropagation();\n                if (!draggedConcept) {\n                  toggleNodeActive(index);\n                }\n              }}\n            >\n              {concept}\n            </div>\n          );\n        })}\n        \n        {/* Expanded Concept Nodes */}\n        {expandedNodeIndex !== null && expandedConcepts.map((concept, index) => {\n          const pos = positions[`expanded-${expandedNodeIndex}-${index}`];\n          if (!pos) return null;\n          \n          return (\n            <div\n              key={`expanded-${expandedNodeIndex}-${index}`}\n              className=\"concept expanded-child\"\n              data-expanded-index={`${expandedNodeIndex}-${index}`}\n              style={{\n                top: `calc(50% + ${pos.y}px)`,\n                left: `calc(50% + ${pos.x}px)`,\n                border: '2px solid #000'\n              }}\n            >\n              <div className=\"concept-title\">{concept.title}</div>\n              {concept.description && (\n                <div className=\"concept-description\">{concept.description}</div>\n              )}\n              <div className=\"concept-icon\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\n                  <path fill=\"none\" d=\"M0 0h24v24H0z\"/>\n                  <path d=\"M9.973 18h4.054c.132-1.202.745-2.194 1.74-3.277.113-.122.832-.867.917-.973a6 6 0 1 0-9.37-.002c.086.107.807.853.918.974.996 1.084 1.609 2.076 1.741 3.278zM14 20h-4v1h4v-1zm-8.246-5a8 8 0 1 1 12.49.002C17.624 15.774 16 17 16 18.5V21a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2v-2.5C8 17 6.375 15.774 5.754 15z\" fill=\"rgba(0,0,0,0.6)\"/>\n                </svg>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default MindMap; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}