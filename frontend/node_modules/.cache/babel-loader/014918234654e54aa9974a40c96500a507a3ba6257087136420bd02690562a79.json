{"ast":null,"code":"var _jsxFileName = \"/Users/kei/AIdeator-LLM/frontend/src/components/MindMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './MindMap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MindMap = ({\n  centralQuestion,\n  concepts\n}) => {\n  _s();\n  const [activeNodes, setActiveNodes] = useState(concepts.map((_, i) => true));\n  const [draggedConcept, setDraggedConcept] = useState(null);\n  const [dragStart, setDragStart] = useState({\n    x: 0,\n    y: 0\n  });\n  const mapRef = useRef(null);\n\n  // Fixed positions for the mind map nodes\n  const nodePositions = [{\n    x: 0,\n    y: -200\n  },\n  // Top node (0)\n  {\n    x: -300,\n    y: 0\n  },\n  // Left node (1)\n  {\n    x: 300,\n    y: 0\n  },\n  // Right node (2)\n  {\n    x: -150,\n    y: 200\n  },\n  // Bottom Left node (3)\n  {\n    x: 150,\n    y: 200\n  } // Bottom Right node (4)\n  ];\n\n  // Handle starting to drag a concept\n  const handleMouseDown = (e, index) => {\n    e.stopPropagation();\n    setDraggedConcept(index);\n    setDragStart({\n      x: e.clientX,\n      y: e.clientY\n    });\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle dragging a concept\n  const handleMouseMove = e => {\n    if (draggedConcept === null) return;\n\n    // Move the dragged node\n    const conceptNode = document.getElementById(`concept-${draggedConcept}`);\n    const lineNode = document.getElementById(`line-${draggedConcept}`);\n    if (conceptNode && lineNode) {\n      const dx = e.clientX - dragStart.x;\n      const dy = e.clientY - dragStart.y;\n\n      // Update node position\n      const pos = nodePositions[draggedConcept];\n      const newX = pos.x + dx;\n      const newY = pos.y + dy;\n\n      // Apply the new position\n      conceptNode.style.transform = `translate(${newX}px, ${newY}px)`;\n\n      // Update the line position\n      lineNode.setAttribute('x2', newX);\n      lineNode.setAttribute('y2', newY);\n\n      // Update start position for next move\n      setDragStart({\n        x: e.clientX,\n        y: e.clientY\n      });\n    }\n  };\n\n  // Handle dropping a concept\n  const handleMouseUp = () => {\n    setDraggedConcept(null);\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Toggle active/inactive state of a concept when clicked\n  const handleConceptClick = (index, e) => {\n    e.stopPropagation();\n    if (draggedConcept !== null) return; // Don't toggle if we're dragging\n\n    setActiveNodes(prev => {\n      const newActiveNodes = [...prev];\n      newActiveNodes[index] = !newActiveNodes[index];\n      return newActiveNodes;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mind-map-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mind-map\",\n      ref: mapRef,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"central-question\",\n        children: centralQuestion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n        className: \"connections\",\n        children: concepts.map((_, index) => /*#__PURE__*/_jsxDEV(\"line\", {\n          id: `line-${index}`,\n          x1: \"0\",\n          y1: \"0\",\n          x2: nodePositions[index].x,\n          y2: nodePositions[index].y,\n          className: !activeNodes[index] ? 'connection inactive' : 'connection'\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), concepts.map((concept, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        id: `concept-${index}`,\n        className: `concept ${!activeNodes[index] ? 'inactive' : ''} ${draggedConcept === index ? 'dragging' : ''}`,\n        style: {\n          transform: `translate(${nodePositions[index].x}px, ${nodePositions[index].y}px)`\n        },\n        onMouseDown: e => handleMouseDown(e, index),\n        onClick: e => handleConceptClick(index, e),\n        children: concept\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(MindMap, \"JXoswD7VibddEX4X+YUuNkniBek=\");\n_c = MindMap;\nexport default MindMap;\nvar _c;\n$RefreshReg$(_c, \"MindMap\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","MindMap","centralQuestion","concepts","_s","activeNodes","setActiveNodes","map","_","i","draggedConcept","setDraggedConcept","dragStart","setDragStart","x","y","mapRef","nodePositions","handleMouseDown","e","index","stopPropagation","clientX","clientY","document","addEventListener","handleMouseMove","handleMouseUp","conceptNode","getElementById","lineNode","dx","dy","pos","newX","newY","style","transform","setAttribute","removeEventListener","handleConceptClick","prev","newActiveNodes","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","id","x1","y1","x2","y2","concept","onMouseDown","onClick","_c","$RefreshReg$"],"sources":["/Users/kei/AIdeator-LLM/frontend/src/components/MindMap.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport './MindMap.css';\n\nconst MindMap = ({ centralQuestion, concepts }) => {\n  const [activeNodes, setActiveNodes] = useState(concepts.map((_, i) => true));\n  const [draggedConcept, setDraggedConcept] = useState(null);\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\n  const mapRef = useRef(null);\n\n  // Fixed positions for the mind map nodes\n  const nodePositions = [\n    { x: 0, y: -200 },     // Top node (0)\n    { x: -300, y: 0 },     // Left node (1)\n    { x: 300, y: 0 },      // Right node (2)\n    { x: -150, y: 200 },   // Bottom Left node (3)\n    { x: 150, y: 200 }     // Bottom Right node (4)\n  ];\n\n  // Handle starting to drag a concept\n  const handleMouseDown = (e, index) => {\n    e.stopPropagation();\n    setDraggedConcept(index);\n    setDragStart({ x: e.clientX, y: e.clientY });\n    \n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle dragging a concept\n  const handleMouseMove = (e) => {\n    if (draggedConcept === null) return;\n    \n    // Move the dragged node\n    const conceptNode = document.getElementById(`concept-${draggedConcept}`);\n    const lineNode = document.getElementById(`line-${draggedConcept}`);\n    \n    if (conceptNode && lineNode) {\n      const dx = e.clientX - dragStart.x;\n      const dy = e.clientY - dragStart.y;\n      \n      // Update node position\n      const pos = nodePositions[draggedConcept];\n      const newX = pos.x + dx;\n      const newY = pos.y + dy;\n      \n      // Apply the new position\n      conceptNode.style.transform = `translate(${newX}px, ${newY}px)`;\n      \n      // Update the line position\n      lineNode.setAttribute('x2', newX);\n      lineNode.setAttribute('y2', newY);\n      \n      // Update start position for next move\n      setDragStart({ x: e.clientX, y: e.clientY });\n    }\n  };\n\n  // Handle dropping a concept\n  const handleMouseUp = () => {\n    setDraggedConcept(null);\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Toggle active/inactive state of a concept when clicked\n  const handleConceptClick = (index, e) => {\n    e.stopPropagation();\n    if (draggedConcept !== null) return; // Don't toggle if we're dragging\n    \n    setActiveNodes(prev => {\n      const newActiveNodes = [...prev];\n      newActiveNodes[index] = !newActiveNodes[index];\n      return newActiveNodes;\n    });\n  };\n\n  return (\n    <div className=\"mind-map-container\">\n      <div className=\"mind-map\" ref={mapRef}>\n        {/* Central question */}\n        <div className=\"central-question\">\n          {centralQuestion}\n        </div>\n        \n        {/* SVG for lines */}\n        <svg className=\"connections\">\n          {concepts.map((_, index) => (\n            <line\n              key={index}\n              id={`line-${index}`}\n              x1=\"0\"\n              y1=\"0\"\n              x2={nodePositions[index].x}\n              y2={nodePositions[index].y}\n              className={!activeNodes[index] ? 'connection inactive' : 'connection'}\n            />\n          ))}\n        </svg>\n        \n        {/* Concept nodes */}\n        {concepts.map((concept, index) => (\n          <div\n            key={index}\n            id={`concept-${index}`}\n            className={`concept ${!activeNodes[index] ? 'inactive' : ''} ${draggedConcept === index ? 'dragging' : ''}`}\n            style={{ transform: `translate(${nodePositions[index].x}px, ${nodePositions[index].y}px)` }}\n            onMouseDown={(e) => handleMouseDown(e, index)}\n            onClick={(e) => handleConceptClick(index, e)}\n          >\n            {concept}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default MindMap; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}