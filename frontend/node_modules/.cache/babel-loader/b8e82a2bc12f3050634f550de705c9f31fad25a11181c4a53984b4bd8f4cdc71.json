{"ast":null,"code":"var _jsxFileName = \"/Users/kei/AIdeator-LLM/frontend/src/components/MindMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './MindMap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MindMap = ({\n  centralQuestion,\n  concepts\n}) => {\n  _s();\n  const [positions, setPositions] = useState({});\n  const [draggedConcept, setDraggedConcept] = useState(null);\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [activeNodes, setActiveNodes] = useState(concepts.map(() => true));\n  const [expandedNodeIndex, setExpandedNodeIndex] = useState(null);\n  const [expandedConcepts, setExpandedConcepts] = useState([]);\n  const mapRef = useRef(null);\n  const conceptRefs = useRef([]);\n  const centralRef = useRef(null);\n\n  // Initialize refs for concept nodes\n  useEffect(() => {\n    conceptRefs.current = Array(concepts.length).fill().map(() => /*#__PURE__*/React.createRef());\n  }, [concepts.length]);\n\n  // Initialize positions in a balanced layout\n  useEffect(() => {\n    if (Object.keys(positions).length === 0) {\n      // Positions that match the reference image exactly\n      const initialPositions = {\n        'concept-0': {\n          x: 0,\n          y: -180\n        },\n        // Top\n        'concept-1': {\n          x: -280,\n          y: 0\n        },\n        // Left\n        'concept-2': {\n          x: 280,\n          y: 0\n        },\n        // Right\n        'concept-3': {\n          x: -180,\n          y: 200\n        },\n        // Bottom Left\n        'concept-4': {\n          x: 180,\n          y: 200\n        } // Bottom Right\n      };\n      setPositions(initialPositions);\n    }\n  }, [positions]);\n\n  // Handle starting to drag a concept\n  const handleMouseDown = (e, conceptId) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const rect = e.currentTarget.getBoundingClientRect();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    setDraggedConcept(conceptId);\n    setDragOffset({\n      x: e.clientX - (rect.left - mapRect.left),\n      y: e.clientY - (rect.top - mapRect.top)\n    });\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle dragging a concept\n  const handleMouseMove = e => {\n    if (!draggedConcept) return;\n    e.preventDefault();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    const newX = e.clientX - mapRect.left - dragOffset.x;\n    const newY = e.clientY - mapRect.top - dragOffset.y;\n    setPositions(prev => ({\n      ...prev,\n      [draggedConcept]: {\n        x: newX,\n        y: newY\n      }\n    }));\n  };\n\n  // Handle dropping a concept\n  const handleMouseUp = () => {\n    setDraggedConcept(null);\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Toggle node active state\n  const toggleNodeActive = index => {\n    // Count how many inactive nodes we currently have\n    const inactiveCount = activeNodes.filter(active => !active).length;\n\n    // If this node is already inactive, we can always make it active again\n    if (!activeNodes[index]) {\n      setActiveNodes(prev => {\n        const newActive = [...prev];\n        newActive[index] = true;\n        return newActive;\n      });\n      return;\n    }\n\n    // If we already have 4 inactive nodes and this would be the 5th, handle expansion\n    if (inactiveCount === 4) {\n      // Find the index of the only active node\n      const remainingActiveIndex = activeNodes.findIndex(active => active);\n      if (remainingActiveIndex !== -1 && remainingActiveIndex !== index) {\n        // Expand the remaining active node\n        expandNode(remainingActiveIndex);\n      }\n      return;\n    }\n\n    // Otherwise, just toggle this node\n    setActiveNodes(prev => {\n      const newActive = [...prev];\n      newActive[index] = !newActive[index];\n      return newActive;\n    });\n  };\n\n  // Expand a node with 5 new child nodes\n  const expandNode = index => {\n    setExpandedNodeIndex(index);\n\n    // Create 5 new concept nodes\n    const newConcepts = [\"Expanded Idea 1\", \"Expanded Idea 2\", \"Expanded Idea 3\", \"Expanded Idea 4\", \"Expanded Idea 5\"];\n    setExpandedConcepts(newConcepts);\n\n    // Create positions for the new nodes in a fan-like pattern around the parent\n    const parentPos = positions[`concept-${index}`];\n    const radius = 150; // Distance from parent node\n\n    // Calculate positions in a radial pattern\n    setTimeout(() => {\n      const newPositions = {\n        ...positions\n      };\n      newConcepts.forEach((_, i) => {\n        // Angle between 0 and 180 degrees converted to radians\n        const angle = Math.PI * (i / (newConcepts.length - 1)) - Math.PI / 2;\n        const x = parentPos.x + radius * Math.cos(angle);\n        const y = parentPos.y + radius * Math.sin(angle);\n        newPositions[`expanded-${index}-${i}`] = {\n          x,\n          y\n        };\n      });\n      setPositions(newPositions);\n    }, 100);\n  };\n\n  // Render connection lines between central node and concepts\n  const renderConnections = () => {\n    var _mapRef$current, _centralRef$current;\n    const mapRect = (_mapRef$current = mapRef.current) === null || _mapRef$current === void 0 ? void 0 : _mapRef$current.getBoundingClientRect();\n    const centralRect = (_centralRef$current = centralRef.current) === null || _centralRef$current === void 0 ? void 0 : _centralRef$current.getBoundingClientRect();\n    if (!mapRect || !centralRect) return null;\n\n    // The exact center of the central question box\n    const centerX = mapRect.width / 2;\n    const centerY = mapRect.height / 2;\n    const connections = [];\n\n    // Render connections to main concepts\n    concepts.forEach((_, index) => {\n      const pos = positions[`concept-${index}`];\n      if (!pos) return;\n\n      // Calculate the exact center position of the concept\n      const conceptCenterX = centerX + pos.x;\n      const conceptCenterY = centerY + pos.y;\n      connections.push(/*#__PURE__*/_jsxDEV(\"line\", {\n        x1: centerX,\n        y1: centerY,\n        x2: conceptCenterX,\n        y2: conceptCenterY,\n        className: activeNodes[index] ? 'connection' : 'connection inactive'\n      }, `line-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this));\n\n      // If this is the expanded node, add connections to expanded concepts\n      if (index === expandedNodeIndex) {\n        expandedConcepts.forEach((_, i) => {\n          const expandedPos = positions[`expanded-${index}-${i}`];\n          if (!expandedPos) return;\n          const expandedX = centerX + expandedPos.x;\n          const expandedY = centerY + expandedPos.y;\n          connections.push(/*#__PURE__*/_jsxDEV(\"line\", {\n            x1: conceptCenterX,\n            y1: conceptCenterY,\n            x2: expandedX,\n            y2: expandedY,\n            className: \"connection expanded\"\n          }, `expanded-line-${index}-${i}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this));\n        });\n      }\n    });\n    return connections;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mind-map-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mind-map\",\n      ref: mapRef,\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        className: \"connections\",\n        children: mapRef.current && centralRef.current && renderConnections()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"central-question\",\n        ref: centralRef,\n        children: centralQuestion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), concepts.map((concept, index) => {\n        const pos = positions[`concept-${index}`] || {\n          x: 0,\n          y: 0\n        };\n        const isDragging = draggedConcept === `concept-${index}`;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `concept ${!activeNodes[index] ? 'inactive' : ''} ${isDragging ? 'dragging' : ''} ${index === expandedNodeIndex ? 'expanded' : ''}`,\n          style: {\n            top: `calc(50% + ${pos.y}px)`,\n            left: `calc(50% + ${pos.x}px)`,\n            transform: 'translate(-50%, -50%)',\n            cursor: isDragging ? 'grabbing' : 'grab'\n          },\n          ref: conceptRefs.current[index],\n          onMouseDown: e => handleMouseDown(e, `concept-${index}`),\n          onClick: e => {\n            e.stopPropagation();\n            if (!draggedConcept) {\n              toggleNodeActive(index);\n            }\n          },\n          children: concept\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this);\n      }), expandedNodeIndex !== null && expandedConcepts.map((concept, index) => {\n        const pos = positions[`expanded-${expandedNodeIndex}-${index}`];\n        if (!pos) return null;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"concept expanded-child\",\n          style: {\n            top: `calc(50% + ${pos.y}px)`,\n            left: `calc(50% + ${pos.x}px)`,\n            transform: 'translate(-50%, -50%)'\n          },\n          children: concept\n        }, `expanded-${expandedNodeIndex}-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n};\n_s(MindMap, \"lUgL2qTVybr7GVwq/gDF27AqFvI=\");\n_c = MindMap;\nexport default MindMap;\nvar _c;\n$RefreshReg$(_c, \"MindMap\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","MindMap","centralQuestion","concepts","_s","positions","setPositions","draggedConcept","setDraggedConcept","dragOffset","setDragOffset","x","y","activeNodes","setActiveNodes","map","expandedNodeIndex","setExpandedNodeIndex","expandedConcepts","setExpandedConcepts","mapRef","conceptRefs","centralRef","current","Array","length","fill","createRef","Object","keys","initialPositions","handleMouseDown","e","conceptId","preventDefault","stopPropagation","rect","currentTarget","getBoundingClientRect","mapRect","clientX","left","clientY","top","document","addEventListener","handleMouseMove","handleMouseUp","newX","newY","prev","removeEventListener","toggleNodeActive","index","inactiveCount","filter","active","newActive","remainingActiveIndex","findIndex","expandNode","newConcepts","parentPos","radius","setTimeout","newPositions","forEach","_","i","angle","Math","PI","cos","sin","renderConnections","_mapRef$current","_centralRef$current","centralRect","centerX","width","centerY","height","connections","pos","conceptCenterX","conceptCenterY","push","x1","y1","x2","y2","className","fileName","_jsxFileName","lineNumber","columnNumber","expandedPos","expandedX","expandedY","children","ref","concept","isDragging","style","transform","cursor","onMouseDown","onClick","_c","$RefreshReg$"],"sources":["/Users/kei/AIdeator-LLM/frontend/src/components/MindMap.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './MindMap.css';\n\nconst MindMap = ({ centralQuestion, concepts }) => {\n  const [positions, setPositions] = useState({});\n  const [draggedConcept, setDraggedConcept] = useState(null);\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n  const [activeNodes, setActiveNodes] = useState(concepts.map(() => true));\n  const [expandedNodeIndex, setExpandedNodeIndex] = useState(null);\n  const [expandedConcepts, setExpandedConcepts] = useState([]);\n  const mapRef = useRef(null);\n  const conceptRefs = useRef([]);\n  const centralRef = useRef(null);\n\n  // Initialize refs for concept nodes\n  useEffect(() => {\n    conceptRefs.current = Array(concepts.length).fill().map(() => React.createRef());\n  }, [concepts.length]);\n\n  // Initialize positions in a balanced layout\n  useEffect(() => {\n    if (Object.keys(positions).length === 0) {\n      // Positions that match the reference image exactly\n      const initialPositions = {\n        'concept-0': { x: 0, y: -180 },      // Top\n        'concept-1': { x: -280, y: 0 },      // Left\n        'concept-2': { x: 280, y: 0 },       // Right\n        'concept-3': { x: -180, y: 200 },    // Bottom Left\n        'concept-4': { x: 180, y: 200 }      // Bottom Right\n      };\n      \n      setPositions(initialPositions);\n    }\n  }, [positions]);\n\n  // Handle starting to drag a concept\n  const handleMouseDown = (e, conceptId) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    const rect = e.currentTarget.getBoundingClientRect();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    \n    setDraggedConcept(conceptId);\n    setDragOffset({\n      x: e.clientX - (rect.left - mapRect.left),\n      y: e.clientY - (rect.top - mapRect.top)\n    });\n    \n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle dragging a concept\n  const handleMouseMove = (e) => {\n    if (!draggedConcept) return;\n    \n    e.preventDefault();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    const newX = e.clientX - mapRect.left - dragOffset.x;\n    const newY = e.clientY - mapRect.top - dragOffset.y;\n\n    setPositions(prev => ({\n      ...prev,\n      [draggedConcept]: { x: newX, y: newY }\n    }));\n  };\n\n  // Handle dropping a concept\n  const handleMouseUp = () => {\n    setDraggedConcept(null);\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Toggle node active state\n  const toggleNodeActive = (index) => {\n    // Count how many inactive nodes we currently have\n    const inactiveCount = activeNodes.filter(active => !active).length;\n    \n    // If this node is already inactive, we can always make it active again\n    if (!activeNodes[index]) {\n      setActiveNodes(prev => {\n        const newActive = [...prev];\n        newActive[index] = true;\n        return newActive;\n      });\n      return;\n    }\n    \n    // If we already have 4 inactive nodes and this would be the 5th, handle expansion\n    if (inactiveCount === 4) {\n      // Find the index of the only active node\n      const remainingActiveIndex = activeNodes.findIndex(active => active);\n      if (remainingActiveIndex !== -1 && remainingActiveIndex !== index) {\n        // Expand the remaining active node\n        expandNode(remainingActiveIndex);\n      }\n      return;\n    }\n    \n    // Otherwise, just toggle this node\n    setActiveNodes(prev => {\n      const newActive = [...prev];\n      newActive[index] = !newActive[index];\n      return newActive;\n    });\n  };\n  \n  // Expand a node with 5 new child nodes\n  const expandNode = (index) => {\n    setExpandedNodeIndex(index);\n    \n    // Create 5 new concept nodes\n    const newConcepts = [\n      \"Expanded Idea 1\",\n      \"Expanded Idea 2\", \n      \"Expanded Idea 3\",\n      \"Expanded Idea 4\",\n      \"Expanded Idea 5\"\n    ];\n    \n    setExpandedConcepts(newConcepts);\n    \n    // Create positions for the new nodes in a fan-like pattern around the parent\n    const parentPos = positions[`concept-${index}`];\n    const radius = 150; // Distance from parent node\n    \n    // Calculate positions in a radial pattern\n    setTimeout(() => {\n      const newPositions = { ...positions };\n      \n      newConcepts.forEach((_, i) => {\n        // Angle between 0 and 180 degrees converted to radians\n        const angle = (Math.PI * (i / (newConcepts.length - 1))) - (Math.PI / 2);\n        \n        const x = parentPos.x + radius * Math.cos(angle);\n        const y = parentPos.y + radius * Math.sin(angle);\n        \n        newPositions[`expanded-${index}-${i}`] = { x, y };\n      });\n      \n      setPositions(newPositions);\n    }, 100);\n  };\n\n  // Render connection lines between central node and concepts\n  const renderConnections = () => {\n    const mapRect = mapRef.current?.getBoundingClientRect();\n    const centralRect = centralRef.current?.getBoundingClientRect();\n    \n    if (!mapRect || !centralRect) return null;\n    \n    // The exact center of the central question box\n    const centerX = mapRect.width / 2;\n    const centerY = mapRect.height / 2;\n    \n    const connections = [];\n    \n    // Render connections to main concepts\n    concepts.forEach((_, index) => {\n      const pos = positions[`concept-${index}`];\n      if (!pos) return;\n      \n      // Calculate the exact center position of the concept\n      const conceptCenterX = centerX + pos.x;\n      const conceptCenterY = centerY + pos.y;\n      \n      connections.push(\n        <line\n          key={`line-${index}`}\n          x1={centerX}\n          y1={centerY}\n          x2={conceptCenterX}\n          y2={conceptCenterY}\n          className={activeNodes[index] ? 'connection' : 'connection inactive'}\n        />\n      );\n      \n      // If this is the expanded node, add connections to expanded concepts\n      if (index === expandedNodeIndex) {\n        expandedConcepts.forEach((_, i) => {\n          const expandedPos = positions[`expanded-${index}-${i}`];\n          if (!expandedPos) return;\n          \n          const expandedX = centerX + expandedPos.x;\n          const expandedY = centerY + expandedPos.y;\n          \n          connections.push(\n            <line\n              key={`expanded-line-${index}-${i}`}\n              x1={conceptCenterX}\n              y1={conceptCenterY}\n              x2={expandedX}\n              y2={expandedY}\n              className=\"connection expanded\"\n            />\n          );\n        });\n      }\n    });\n    \n    return connections;\n  };\n\n  return (\n    <div className=\"mind-map-container\">\n      <div className=\"mind-map\" ref={mapRef}>\n        {/* SVG for the connections between nodes */}\n        <svg className=\"connections\">\n          {mapRef.current && centralRef.current && renderConnections()}\n        </svg>\n        \n        {/* Central Question Node */}\n        <div className=\"central-question\" ref={centralRef}>\n          {centralQuestion}\n        </div>\n        \n        {/* Concept Nodes */}\n        {concepts.map((concept, index) => {\n          const pos = positions[`concept-${index}`] || { x: 0, y: 0 };\n          const isDragging = draggedConcept === `concept-${index}`;\n          \n          return (\n            <div\n              key={index}\n              className={`concept ${!activeNodes[index] ? 'inactive' : ''} ${isDragging ? 'dragging' : ''} ${index === expandedNodeIndex ? 'expanded' : ''}`}\n              style={{\n                top: `calc(50% + ${pos.y}px)`,\n                left: `calc(50% + ${pos.x}px)`,\n                transform: 'translate(-50%, -50%)',\n                cursor: isDragging ? 'grabbing' : 'grab'\n              }}\n              ref={conceptRefs.current[index]}\n              onMouseDown={(e) => handleMouseDown(e, `concept-${index}`)}\n              onClick={(e) => {\n                e.stopPropagation();\n                if (!draggedConcept) {\n                  toggleNodeActive(index);\n                }\n              }}\n            >\n              {concept}\n            </div>\n          );\n        })}\n        \n        {/* Expanded Concept Nodes */}\n        {expandedNodeIndex !== null && expandedConcepts.map((concept, index) => {\n          const pos = positions[`expanded-${expandedNodeIndex}-${index}`];\n          if (!pos) return null;\n          \n          return (\n            <div\n              key={`expanded-${expandedNodeIndex}-${index}`}\n              className=\"concept expanded-child\"\n              style={{\n                top: `calc(50% + ${pos.y}px)`,\n                left: `calc(50% + ${pos.x}px)`,\n                transform: 'translate(-50%, -50%)'\n              }}\n            >\n              {concept}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default MindMap; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}