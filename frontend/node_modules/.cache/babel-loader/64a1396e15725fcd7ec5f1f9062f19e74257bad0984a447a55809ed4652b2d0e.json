{"ast":null,"code":"var _jsxFileName = \"/Users/kei/AIdeator-LLM/frontend/src/components/MindMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport './MindMap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MindMap = ({\n  centralQuestion,\n  concepts\n}) => {\n  _s();\n  const [positions, setPositions] = useState({});\n  const [dragging, setDragging] = useState(null);\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [activeNodes, setActiveNodes] = useState(concepts.map(() => true));\n  const [expandedNodeIndex, setExpandedNodeIndex] = useState(null);\n  const [expandedConcepts, setExpandedConcepts] = useState([]);\n  const mindMapRef = useRef(null);\n  const svgRef = useRef(null);\n  const conceptRefs = useRef({});\n  const centralQuestionRef = useRef(null);\n\n  // Initialize refs for concept nodes\n  useEffect(() => {\n    conceptRefs.current = Array(concepts.length).fill().map(() => /*#__PURE__*/React.createRef());\n  }, [concepts.length]);\n\n  // Calculate initial positions in a circle around the center\n  useEffect(() => {\n    // Use a quarter of the smallest window dimension for radius\n    const radius = Math.min(window.innerWidth, window.innerHeight) / 4;\n    const centerX = window.innerWidth / 2;\n    const centerY = window.innerHeight / 2;\n    const newPositions = {};\n\n    // Position concepts in a circle around the central question\n    concepts.forEach((concept, index) => {\n      // Calculate angle based on index and total number of concepts\n      const angle = 2 * Math.PI * index / concepts.length;\n      // Calculate position using angle and radius\n      const x = centerX + radius * Math.cos(angle);\n      const y = centerY + radius * Math.sin(angle);\n      newPositions[concept.id] = {\n        x,\n        y\n      };\n    });\n    setPositions(newPositions);\n  }, [concepts]);\n\n  // Expand a node with 5 new child nodes\n  const expandNode = index => {\n    console.log(\"Expanding node\", index);\n    setExpandedNodeIndex(index);\n\n    // Create 5 new concept nodes with titles and descriptions\n    const newConcepts = [{\n      title: \"Fear of letting others down\",\n      description: \"Social and professional pressures can make people fear judgment from peers.\"\n    }, {\n      title: \"Concept B\",\n      description: \"A detailed description of concept B and its implications.\"\n    }, {\n      title: \"Concept C\",\n      description: \"A detailed description of concept C and its implications.\"\n    }, {\n      title: \"Concept D\",\n      description: \"A detailed description of concept D and its implications.\"\n    }, {\n      title: \"Concept E\",\n      description: \"A detailed description of concept E and its implications.\"\n    }];\n    setExpandedConcepts(newConcepts);\n\n    // Create positions for the new nodes following the parent's side\n    const parentPos = positions[`concept-${index}`];\n    const newPositions = {\n      ...positions\n    };\n\n    // Determine which side the parent node is on relative to the center\n    // This uses the standard layout: top, left, right, bottom-left, bottom-right\n    let direction;\n    if (index === 0) {\n      // Top node - place children above it\n      direction = 'top';\n    } else if (index === 1) {\n      // Left node - place children to the left\n      direction = 'left';\n    } else if (index === 2) {\n      // Right node - place children to the right\n      direction = 'right';\n    } else if (index === 3) {\n      // Bottom Left node - place children below and to the left\n      direction = 'bottom-left';\n    } else if (index === 4) {\n      // Bottom Right node - place children below and to the right\n      direction = 'bottom-right';\n    }\n    console.log(\"Direction for expanded nodes:\", direction);\n\n    // Position nodes based on the parent's position/direction\n    switch (direction) {\n      case 'top':\n        // Arrange horizontally above the parent\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + xOffset,\n            y: parentPos.y - 150\n          };\n        }\n        break;\n      case 'left':\n        // Arrange vertically to the left - increase spacing\n        for (let i = 0; i < newConcepts.length; i++) {\n          const yOffset = (i - 2) * 100; // -200, -100, 0, 100, 200\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x - 250,\n            y: parentPos.y + yOffset\n          };\n        }\n        break;\n      case 'right':\n        // Arrange vertically to the right - increase spacing\n        for (let i = 0; i < newConcepts.length; i++) {\n          const yOffset = (i - 2) * 100; // -200, -100, 0, 100, 200\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + 250,\n            y: parentPos.y + yOffset\n          };\n        }\n        break;\n      case 'bottom-left':\n        // Arrange horizontally below and to the left\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x - 100 + xOffset,\n            y: parentPos.y + 150\n          };\n        }\n        break;\n      case 'bottom-right':\n        // Arrange horizontally below and to the right\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + 100 + xOffset,\n            y: parentPos.y + 150\n          };\n        }\n        break;\n    }\n    setPositions(newPositions);\n  };\n\n  // Toggle node active state\n  const toggleNodeActive = index => {\n    // Count how many inactive nodes we currently have\n    const inactiveCount = activeNodes.filter(active => !active).length;\n\n    // If this node is already inactive, we can always make it active again\n    if (!activeNodes[index]) {\n      setActiveNodes(prev => {\n        const newActive = [...prev];\n        newActive[index] = true;\n        return newActive;\n      });\n      // If we're activating a node, clear expansion\n      if (expandedNodeIndex !== null) {\n        setExpandedNodeIndex(null);\n        setExpandedConcepts([]);\n      }\n      return;\n    }\n\n    // If this would be the 5th inactive node (all inactive), don't allow it\n    if (inactiveCount === 4) {\n      // Find the only remaining active node (which must be this one)\n      const activeNodeIndices = activeNodes.map((active, i) => active ? i : -1).filter(i => i >= 0);\n      if (activeNodeIndices.length === 1 && activeNodeIndices[0] === index) {\n        console.log(\"Can't deactivate the last node\");\n        return;\n      }\n    }\n\n    // Make this node inactive\n    setActiveNodes(prev => {\n      const newActive = [...prev];\n      newActive[index] = false;\n      return newActive;\n    });\n\n    // Check if we now have 4 inactive nodes (1 active)\n    const newInactiveCount = inactiveCount + 1;\n    if (newInactiveCount === 4) {\n      // Find the one remaining active node\n      const remainingActiveIndex = activeNodes.findIndex((active, i) => active && i !== index);\n      if (remainingActiveIndex !== -1) {\n        // Expand the remaining active node\n        expandNode(remainingActiveIndex);\n      }\n    }\n  };\n  const handleMouseDown = useCallback((e, id) => {\n    e.stopPropagation();\n\n    // Calculate offset from mouse position to concept center\n    const rect = conceptRefs.current[id].getBoundingClientRect();\n    const offsetX = e.clientX - rect.left - rect.width / 2;\n    const offsetY = e.clientY - rect.top - rect.height / 2;\n    setDragOffset({\n      x: offsetX,\n      y: offsetY\n    });\n    setDragging(id);\n  }, []);\n  const handleMouseMove = useCallback(e => {\n    if (dragging) {\n      e.preventDefault();\n\n      // Update position based on mouse movement, accounting for offset\n      setPositions(prev => ({\n        ...prev,\n        [dragging]: {\n          x: e.clientX - dragOffset.x,\n          y: e.clientY - dragOffset.y\n        }\n      }));\n    }\n  }, [dragging, dragOffset]);\n  const handleMouseUp = useCallback(() => {\n    setDragging(null);\n  }, [handleMouseMove]);\n\n  // Add and remove event listeners for dragging\n  useEffect(() => {\n    if (dragging) {\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    }\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [dragging]);\n  const renderConnections = () => {\n    if (!centralQuestionRef.current) return null;\n\n    // Get the central question's bounding rect\n    const centralRect = centralQuestionRef.current.getBoundingClientRect();\n    const centralX = centralRect.left + centralRect.width / 2;\n    const centralY = centralRect.top + centralRect.height / 2;\n    return concepts.map(concept => {\n      if (!positions[concept.id]) return null;\n\n      // Get concept position\n      const {\n        x,\n        y\n      } = positions[concept.id];\n      return /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: centralX,\n        y1: centralY,\n        x2: x,\n        y2: y,\n        className: \"connection\"\n      }, concept.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  // Use useEffect to ensure connections are updated when node dimensions change\n  useEffect(() => {\n    // Create a resize observer to detect size changes in nodes\n    const resizeObserver = new ResizeObserver(() => {\n      // Force a re-render to update connections\n      setPositions({\n        ...positions\n      });\n    });\n\n    // Observe central node\n    if (centralQuestionRef.current) {\n      resizeObserver.observe(centralQuestionRef.current);\n    }\n\n    // Observe all concept nodes\n    conceptRefs.current.forEach(ref => {\n      if (ref.current) {\n        resizeObserver.observe(ref.current);\n      }\n    });\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, [conceptRefs.current.length, centralQuestionRef.current, expandedNodeIndex]);\n\n  // Console log for debugging\n  console.log(\"Active nodes:\", activeNodes);\n  console.log(\"Expanded node index:\", expandedNodeIndex);\n  console.log(\"Expanded concepts:\", expandedConcepts);\n  console.log(\"Positions:\", positions);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mind-map-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mind-map\",\n      ref: mindMapRef,\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        className: \"connections\",\n        ref: svgRef,\n        children: renderConnections()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"central-question\",\n        ref: centralQuestionRef,\n        children: centralQuestion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }, this), concepts.map((concept, index) => {\n        const pos = positions[`concept-${index}`] || {\n          x: 0,\n          y: 0\n        };\n        const isDragging = dragging === `concept-${index}`;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `concept ${!activeNodes[index] ? 'inactive' : ''} ${isDragging ? 'dragging' : ''} ${index === expandedNodeIndex ? 'expanded' : ''}`,\n          style: {\n            left: `${pos.x}px`,\n            top: `${pos.y}px`,\n            cursor: isDragging ? 'grabbing' : 'grab'\n          },\n          ref: conceptRefs.current[`concept-${index}`],\n          onMouseDown: e => handleMouseDown(e, `concept-${index}`),\n          onClick: e => {\n            e.stopPropagation();\n            if (!dragging) {\n              toggleNodeActive(index);\n            }\n          },\n          children: concept\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 13\n        }, this);\n      }), expandedNodeIndex !== null && expandedConcepts.map((concept, index) => {\n        const pos = positions[`expanded-${expandedNodeIndex}-${index}`];\n        if (!pos) return null;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"concept expanded-child\",\n          \"data-expanded-index\": `${expandedNodeIndex}-${index}`,\n          style: {\n            left: `${pos.x}px`,\n            top: `${pos.y}px`,\n            border: '2px solid #000'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"concept-title\",\n            children: concept.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 15\n          }, this), concept.description && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"concept-description\",\n            children: concept.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"concept-icon\",\n            children: /*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              viewBox: \"0 0 24 24\",\n              width: \"24\",\n              height: \"24\",\n              children: [/*#__PURE__*/_jsxDEV(\"path\", {\n                fill: \"none\",\n                d: \"M0 0h24v24H0z\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                d: \"M9.973 18h4.054c.132-1.202.745-2.194 1.74-3.277.113-.122.832-.867.917-.973a6 6 0 1 0-9.37-.002c.086.107.807.853.918.974.996 1.084 1.609 2.076 1.741 3.278zM14 20h-4v1h4v-1zm-8.246-5a8 8 0 1 1 12.49.002C17.624 15.774 16 17 16 18.5V21a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2v-2.5C8 17 6.375 15.774 5.754 15z\",\n                fill: \"rgba(0,0,0,0.6)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 15\n          }, this)]\n        }, `expanded-${expandedNodeIndex}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 318,\n    columnNumber: 5\n  }, this);\n};\n_s(MindMap, \"8ssdKN3RseU1KfVbQ9bY+ce5cow=\");\n_c = MindMap;\nexport default MindMap;\nvar _c;\n$RefreshReg$(_c, \"MindMap\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","jsxDEV","_jsxDEV","MindMap","centralQuestion","concepts","_s","positions","setPositions","dragging","setDragging","dragOffset","setDragOffset","x","y","activeNodes","setActiveNodes","map","expandedNodeIndex","setExpandedNodeIndex","expandedConcepts","setExpandedConcepts","mindMapRef","svgRef","conceptRefs","centralQuestionRef","current","Array","length","fill","createRef","radius","Math","min","window","innerWidth","innerHeight","centerX","centerY","newPositions","forEach","concept","index","angle","PI","cos","sin","id","expandNode","console","log","newConcepts","title","description","parentPos","direction","i","xOffset","yOffset","toggleNodeActive","inactiveCount","filter","active","prev","newActive","activeNodeIndices","newInactiveCount","remainingActiveIndex","findIndex","handleMouseDown","e","stopPropagation","rect","getBoundingClientRect","offsetX","clientX","left","width","offsetY","clientY","top","height","handleMouseMove","preventDefault","handleMouseUp","addEventListener","removeEventListener","renderConnections","centralRect","centralX","centralY","x1","y1","x2","y2","className","fileName","_jsxFileName","lineNumber","columnNumber","resizeObserver","ResizeObserver","observe","ref","disconnect","children","pos","isDragging","style","cursor","onMouseDown","onClick","border","xmlns","viewBox","d","_c","$RefreshReg$"],"sources":["/Users/kei/AIdeator-LLM/frontend/src/components/MindMap.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport './MindMap.css';\n\nconst MindMap = ({ centralQuestion, concepts }) => {\n  const [positions, setPositions] = useState({});\n  const [dragging, setDragging] = useState(null);\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n  const [activeNodes, setActiveNodes] = useState(concepts.map(() => true));\n  const [expandedNodeIndex, setExpandedNodeIndex] = useState(null);\n  const [expandedConcepts, setExpandedConcepts] = useState([]);\n  const mindMapRef = useRef(null);\n  const svgRef = useRef(null);\n  const conceptRefs = useRef({});\n  const centralQuestionRef = useRef(null);\n\n  // Initialize refs for concept nodes\n  useEffect(() => {\n    conceptRefs.current = Array(concepts.length).fill().map(() => React.createRef());\n  }, [concepts.length]);\n\n  // Calculate initial positions in a circle around the center\n  useEffect(() => {\n    // Use a quarter of the smallest window dimension for radius\n    const radius = Math.min(window.innerWidth, window.innerHeight) / 4;\n    const centerX = window.innerWidth / 2;\n    const centerY = window.innerHeight / 2;\n\n    const newPositions = {};\n    \n    // Position concepts in a circle around the central question\n    concepts.forEach((concept, index) => {\n      // Calculate angle based on index and total number of concepts\n      const angle = (2 * Math.PI * index) / concepts.length;\n      // Calculate position using angle and radius\n      const x = centerX + radius * Math.cos(angle);\n      const y = centerY + radius * Math.sin(angle);\n      \n      newPositions[concept.id] = { x, y };\n    });\n    \n    setPositions(newPositions);\n  }, [concepts]);\n\n  // Expand a node with 5 new child nodes\n  const expandNode = (index) => {\n    console.log(\"Expanding node\", index);\n    setExpandedNodeIndex(index);\n    \n    // Create 5 new concept nodes with titles and descriptions\n    const newConcepts = [\n      {\n        title: \"Fear of letting others down\",\n        description: \"Social and professional pressures can make people fear judgment from peers.\"\n      },\n      {\n        title: \"Concept B\",\n        description: \"A detailed description of concept B and its implications.\"\n      },\n      {\n        title: \"Concept C\",\n        description: \"A detailed description of concept C and its implications.\"\n      },\n      {\n        title: \"Concept D\",\n        description: \"A detailed description of concept D and its implications.\"\n      },\n      {\n        title: \"Concept E\",\n        description: \"A detailed description of concept E and its implications.\"\n      }\n    ];\n    \n    setExpandedConcepts(newConcepts);\n    \n    // Create positions for the new nodes following the parent's side\n    const parentPos = positions[`concept-${index}`];\n    const newPositions = { ...positions };\n    \n    // Determine which side the parent node is on relative to the center\n    // This uses the standard layout: top, left, right, bottom-left, bottom-right\n    let direction;\n    \n    if (index === 0) {\n      // Top node - place children above it\n      direction = 'top';\n    } else if (index === 1) {\n      // Left node - place children to the left\n      direction = 'left';\n    } else if (index === 2) {\n      // Right node - place children to the right\n      direction = 'right';\n    } else if (index === 3) {\n      // Bottom Left node - place children below and to the left\n      direction = 'bottom-left';\n    } else if (index === 4) {\n      // Bottom Right node - place children below and to the right\n      direction = 'bottom-right';\n    }\n    \n    console.log(\"Direction for expanded nodes:\", direction);\n    \n    // Position nodes based on the parent's position/direction\n    switch (direction) {\n      case 'top':\n        // Arrange horizontally above the parent\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + xOffset,\n            y: parentPos.y - 150\n          };\n        }\n        break;\n        \n      case 'left':\n        // Arrange vertically to the left - increase spacing\n        for (let i = 0; i < newConcepts.length; i++) {\n          const yOffset = (i - 2) * 100; // -200, -100, 0, 100, 200\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x - 250,\n            y: parentPos.y + yOffset\n          };\n        }\n        break;\n        \n      case 'right':\n        // Arrange vertically to the right - increase spacing\n        for (let i = 0; i < newConcepts.length; i++) {\n          const yOffset = (i - 2) * 100; // -200, -100, 0, 100, 200\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + 250,\n            y: parentPos.y + yOffset\n          };\n        }\n        break;\n        \n      case 'bottom-left':\n        // Arrange horizontally below and to the left\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x - 100 + xOffset,\n            y: parentPos.y + 150\n          };\n        }\n        break;\n        \n      case 'bottom-right':\n        // Arrange horizontally below and to the right\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + 100 + xOffset,\n            y: parentPos.y + 150\n          };\n        }\n        break;\n    }\n    \n    setPositions(newPositions);\n  };\n\n  // Toggle node active state\n  const toggleNodeActive = (index) => {\n    // Count how many inactive nodes we currently have\n    const inactiveCount = activeNodes.filter(active => !active).length;\n    \n    // If this node is already inactive, we can always make it active again\n    if (!activeNodes[index]) {\n      setActiveNodes(prev => {\n        const newActive = [...prev];\n        newActive[index] = true;\n        return newActive;\n      });\n      // If we're activating a node, clear expansion\n      if (expandedNodeIndex !== null) {\n        setExpandedNodeIndex(null);\n        setExpandedConcepts([]);\n      }\n      return;\n    }\n    \n    // If this would be the 5th inactive node (all inactive), don't allow it\n    if (inactiveCount === 4) {\n      // Find the only remaining active node (which must be this one)\n      const activeNodeIndices = activeNodes.map((active, i) => active ? i : -1).filter(i => i >= 0);\n      if (activeNodeIndices.length === 1 && activeNodeIndices[0] === index) {\n        console.log(\"Can't deactivate the last node\");\n        return;\n      }\n    }\n    \n    // Make this node inactive\n    setActiveNodes(prev => {\n      const newActive = [...prev];\n      newActive[index] = false;\n      return newActive;\n    });\n    \n    // Check if we now have 4 inactive nodes (1 active)\n    const newInactiveCount = inactiveCount + 1;\n    if (newInactiveCount === 4) {\n      // Find the one remaining active node\n      const remainingActiveIndex = activeNodes.findIndex((active, i) => active && i !== index);\n      if (remainingActiveIndex !== -1) {\n        // Expand the remaining active node\n        expandNode(remainingActiveIndex);\n      }\n    }\n  };\n  \n  const handleMouseDown = useCallback((e, id) => {\n    e.stopPropagation();\n    \n    // Calculate offset from mouse position to concept center\n    const rect = conceptRefs.current[id].getBoundingClientRect();\n    const offsetX = e.clientX - rect.left - rect.width / 2;\n    const offsetY = e.clientY - rect.top - rect.height / 2;\n    \n    setDragOffset({ x: offsetX, y: offsetY });\n    setDragging(id);\n  }, []);\n\n  const handleMouseMove = useCallback((e) => {\n    if (dragging) {\n      e.preventDefault();\n      \n      // Update position based on mouse movement, accounting for offset\n      setPositions(prev => ({\n        ...prev,\n        [dragging]: {\n          x: e.clientX - dragOffset.x,\n          y: e.clientY - dragOffset.y\n        }\n      }));\n    }\n  }, [dragging, dragOffset]);\n\n  const handleMouseUp = useCallback(() => {\n    setDragging(null);\n  }, [handleMouseMove]);\n\n  // Add and remove event listeners for dragging\n  useEffect(() => {\n    if (dragging) {\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    }\n    \n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [dragging]);\n\n  const renderConnections = () => {\n    if (!centralQuestionRef.current) return null;\n    \n    // Get the central question's bounding rect\n    const centralRect = centralQuestionRef.current.getBoundingClientRect();\n    const centralX = centralRect.left + centralRect.width / 2;\n    const centralY = centralRect.top + centralRect.height / 2;\n    \n    return concepts.map(concept => {\n      if (!positions[concept.id]) return null;\n      \n      // Get concept position\n      const { x, y } = positions[concept.id];\n      \n      return (\n        <line\n          key={concept.id}\n          x1={centralX}\n          y1={centralY}\n          x2={x}\n          y2={y}\n          className=\"connection\"\n        />\n      );\n    });\n  };\n\n  // Use useEffect to ensure connections are updated when node dimensions change\n  useEffect(() => {\n    // Create a resize observer to detect size changes in nodes\n    const resizeObserver = new ResizeObserver(() => {\n      // Force a re-render to update connections\n      setPositions({...positions});\n    });\n    \n    // Observe central node\n    if (centralQuestionRef.current) {\n      resizeObserver.observe(centralQuestionRef.current);\n    }\n    \n    // Observe all concept nodes\n    conceptRefs.current.forEach(ref => {\n      if (ref.current) {\n        resizeObserver.observe(ref.current);\n      }\n    });\n    \n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, [conceptRefs.current.length, centralQuestionRef.current, expandedNodeIndex]);\n\n  // Console log for debugging\n  console.log(\"Active nodes:\", activeNodes);\n  console.log(\"Expanded node index:\", expandedNodeIndex);\n  console.log(\"Expanded concepts:\", expandedConcepts);\n  console.log(\"Positions:\", positions);\n\n  return (\n    <div className=\"mind-map-container\">\n      <div className=\"mind-map\" ref={mindMapRef}>\n        <svg className=\"connections\" ref={svgRef}>\n          {renderConnections()}\n        </svg>\n        \n        <div \n          className=\"central-question\"\n          ref={centralQuestionRef}\n        >\n          {centralQuestion}\n        </div>\n        \n        {concepts.map((concept, index) => {\n          const pos = positions[`concept-${index}`] || { x: 0, y: 0 };\n          const isDragging = dragging === `concept-${index}`;\n          \n          return (\n            <div\n              key={index}\n              className={`concept ${!activeNodes[index] ? 'inactive' : ''} ${isDragging ? 'dragging' : ''} ${index === expandedNodeIndex ? 'expanded' : ''}`}\n              style={{\n                left: `${pos.x}px`,\n                top: `${pos.y}px`,\n                cursor: isDragging ? 'grabbing' : 'grab'\n              }}\n              ref={conceptRefs.current[`concept-${index}`]}\n              onMouseDown={(e) => handleMouseDown(e, `concept-${index}`)}\n              onClick={(e) => {\n                e.stopPropagation();\n                if (!dragging) {\n                  toggleNodeActive(index);\n                }\n              }}\n            >\n              {concept}\n            </div>\n          );\n        })}\n        \n        {/* Expanded Concept Nodes */}\n        {expandedNodeIndex !== null && expandedConcepts.map((concept, index) => {\n          const pos = positions[`expanded-${expandedNodeIndex}-${index}`];\n          if (!pos) return null;\n          \n          return (\n            <div\n              key={`expanded-${expandedNodeIndex}-${index}`}\n              className=\"concept expanded-child\"\n              data-expanded-index={`${expandedNodeIndex}-${index}`}\n              style={{\n                left: `${pos.x}px`,\n                top: `${pos.y}px`,\n                border: '2px solid #000'\n              }}\n            >\n              <div className=\"concept-title\">{concept.title}</div>\n              {concept.description && (\n                <div className=\"concept-description\">{concept.description}</div>\n              )}\n              <div className=\"concept-icon\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\n                  <path fill=\"none\" d=\"M0 0h24v24H0z\"/>\n                  <path d=\"M9.973 18h4.054c.132-1.202.745-2.194 1.74-3.277.113-.122.832-.867.917-.973a6 6 0 1 0-9.37-.002c.086.107.807.853.918.974.996 1.084 1.609 2.076 1.741 3.278zM14 20h-4v1h4v-1zm-8.246-5a8 8 0 1 1 12.49.002C17.624 15.774 16 17 16 18.5V21a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2v-2.5C8 17 6.375 15.774 5.754 15z\" fill=\"rgba(0,0,0,0.6)\"/>\n                </svg>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default MindMap; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}