{"ast":null,"code":"var _jsxFileName = \"/Users/kei/AIdeator-LLM/frontend/src/components/MindMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './MindMap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MindMap = ({\n  centralQuestion,\n  concepts\n}) => {\n  _s();\n  const [positions, setPositions] = useState({});\n  const [draggedConcept, setDraggedConcept] = useState(null);\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [activeNodes, setActiveNodes] = useState(concepts.map((_, i) => true));\n  const [nodeRefs, setNodeRefs] = useState({});\n  const [paths, setPaths] = useState([]);\n  const mapRef = useRef(null);\n  const centralRef = useRef(null);\n\n  // Create refs for each concept node\n  useEffect(() => {\n    const refs = {};\n    concepts.forEach((_, index) => {\n      refs[`concept-${index}`] = /*#__PURE__*/React.createRef();\n    });\n    setNodeRefs(refs);\n  }, [concepts]);\n\n  // Initialize positions to create a perfectly symmetrical star pattern\n  useEffect(() => {\n    if (Object.keys(positions).length === 0 && mapRef.current) {\n      // Wait for a brief moment to ensure dimensions are available\n      setTimeout(() => {\n        const initialPositions = {};\n\n        // Position the concepts in a symmetrical star pattern around the central question\n        if (concepts.length === 5) {\n          // For 5 concepts, position in a star\n          const angles = [0,\n          // Top\n          144,\n          // Bottom Right\n          288,\n          // Bottom Left\n          72,\n          // Top Right\n          216 // Top Left\n          ];\n\n          // Use the same distance for all concepts to ensure perfect symmetry\n          const distance = 240;\n\n          // Calculate positions\n          concepts.forEach((_, index) => {\n            const angleRad = (angles[index] - 90) * Math.PI / 180; // -90 to start from top\n            initialPositions[`concept-${index}`] = {\n              x: Math.cos(angleRad) * distance,\n              y: Math.sin(angleRad) * distance\n            };\n          });\n        } else {\n          // For any other number of concepts, distribute evenly in a circle\n          concepts.forEach((_, index) => {\n            const angle = 2 * Math.PI * index / concepts.length - Math.PI / 2; // Start from top\n            initialPositions[`concept-${index}`] = {\n              x: Math.cos(angle) * 240,\n              y: Math.sin(angle) * 240\n            };\n          });\n        }\n        setPositions(initialPositions);\n      }, 100);\n    }\n  }, [concepts, positions, mapRef]);\n\n  // Calculate connection paths when positions change\n  useEffect(() => {\n    if (!centralRef.current || !mapRef.current) return;\n    const calculatePaths = () => {\n      const mapRect = mapRef.current.getBoundingClientRect();\n      const centralRect = centralRef.current.getBoundingClientRect();\n\n      // Calculate paths between central question and concepts\n      const newPaths = concepts.map((_, index) => {\n        var _nodeRefs;\n        const nodeRef = (_nodeRefs = nodeRefs[`concept-${index}`]) === null || _nodeRefs === void 0 ? void 0 : _nodeRefs.current;\n        if (!nodeRef || !positions[`concept-${index}`]) return null;\n        const nodeRect = nodeRef.getBoundingClientRect();\n        const pos = positions[`concept-${index}`];\n\n        // Convert to center points\n        const centerX = mapRect.width / 2;\n        const centerY = mapRect.height / 2;\n        const centralWidth = centralRect.width;\n        const centralHeight = centralRect.height;\n        const conceptWidth = nodeRect.width;\n        const conceptHeight = nodeRect.height;\n\n        // Calculate angle between centers\n        const dx = pos.x;\n        const dy = pos.y;\n        const angle = Math.atan2(dy, dx);\n\n        // Find intersection points with the rectangles\n        let centralIntersectX, centralIntersectY, conceptIntersectX, conceptIntersectY;\n\n        // Central question intersection\n        if (Math.abs(Math.cos(angle)) < 0.001) {\n          // Vertical line\n          centralIntersectX = centerX;\n          centralIntersectY = centerY + Math.sign(dy) * (centralHeight / 2);\n        } else if (Math.abs(Math.sin(angle)) < 0.001) {\n          // Horizontal line\n          centralIntersectX = centerX + Math.sign(dx) * (centralWidth / 2);\n          centralIntersectY = centerY;\n        } else {\n          // Determine if intersection is with vertical or horizontal edge\n          const slope = Math.abs(dy / dx);\n          const centralAspect = centralHeight / centralWidth;\n          if (slope > centralAspect) {\n            // Intersect with top/bottom edge\n            centralIntersectY = centerY + Math.sign(dy) * (centralHeight / 2);\n            centralIntersectX = centerX + (centralIntersectY - centerY) / slope * Math.sign(dx);\n          } else {\n            // Intersect with left/right edge\n            centralIntersectX = centerX + Math.sign(dx) * (centralWidth / 2);\n            centralIntersectY = centerY + slope * (centralIntersectX - centerX) * Math.sign(dy);\n          }\n        }\n\n        // Concept box intersection (opposite angle)\n        const conceptCenterX = centerX + pos.x;\n        const conceptCenterY = centerY + pos.y;\n        if (Math.abs(Math.cos(angle)) < 0.001) {\n          // Vertical line\n          conceptIntersectX = conceptCenterX;\n          conceptIntersectY = conceptCenterY - Math.sign(dy) * (conceptHeight / 2);\n        } else if (Math.abs(Math.sin(angle)) < 0.001) {\n          // Horizontal line\n          conceptIntersectX = conceptCenterX - Math.sign(dx) * (conceptWidth / 2);\n          conceptIntersectY = conceptCenterY;\n        } else {\n          // Determine if intersection is with vertical or horizontal edge\n          const slope = Math.abs(dy / dx);\n          const conceptAspect = conceptHeight / conceptWidth;\n          if (slope > conceptAspect) {\n            // Intersect with top/bottom edge\n            conceptIntersectY = conceptCenterY - Math.sign(dy) * (conceptHeight / 2);\n            conceptIntersectX = conceptCenterX - (conceptCenterY - conceptIntersectY) / slope * Math.sign(dx);\n          } else {\n            // Intersect with left/right edge\n            conceptIntersectX = conceptCenterX - Math.sign(dx) * (conceptWidth / 2);\n            conceptIntersectY = conceptCenterY - slope * (conceptCenterX - conceptIntersectX) * Math.sign(dy);\n          }\n        }\n        return {\n          id: index,\n          points: {\n            centralX: centralIntersectX,\n            centralY: centralIntersectY,\n            conceptX: conceptIntersectX,\n            conceptY: conceptIntersectY\n          },\n          active: activeNodes[index]\n        };\n      });\n      setPaths(newPaths.filter(Boolean));\n    };\n\n    // Call immediately\n    calculatePaths();\n\n    // And set up a window resize listener for responsive updates\n    window.addEventListener('resize', calculatePaths);\n    return () => window.removeEventListener('resize', calculatePaths);\n  }, [positions, nodeRefs, concepts, activeNodes]);\n\n  // Handle starting to drag a concept\n  const handleMouseDown = (e, conceptId) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const rect = e.currentTarget.getBoundingClientRect();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    setDraggedConcept(conceptId);\n    setDragOffset({\n      x: e.clientX - (rect.left - mapRect.left),\n      y: e.clientY - (rect.top - mapRect.top)\n    });\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle dragging a concept\n  const handleMouseMove = e => {\n    if (!draggedConcept) return;\n    e.preventDefault();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    const newX = e.clientX - mapRect.left - dragOffset.x;\n    const newY = e.clientY - mapRect.top - dragOffset.y;\n    setPositions(prev => ({\n      ...prev,\n      [draggedConcept]: {\n        x: newX,\n        y: newY\n      }\n    }));\n  };\n\n  // Handle dropping a concept\n  const handleMouseUp = () => {\n    setDraggedConcept(null);\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Toggle active/inactive state of a concept when clicked\n  const handleConceptClick = index => {\n    if (draggedConcept) return; // Don't toggle if we're dragging\n\n    setActiveNodes(prev => {\n      const newActiveNodes = [...prev];\n      newActiveNodes[index] = !newActiveNodes[index];\n      return newActiveNodes;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mind-map-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mind-map\",\n      ref: mapRef,\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        className: \"connections\",\n        children: paths.map(path => /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: path.points.centralX,\n          y1: path.points.centralY,\n          x2: path.points.conceptX,\n          y2: path.points.conceptY,\n          className: !path.active ? 'connection inactive' : 'connection'\n        }, `line-${path.id}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"central-question\",\n        ref: centralRef,\n        children: centralQuestion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), concepts.map((concept, index) => {\n        const pos = positions[`concept-${index}`] || {\n          x: 0,\n          y: 0\n        };\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `concept ${!activeNodes[index] ? 'inactive' : ''} ${draggedConcept === `concept-${index}` ? 'dragging' : ''}`,\n          style: {\n            transform: `translate(calc(50% + ${pos.x}px), calc(50% + ${pos.y}px))`,\n            cursor: draggedConcept === `concept-${index}` ? 'grabbing' : 'grab'\n          },\n          ref: nodeRefs[`concept-${index}`],\n          onMouseDown: e => handleMouseDown(e, `concept-${index}`),\n          onClick: () => handleConceptClick(index),\n          children: concept\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n};\n_s(MindMap, \"P9zVbiVo7QZsZbFOTTSnJ14CHrI=\");\n_c = MindMap;\nexport default MindMap;\nvar _c;\n$RefreshReg$(_c, \"MindMap\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","MindMap","centralQuestion","concepts","_s","positions","setPositions","draggedConcept","setDraggedConcept","dragOffset","setDragOffset","x","y","activeNodes","setActiveNodes","map","_","i","nodeRefs","setNodeRefs","paths","setPaths","mapRef","centralRef","refs","forEach","index","createRef","Object","keys","length","current","setTimeout","initialPositions","angles","distance","angleRad","Math","PI","cos","sin","angle","calculatePaths","mapRect","getBoundingClientRect","centralRect","newPaths","_nodeRefs","nodeRef","nodeRect","pos","centerX","width","centerY","height","centralWidth","centralHeight","conceptWidth","conceptHeight","dx","dy","atan2","centralIntersectX","centralIntersectY","conceptIntersectX","conceptIntersectY","abs","sign","slope","centralAspect","conceptCenterX","conceptCenterY","conceptAspect","id","points","centralX","centralY","conceptX","conceptY","active","filter","Boolean","window","addEventListener","removeEventListener","handleMouseDown","e","conceptId","preventDefault","stopPropagation","rect","currentTarget","clientX","left","clientY","top","document","handleMouseMove","handleMouseUp","newX","newY","prev","handleConceptClick","newActiveNodes","className","children","ref","path","x1","y1","x2","y2","fileName","_jsxFileName","lineNumber","columnNumber","concept","style","transform","cursor","onMouseDown","onClick","_c","$RefreshReg$"],"sources":["/Users/kei/AIdeator-LLM/frontend/src/components/MindMap.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport './MindMap.css';\n\nconst MindMap = ({ centralQuestion, concepts }) => {\n  const [positions, setPositions] = useState({});\n  const [draggedConcept, setDraggedConcept] = useState(null);\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n  const [activeNodes, setActiveNodes] = useState(concepts.map((_, i) => true));\n  const [nodeRefs, setNodeRefs] = useState({});\n  const [paths, setPaths] = useState([]);\n  const mapRef = useRef(null);\n  const centralRef = useRef(null);\n\n  // Create refs for each concept node\n  useEffect(() => {\n    const refs = {};\n    concepts.forEach((_, index) => {\n      refs[`concept-${index}`] = React.createRef();\n    });\n    setNodeRefs(refs);\n  }, [concepts]);\n\n  // Initialize positions to create a perfectly symmetrical star pattern\n  useEffect(() => {\n    if (Object.keys(positions).length === 0 && mapRef.current) {\n      // Wait for a brief moment to ensure dimensions are available\n      setTimeout(() => {\n        const initialPositions = {};\n        \n        // Position the concepts in a symmetrical star pattern around the central question\n        if (concepts.length === 5) {\n          // For 5 concepts, position in a star\n          const angles = [\n            0,      // Top\n            144,    // Bottom Right\n            288,    // Bottom Left\n            72,     // Top Right\n            216     // Top Left\n          ];\n          \n          // Use the same distance for all concepts to ensure perfect symmetry\n          const distance = 240;\n          \n          // Calculate positions\n          concepts.forEach((_, index) => {\n            const angleRad = (angles[index] - 90) * Math.PI / 180; // -90 to start from top\n            initialPositions[`concept-${index}`] = {\n              x: Math.cos(angleRad) * distance,\n              y: Math.sin(angleRad) * distance\n            };\n          });\n        } else {\n          // For any other number of concepts, distribute evenly in a circle\n          concepts.forEach((_, index) => {\n            const angle = (2 * Math.PI * index) / concepts.length - Math.PI/2; // Start from top\n            initialPositions[`concept-${index}`] = {\n              x: Math.cos(angle) * 240,\n              y: Math.sin(angle) * 240\n            };\n          });\n        }\n        \n        setPositions(initialPositions);\n      }, 100);\n    }\n  }, [concepts, positions, mapRef]);\n\n  // Calculate connection paths when positions change\n  useEffect(() => {\n    if (!centralRef.current || !mapRef.current) return;\n    \n    const calculatePaths = () => {\n      const mapRect = mapRef.current.getBoundingClientRect();\n      const centralRect = centralRef.current.getBoundingClientRect();\n      \n      // Calculate paths between central question and concepts\n      const newPaths = concepts.map((_, index) => {\n        const nodeRef = nodeRefs[`concept-${index}`]?.current;\n        if (!nodeRef || !positions[`concept-${index}`]) return null;\n        \n        const nodeRect = nodeRef.getBoundingClientRect();\n        const pos = positions[`concept-${index}`];\n        \n        // Convert to center points\n        const centerX = mapRect.width / 2;\n        const centerY = mapRect.height / 2;\n        \n        const centralWidth = centralRect.width;\n        const centralHeight = centralRect.height;\n        \n        const conceptWidth = nodeRect.width;\n        const conceptHeight = nodeRect.height;\n        \n        // Calculate angle between centers\n        const dx = pos.x;\n        const dy = pos.y;\n        const angle = Math.atan2(dy, dx);\n        \n        // Find intersection points with the rectangles\n        let centralIntersectX, centralIntersectY, conceptIntersectX, conceptIntersectY;\n        \n        // Central question intersection\n        if (Math.abs(Math.cos(angle)) < 0.001) {\n          // Vertical line\n          centralIntersectX = centerX;\n          centralIntersectY = centerY + Math.sign(dy) * (centralHeight / 2);\n        } else if (Math.abs(Math.sin(angle)) < 0.001) {\n          // Horizontal line\n          centralIntersectX = centerX + Math.sign(dx) * (centralWidth / 2);\n          centralIntersectY = centerY;\n        } else {\n          // Determine if intersection is with vertical or horizontal edge\n          const slope = Math.abs(dy / dx);\n          const centralAspect = centralHeight / centralWidth;\n          \n          if (slope > centralAspect) {\n            // Intersect with top/bottom edge\n            centralIntersectY = centerY + Math.sign(dy) * (centralHeight / 2);\n            centralIntersectX = centerX + (centralIntersectY - centerY) / slope * Math.sign(dx);\n          } else {\n            // Intersect with left/right edge\n            centralIntersectX = centerX + Math.sign(dx) * (centralWidth / 2);\n            centralIntersectY = centerY + slope * (centralIntersectX - centerX) * Math.sign(dy);\n          }\n        }\n        \n        // Concept box intersection (opposite angle)\n        const conceptCenterX = centerX + pos.x;\n        const conceptCenterY = centerY + pos.y;\n        \n        if (Math.abs(Math.cos(angle)) < 0.001) {\n          // Vertical line\n          conceptIntersectX = conceptCenterX;\n          conceptIntersectY = conceptCenterY - Math.sign(dy) * (conceptHeight / 2);\n        } else if (Math.abs(Math.sin(angle)) < 0.001) {\n          // Horizontal line\n          conceptIntersectX = conceptCenterX - Math.sign(dx) * (conceptWidth / 2);\n          conceptIntersectY = conceptCenterY;\n        } else {\n          // Determine if intersection is with vertical or horizontal edge\n          const slope = Math.abs(dy / dx);\n          const conceptAspect = conceptHeight / conceptWidth;\n          \n          if (slope > conceptAspect) {\n            // Intersect with top/bottom edge\n            conceptIntersectY = conceptCenterY - Math.sign(dy) * (conceptHeight / 2);\n            conceptIntersectX = conceptCenterX - (conceptCenterY - conceptIntersectY) / slope * Math.sign(dx);\n          } else {\n            // Intersect with left/right edge\n            conceptIntersectX = conceptCenterX - Math.sign(dx) * (conceptWidth / 2);\n            conceptIntersectY = conceptCenterY - slope * (conceptCenterX - conceptIntersectX) * Math.sign(dy);\n          }\n        }\n        \n        return {\n          id: index,\n          points: {\n            centralX: centralIntersectX,\n            centralY: centralIntersectY,\n            conceptX: conceptIntersectX,\n            conceptY: conceptIntersectY\n          },\n          active: activeNodes[index]\n        };\n      });\n      \n      setPaths(newPaths.filter(Boolean));\n    };\n    \n    // Call immediately\n    calculatePaths();\n    \n    // And set up a window resize listener for responsive updates\n    window.addEventListener('resize', calculatePaths);\n    return () => window.removeEventListener('resize', calculatePaths);\n  }, [positions, nodeRefs, concepts, activeNodes]);\n\n  // Handle starting to drag a concept\n  const handleMouseDown = (e, conceptId) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    const rect = e.currentTarget.getBoundingClientRect();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    \n    setDraggedConcept(conceptId);\n    setDragOffset({\n      x: e.clientX - (rect.left - mapRect.left),\n      y: e.clientY - (rect.top - mapRect.top)\n    });\n    \n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle dragging a concept\n  const handleMouseMove = (e) => {\n    if (!draggedConcept) return;\n    \n    e.preventDefault();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    const newX = e.clientX - mapRect.left - dragOffset.x;\n    const newY = e.clientY - mapRect.top - dragOffset.y;\n\n    setPositions(prev => ({\n      ...prev,\n      [draggedConcept]: { x: newX, y: newY }\n    }));\n  };\n\n  // Handle dropping a concept\n  const handleMouseUp = () => {\n    setDraggedConcept(null);\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Toggle active/inactive state of a concept when clicked\n  const handleConceptClick = (index) => {\n    if (draggedConcept) return; // Don't toggle if we're dragging\n    \n    setActiveNodes(prev => {\n      const newActiveNodes = [...prev];\n      newActiveNodes[index] = !newActiveNodes[index];\n      return newActiveNodes;\n    });\n  };\n\n  return (\n    <div className=\"mind-map-container\">\n      <div \n        className=\"mind-map\" \n        ref={mapRef}\n      >\n        <svg className=\"connections\">\n          {paths.map(path => (\n            <line\n              key={`line-${path.id}`}\n              x1={path.points.centralX}\n              y1={path.points.centralY}\n              x2={path.points.conceptX}\n              y2={path.points.conceptY}\n              className={!path.active ? 'connection inactive' : 'connection'}\n            />\n          ))}\n        </svg>\n        \n        <div className=\"central-question\" ref={centralRef}>\n          {centralQuestion}\n        </div>\n        \n        {concepts.map((concept, index) => {\n          const pos = positions[`concept-${index}`] || { x: 0, y: 0 };\n          return (\n            <div\n              key={index}\n              className={`concept ${!activeNodes[index] ? 'inactive' : ''} ${draggedConcept === `concept-${index}` ? 'dragging' : ''}`}\n              style={{\n                transform: `translate(calc(50% + ${pos.x}px), calc(50% + ${pos.y}px))`,\n                cursor: draggedConcept === `concept-${index}` ? 'grabbing' : 'grab'\n              }}\n              ref={nodeRefs[`concept-${index}`]}\n              onMouseDown={(e) => handleMouseDown(e, `concept-${index}`)}\n              onClick={() => handleConceptClick(index)}\n            >\n              {concept}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default MindMap; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}