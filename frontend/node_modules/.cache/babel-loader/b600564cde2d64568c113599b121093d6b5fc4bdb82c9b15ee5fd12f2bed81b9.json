{"ast":null,"code":"var _jsxFileName = \"/Users/kei/AIdeator-LLM/frontend/src/components/MindMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport './MindMap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MindMap = ({\n  centralQuestion,\n  concepts\n}) => {\n  _s();\n  const [positions, setPositions] = useState({});\n  const [dragging, setDragging] = useState(null);\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [activeNodes, setActiveNodes] = useState(concepts.map(() => true));\n  const [expandedNodeIndex, setExpandedNodeIndex] = useState(null);\n  const [expandedConcepts, setExpandedConcepts] = useState([]);\n  const mindMapRef = useRef(null);\n  const svgRef = useRef(null);\n  const conceptRefs = useRef([]);\n  const centralRef = useRef(null);\n\n  // Initialize refs for concept nodes\n  useEffect(() => {\n    conceptRefs.current = Array(concepts.length).fill().map(() => /*#__PURE__*/React.createRef());\n  }, [concepts.length]);\n\n  // Initialize positions for concepts\n  useEffect(() => {\n    const initialPositions = {};\n    const centerX = window.innerWidth / 2;\n    const centerY = window.innerHeight / 2;\n    const radius = 250; // Distance from center\n\n    concepts.forEach((concept, index) => {\n      // Calculate position based on index to distribute concepts in a circle\n      const angle = index / concepts.length * 2 * Math.PI;\n      initialPositions[concept.id] = {\n        x: centerX + radius * Math.cos(angle),\n        y: centerY + radius * Math.sin(angle)\n      };\n    });\n    setPositions(initialPositions);\n  }, [concepts]);\n\n  // Expand a node with 5 new child nodes\n  const expandNode = index => {\n    console.log(\"Expanding node\", index);\n    setExpandedNodeIndex(index);\n\n    // Create 5 new concept nodes with titles and descriptions\n    const newConcepts = [{\n      title: \"Fear of letting others down\",\n      description: \"Social and professional pressures can make people fear judgment from peers.\"\n    }, {\n      title: \"Concept B\",\n      description: \"A detailed description of concept B and its implications.\"\n    }, {\n      title: \"Concept C\",\n      description: \"A detailed description of concept C and its implications.\"\n    }, {\n      title: \"Concept D\",\n      description: \"A detailed description of concept D and its implications.\"\n    }, {\n      title: \"Concept E\",\n      description: \"A detailed description of concept E and its implications.\"\n    }];\n    setExpandedConcepts(newConcepts);\n\n    // Create positions for the new nodes following the parent's side\n    const parentPos = positions[`concept-${index}`];\n    const newPositions = {\n      ...positions\n    };\n\n    // Determine which side the parent node is on relative to the center\n    // This uses the standard layout: top, left, right, bottom-left, bottom-right\n    let direction;\n    if (index === 0) {\n      // Top node - place children above it\n      direction = 'top';\n    } else if (index === 1) {\n      // Left node - place children to the left\n      direction = 'left';\n    } else if (index === 2) {\n      // Right node - place children to the right\n      direction = 'right';\n    } else if (index === 3) {\n      // Bottom Left node - place children below and to the left\n      direction = 'bottom-left';\n    } else if (index === 4) {\n      // Bottom Right node - place children below and to the right\n      direction = 'bottom-right';\n    }\n    console.log(\"Direction for expanded nodes:\", direction);\n\n    // Position nodes based on the parent's position/direction\n    switch (direction) {\n      case 'top':\n        // Arrange horizontally above the parent\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + xOffset,\n            y: parentPos.y - 150\n          };\n        }\n        break;\n      case 'left':\n        // Arrange vertically to the left - increase spacing\n        for (let i = 0; i < newConcepts.length; i++) {\n          const yOffset = (i - 2) * 100; // -200, -100, 0, 100, 200\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x - 250,\n            y: parentPos.y + yOffset\n          };\n        }\n        break;\n      case 'right':\n        // Arrange vertically to the right - increase spacing\n        for (let i = 0; i < newConcepts.length; i++) {\n          const yOffset = (i - 2) * 100; // -200, -100, 0, 100, 200\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + 250,\n            y: parentPos.y + yOffset\n          };\n        }\n        break;\n      case 'bottom-left':\n        // Arrange horizontally below and to the left\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x - 100 + xOffset,\n            y: parentPos.y + 150\n          };\n        }\n        break;\n      case 'bottom-right':\n        // Arrange horizontally below and to the right\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + 100 + xOffset,\n            y: parentPos.y + 150\n          };\n        }\n        break;\n    }\n    setPositions(newPositions);\n  };\n\n  // Toggle node active state\n  const toggleNodeActive = index => {\n    // Count how many inactive nodes we currently have\n    const inactiveCount = activeNodes.filter(active => !active).length;\n\n    // If this node is already inactive, we can always make it active again\n    if (!activeNodes[index]) {\n      setActiveNodes(prev => {\n        const newActive = [...prev];\n        newActive[index] = true;\n        return newActive;\n      });\n      // If we're activating a node, clear expansion\n      if (expandedNodeIndex !== null) {\n        setExpandedNodeIndex(null);\n        setExpandedConcepts([]);\n      }\n      return;\n    }\n\n    // If this would be the 5th inactive node (all inactive), don't allow it\n    if (inactiveCount === 4) {\n      // Find the only remaining active node (which must be this one)\n      const activeNodeIndices = activeNodes.map((active, i) => active ? i : -1).filter(i => i >= 0);\n      if (activeNodeIndices.length === 1 && activeNodeIndices[0] === index) {\n        console.log(\"Can't deactivate the last node\");\n        return;\n      }\n    }\n\n    // Make this node inactive\n    setActiveNodes(prev => {\n      const newActive = [...prev];\n      newActive[index] = false;\n      return newActive;\n    });\n\n    // Check if we now have 4 inactive nodes (1 active)\n    const newInactiveCount = inactiveCount + 1;\n    if (newInactiveCount === 4) {\n      // Find the one remaining active node\n      const remainingActiveIndex = activeNodes.findIndex((active, i) => active && i !== index);\n      if (remainingActiveIndex !== -1) {\n        // Expand the remaining active node\n        expandNode(remainingActiveIndex);\n      }\n    }\n  };\n\n  // Handle mouse down on a concept\n  const handleMouseDown = useCallback((e, conceptId) => {\n    e.stopPropagation();\n    if (!mindMapRef.current) return;\n    const {\n      clientX,\n      clientY\n    } = e;\n    const conceptElem = e.currentTarget;\n    const rect = conceptElem.getBoundingClientRect();\n\n    // Calculate offset from the mouse position to the concept center\n    const offsetX = clientX - (rect.left + rect.width / 2);\n    const offsetY = clientY - (rect.top + rect.height / 2);\n    setDragging(conceptId);\n    setDragOffset({\n      x: offsetX,\n      y: offsetY\n    });\n\n    // Add event listeners to the document for tracking movement and release\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  }, []);\n\n  // Handle mouse move while dragging\n  const handleMouseMove = useCallback(e => {\n    e.stopPropagation();\n    if (!dragging || !mindMapRef.current) return;\n    const {\n      clientX,\n      clientY\n    } = e;\n    const mindMapRect = mindMapRef.current.getBoundingClientRect();\n\n    // Calculate the new position relative to the mind map\n    const newX = clientX - mindMapRect.left - dragOffset.x;\n    const newY = clientY - mindMapRect.top - dragOffset.y;\n    setPositions(prev => ({\n      ...prev,\n      [dragging]: {\n        x: newX,\n        y: newY\n      }\n    }));\n  }, [dragging, dragOffset]);\n\n  // Handle mouse up to stop dragging\n  const handleMouseUp = useCallback(e => {\n    e.stopPropagation();\n    setDragging(null);\n\n    // Remove event listeners\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  }, [handleMouseMove]);\n\n  // Clean up event listeners when component unmounts\n  useEffect(() => {\n    return () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [handleMouseMove, handleMouseUp]);\n\n  // Render connections between central question and concepts\n  const renderConnections = () => {\n    if (!svgRef.current) return null;\n    const centerX = window.innerWidth / 2;\n    const centerY = window.innerHeight / 2;\n    return concepts.map(concept => {\n      const conceptPos = positions[concept.id];\n      if (!conceptPos) return null;\n      return /*#__PURE__*/_jsxDEV(\"line\", {\n        className: \"connection\",\n        x1: centerX,\n        y1: centerY,\n        x2: conceptPos.x,\n        y2: conceptPos.y\n      }, `connection-${concept.id}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  // Use useEffect to ensure connections are updated when node dimensions change\n  useEffect(() => {\n    // Create a resize observer to detect size changes in nodes\n    const resizeObserver = new ResizeObserver(() => {\n      // Force a re-render to update connections\n      setPositions({\n        ...positions\n      });\n    });\n\n    // Observe central node\n    if (centralRef.current) {\n      resizeObserver.observe(centralRef.current);\n    }\n\n    // Observe all concept nodes\n    conceptRefs.current.forEach(ref => {\n      if (ref.current) {\n        resizeObserver.observe(ref.current);\n      }\n    });\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, [conceptRefs.current.length, centralRef.current, expandedNodeIndex]);\n\n  // Console log for debugging\n  console.log(\"Active nodes:\", activeNodes);\n  console.log(\"Expanded node index:\", expandedNodeIndex);\n  console.log(\"Expanded concepts:\", expandedConcepts);\n  console.log(\"Positions:\", positions);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mind-map-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mind-map\",\n      ref: mindMapRef,\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        className: \"connections\",\n        ref: svgRef,\n        children: renderConnections()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"central-question\",\n        ref: centralRef,\n        children: centralQuestion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this), concepts.map((concept, index) => {\n        const pos = positions[`concept-${index}`] || {\n          x: 0,\n          y: 0\n        };\n        const isDragging = dragging === `concept-${index}`;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `concept ${!activeNodes[index] ? 'inactive' : ''} ${isDragging ? 'dragging' : ''} ${index === expandedNodeIndex ? 'expanded' : ''}`,\n          style: {\n            left: `${pos.x}px`,\n            top: `${pos.y}px`,\n            cursor: isDragging ? 'grabbing' : 'grab'\n          },\n          ref: conceptRefs.current[index],\n          onMouseDown: e => handleMouseDown(e, `concept-${index}`),\n          onClick: e => {\n            e.stopPropagation();\n            if (!dragging) {\n              toggleNodeActive(index);\n            }\n          },\n          children: concept\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 13\n        }, this);\n      }), expandedNodeIndex !== null && expandedConcepts.map((concept, index) => {\n        const pos = positions[`expanded-${expandedNodeIndex}-${index}`];\n        if (!pos) return null;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"concept expanded-child\",\n          \"data-expanded-index\": `${expandedNodeIndex}-${index}`,\n          style: {\n            left: `${pos.x}px`,\n            top: `${pos.y}px`,\n            border: '2px solid #000'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"concept-title\",\n            children: concept.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 15\n          }, this), concept.description && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"concept-description\",\n            children: concept.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"concept-icon\",\n            children: /*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              viewBox: \"0 0 24 24\",\n              width: \"24\",\n              height: \"24\",\n              children: [/*#__PURE__*/_jsxDEV(\"path\", {\n                fill: \"none\",\n                d: \"M0 0h24v24H0z\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                d: \"M9.973 18h4.054c.132-1.202.745-2.194 1.74-3.277.113-.122.832-.867.917-.973a6 6 0 1 0-9.37-.002c.086.107.807.853.918.974.996 1.084 1.609 2.076 1.741 3.278zM14 20h-4v1h4v-1zm-8.246-5a8 8 0 1 1 12.49.002C17.624 15.774 16 17 16 18.5V21a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2v-2.5C8 17 6.375 15.774 5.754 15z\",\n                fill: \"rgba(0,0,0,0.6)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 15\n          }, this)]\n        }, `expanded-${expandedNodeIndex}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 321,\n    columnNumber: 5\n  }, this);\n};\n_s(MindMap, \"DNDuddkHPnQJLdFvVpVdDhuFYIM=\");\n_c = MindMap;\nexport default MindMap;\nvar _c;\n$RefreshReg$(_c, \"MindMap\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","jsxDEV","_jsxDEV","MindMap","centralQuestion","concepts","_s","positions","setPositions","dragging","setDragging","dragOffset","setDragOffset","x","y","activeNodes","setActiveNodes","map","expandedNodeIndex","setExpandedNodeIndex","expandedConcepts","setExpandedConcepts","mindMapRef","svgRef","conceptRefs","centralRef","current","Array","length","fill","createRef","initialPositions","centerX","window","innerWidth","centerY","innerHeight","radius","forEach","concept","index","angle","Math","PI","id","cos","sin","expandNode","console","log","newConcepts","title","description","parentPos","newPositions","direction","i","xOffset","yOffset","toggleNodeActive","inactiveCount","filter","active","prev","newActive","activeNodeIndices","newInactiveCount","remainingActiveIndex","findIndex","handleMouseDown","e","conceptId","stopPropagation","clientX","clientY","conceptElem","currentTarget","rect","getBoundingClientRect","offsetX","left","width","offsetY","top","height","document","addEventListener","handleMouseMove","handleMouseUp","mindMapRect","newX","newY","removeEventListener","renderConnections","conceptPos","className","x1","y1","x2","y2","fileName","_jsxFileName","lineNumber","columnNumber","resizeObserver","ResizeObserver","observe","ref","disconnect","children","pos","isDragging","style","cursor","onMouseDown","onClick","border","xmlns","viewBox","d","_c","$RefreshReg$"],"sources":["/Users/kei/AIdeator-LLM/frontend/src/components/MindMap.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport './MindMap.css';\n\nconst MindMap = ({ centralQuestion, concepts }) => {\n  const [positions, setPositions] = useState({});\n  const [dragging, setDragging] = useState(null);\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n  const [activeNodes, setActiveNodes] = useState(concepts.map(() => true));\n  const [expandedNodeIndex, setExpandedNodeIndex] = useState(null);\n  const [expandedConcepts, setExpandedConcepts] = useState([]);\n  const mindMapRef = useRef(null);\n  const svgRef = useRef(null);\n  const conceptRefs = useRef([]);\n  const centralRef = useRef(null);\n\n  // Initialize refs for concept nodes\n  useEffect(() => {\n    conceptRefs.current = Array(concepts.length).fill().map(() => React.createRef());\n  }, [concepts.length]);\n\n  // Initialize positions for concepts\n  useEffect(() => {\n    const initialPositions = {};\n    const centerX = window.innerWidth / 2;\n    const centerY = window.innerHeight / 2;\n    const radius = 250; // Distance from center\n\n    concepts.forEach((concept, index) => {\n      // Calculate position based on index to distribute concepts in a circle\n      const angle = (index / concepts.length) * 2 * Math.PI;\n      initialPositions[concept.id] = {\n        x: centerX + radius * Math.cos(angle),\n        y: centerY + radius * Math.sin(angle)\n      };\n    });\n\n    setPositions(initialPositions);\n  }, [concepts]);\n\n  // Expand a node with 5 new child nodes\n  const expandNode = (index) => {\n    console.log(\"Expanding node\", index);\n    setExpandedNodeIndex(index);\n    \n    // Create 5 new concept nodes with titles and descriptions\n    const newConcepts = [\n      {\n        title: \"Fear of letting others down\",\n        description: \"Social and professional pressures can make people fear judgment from peers.\"\n      },\n      {\n        title: \"Concept B\",\n        description: \"A detailed description of concept B and its implications.\"\n      },\n      {\n        title: \"Concept C\",\n        description: \"A detailed description of concept C and its implications.\"\n      },\n      {\n        title: \"Concept D\",\n        description: \"A detailed description of concept D and its implications.\"\n      },\n      {\n        title: \"Concept E\",\n        description: \"A detailed description of concept E and its implications.\"\n      }\n    ];\n    \n    setExpandedConcepts(newConcepts);\n    \n    // Create positions for the new nodes following the parent's side\n    const parentPos = positions[`concept-${index}`];\n    const newPositions = { ...positions };\n    \n    // Determine which side the parent node is on relative to the center\n    // This uses the standard layout: top, left, right, bottom-left, bottom-right\n    let direction;\n    \n    if (index === 0) {\n      // Top node - place children above it\n      direction = 'top';\n    } else if (index === 1) {\n      // Left node - place children to the left\n      direction = 'left';\n    } else if (index === 2) {\n      // Right node - place children to the right\n      direction = 'right';\n    } else if (index === 3) {\n      // Bottom Left node - place children below and to the left\n      direction = 'bottom-left';\n    } else if (index === 4) {\n      // Bottom Right node - place children below and to the right\n      direction = 'bottom-right';\n    }\n    \n    console.log(\"Direction for expanded nodes:\", direction);\n    \n    // Position nodes based on the parent's position/direction\n    switch (direction) {\n      case 'top':\n        // Arrange horizontally above the parent\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + xOffset,\n            y: parentPos.y - 150\n          };\n        }\n        break;\n        \n      case 'left':\n        // Arrange vertically to the left - increase spacing\n        for (let i = 0; i < newConcepts.length; i++) {\n          const yOffset = (i - 2) * 100; // -200, -100, 0, 100, 200\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x - 250,\n            y: parentPos.y + yOffset\n          };\n        }\n        break;\n        \n      case 'right':\n        // Arrange vertically to the right - increase spacing\n        for (let i = 0; i < newConcepts.length; i++) {\n          const yOffset = (i - 2) * 100; // -200, -100, 0, 100, 200\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + 250,\n            y: parentPos.y + yOffset\n          };\n        }\n        break;\n        \n      case 'bottom-left':\n        // Arrange horizontally below and to the left\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x - 100 + xOffset,\n            y: parentPos.y + 150\n          };\n        }\n        break;\n        \n      case 'bottom-right':\n        // Arrange horizontally below and to the right\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + 100 + xOffset,\n            y: parentPos.y + 150\n          };\n        }\n        break;\n    }\n    \n    setPositions(newPositions);\n  };\n\n  // Toggle node active state\n  const toggleNodeActive = (index) => {\n    // Count how many inactive nodes we currently have\n    const inactiveCount = activeNodes.filter(active => !active).length;\n    \n    // If this node is already inactive, we can always make it active again\n    if (!activeNodes[index]) {\n      setActiveNodes(prev => {\n        const newActive = [...prev];\n        newActive[index] = true;\n        return newActive;\n      });\n      // If we're activating a node, clear expansion\n      if (expandedNodeIndex !== null) {\n        setExpandedNodeIndex(null);\n        setExpandedConcepts([]);\n      }\n      return;\n    }\n    \n    // If this would be the 5th inactive node (all inactive), don't allow it\n    if (inactiveCount === 4) {\n      // Find the only remaining active node (which must be this one)\n      const activeNodeIndices = activeNodes.map((active, i) => active ? i : -1).filter(i => i >= 0);\n      if (activeNodeIndices.length === 1 && activeNodeIndices[0] === index) {\n        console.log(\"Can't deactivate the last node\");\n        return;\n      }\n    }\n    \n    // Make this node inactive\n    setActiveNodes(prev => {\n      const newActive = [...prev];\n      newActive[index] = false;\n      return newActive;\n    });\n    \n    // Check if we now have 4 inactive nodes (1 active)\n    const newInactiveCount = inactiveCount + 1;\n    if (newInactiveCount === 4) {\n      // Find the one remaining active node\n      const remainingActiveIndex = activeNodes.findIndex((active, i) => active && i !== index);\n      if (remainingActiveIndex !== -1) {\n        // Expand the remaining active node\n        expandNode(remainingActiveIndex);\n      }\n    }\n  };\n  \n  // Handle mouse down on a concept\n  const handleMouseDown = useCallback((e, conceptId) => {\n    e.stopPropagation();\n    if (!mindMapRef.current) return;\n\n    const { clientX, clientY } = e;\n    const conceptElem = e.currentTarget;\n    const rect = conceptElem.getBoundingClientRect();\n    \n    // Calculate offset from the mouse position to the concept center\n    const offsetX = clientX - (rect.left + rect.width / 2);\n    const offsetY = clientY - (rect.top + rect.height / 2);\n    \n    setDragging(conceptId);\n    setDragOffset({ x: offsetX, y: offsetY });\n    \n    // Add event listeners to the document for tracking movement and release\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  }, []);\n\n  // Handle mouse move while dragging\n  const handleMouseMove = useCallback((e) => {\n    e.stopPropagation();\n    if (!dragging || !mindMapRef.current) return;\n\n    const { clientX, clientY } = e;\n    const mindMapRect = mindMapRef.current.getBoundingClientRect();\n    \n    // Calculate the new position relative to the mind map\n    const newX = clientX - mindMapRect.left - dragOffset.x;\n    const newY = clientY - mindMapRect.top - dragOffset.y;\n    \n    setPositions(prev => ({\n      ...prev,\n      [dragging]: { x: newX, y: newY }\n    }));\n  }, [dragging, dragOffset]);\n\n  // Handle mouse up to stop dragging\n  const handleMouseUp = useCallback((e) => {\n    e.stopPropagation();\n    setDragging(null);\n    \n    // Remove event listeners\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  }, [handleMouseMove]);\n\n  // Clean up event listeners when component unmounts\n  useEffect(() => {\n    return () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [handleMouseMove, handleMouseUp]);\n\n  // Render connections between central question and concepts\n  const renderConnections = () => {\n    if (!svgRef.current) return null;\n    \n    const centerX = window.innerWidth / 2;\n    const centerY = window.innerHeight / 2;\n    \n    return concepts.map(concept => {\n      const conceptPos = positions[concept.id];\n      if (!conceptPos) return null;\n      \n      return (\n        <line\n          key={`connection-${concept.id}`}\n          className=\"connection\"\n          x1={centerX}\n          y1={centerY}\n          x2={conceptPos.x}\n          y2={conceptPos.y}\n        />\n      );\n    });\n  };\n\n  // Use useEffect to ensure connections are updated when node dimensions change\n  useEffect(() => {\n    // Create a resize observer to detect size changes in nodes\n    const resizeObserver = new ResizeObserver(() => {\n      // Force a re-render to update connections\n      setPositions({...positions});\n    });\n    \n    // Observe central node\n    if (centralRef.current) {\n      resizeObserver.observe(centralRef.current);\n    }\n    \n    // Observe all concept nodes\n    conceptRefs.current.forEach(ref => {\n      if (ref.current) {\n        resizeObserver.observe(ref.current);\n      }\n    });\n    \n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, [conceptRefs.current.length, centralRef.current, expandedNodeIndex]);\n\n  // Console log for debugging\n  console.log(\"Active nodes:\", activeNodes);\n  console.log(\"Expanded node index:\", expandedNodeIndex);\n  console.log(\"Expanded concepts:\", expandedConcepts);\n  console.log(\"Positions:\", positions);\n\n  return (\n    <div className=\"mind-map-container\">\n      <div className=\"mind-map\" ref={mindMapRef}>\n        <svg className=\"connections\" ref={svgRef}>\n          {renderConnections()}\n        </svg>\n        \n        <div className=\"central-question\" ref={centralRef}>\n          {centralQuestion}\n        </div>\n        \n        {concepts.map((concept, index) => {\n          const pos = positions[`concept-${index}`] || { x: 0, y: 0 };\n          const isDragging = dragging === `concept-${index}`;\n          \n          return (\n            <div\n              key={index}\n              className={`concept ${!activeNodes[index] ? 'inactive' : ''} ${isDragging ? 'dragging' : ''} ${index === expandedNodeIndex ? 'expanded' : ''}`}\n              style={{\n                left: `${pos.x}px`,\n                top: `${pos.y}px`,\n                cursor: isDragging ? 'grabbing' : 'grab'\n              }}\n              ref={conceptRefs.current[index]}\n              onMouseDown={(e) => handleMouseDown(e, `concept-${index}`)}\n              onClick={(e) => {\n                e.stopPropagation();\n                if (!dragging) {\n                  toggleNodeActive(index);\n                }\n              }}\n            >\n              {concept}\n            </div>\n          );\n        })}\n        \n        {/* Expanded Concept Nodes */}\n        {expandedNodeIndex !== null && expandedConcepts.map((concept, index) => {\n          const pos = positions[`expanded-${expandedNodeIndex}-${index}`];\n          if (!pos) return null;\n          \n          return (\n            <div\n              key={`expanded-${expandedNodeIndex}-${index}`}\n              className=\"concept expanded-child\"\n              data-expanded-index={`${expandedNodeIndex}-${index}`}\n              style={{\n                left: `${pos.x}px`,\n                top: `${pos.y}px`,\n                border: '2px solid #000'\n              }}\n            >\n              <div className=\"concept-title\">{concept.title}</div>\n              {concept.description && (\n                <div className=\"concept-description\">{concept.description}</div>\n              )}\n              <div className=\"concept-icon\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\n                  <path fill=\"none\" d=\"M0 0h24v24H0z\"/>\n                  <path d=\"M9.973 18h4.054c.132-1.202.745-2.194 1.74-3.277.113-.122.832-.867.917-.973a6 6 0 1 0-9.37-.002c.086.107.807.853.918.974.996 1.084 1.609 2.076 1.741 3.278zM14 20h-4v1h4v-1zm-8.246-5a8 8 0 1 1 12.49.002C17.624 15.774 16 17 16 18.5V21a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2v-2.5C8 17 6.375 15.774 5.754 15z\" fill=\"rgba(0,0,0,0.6)\"/>\n                </svg>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default MindMap; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}