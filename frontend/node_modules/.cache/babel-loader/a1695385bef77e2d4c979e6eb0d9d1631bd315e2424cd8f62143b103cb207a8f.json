{"ast":null,"code":"var _jsxFileName = \"/Users/kei/AIdeator-LLM/frontend/src/components/MindMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './MindMap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MindMap = ({\n  centralQuestion,\n  concepts\n}) => {\n  _s();\n  const [positions, setPositions] = useState({});\n  const [dragging, setDragging] = useState(null);\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const mindMapRef = useRef(null);\n  const svgRef = useRef(null);\n  const conceptRefs = useRef({});\n  const centralQuestionRef = useRef(null);\n\n  // Initialize positions in a circle around the central question\n  useEffect(() => {\n    const initialPositions = {};\n    const radius = 250;\n    concepts.forEach((concept, index) => {\n      // Start from the top (270 degrees) and go clockwise\n      const angle = index / concepts.length * Math.PI * 2 - Math.PI / 2;\n      initialPositions[concept.id] = {\n        x: Math.cos(angle) * radius,\n        y: Math.sin(angle) * radius\n      };\n    });\n    setPositions(initialPositions);\n  }, [concepts]);\n  const handleMouseDown = (e, id) => {\n    e.stopPropagation();\n    const rect = mindMapRef.current.getBoundingClientRect();\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n    setDragging(id);\n    setDragOffset({\n      x: e.clientX - (centerX + positions[id].x),\n      y: e.clientY - (centerY + positions[id].y)\n    });\n  };\n  const handleMouseMove = e => {\n    if (!dragging) return;\n    e.preventDefault();\n    e.stopPropagation();\n    const rect = mindMapRef.current.getBoundingClientRect();\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n    setPositions(prev => ({\n      ...prev,\n      [dragging]: {\n        x: e.clientX - centerX - dragOffset.x,\n        y: e.clientY - centerY - dragOffset.y\n      }\n    }));\n  };\n  const handleMouseUp = e => {\n    if (e) e.stopPropagation();\n    setDragging(null);\n  };\n\n  // Add and remove global event listeners\n  useEffect(() => {\n    if (dragging) {\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('mouseup', handleMouseUp);\n    }\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [dragging, dragOffset]);\n\n  // Render connections between central question and concepts\n  const renderConnections = () => {\n    if (!svgRef.current || !centralQuestionRef.current) return null;\n    const mindMapRect = mindMapRef.current.getBoundingClientRect();\n    const centralRect = centralQuestionRef.current.getBoundingClientRect();\n\n    // Calculate the center of the SVG\n    const svgCenterX = mindMapRect.width / 2;\n    const svgCenterY = mindMapRect.height / 2;\n\n    // Calculate the central question's dimensions\n    const centralWidth = centralRect.width;\n    const centralHeight = centralRect.height;\n    return concepts.map(concept => {\n      if (!positions[concept.id] || !conceptRefs.current[concept.id]) return null;\n\n      // Get the concept's current position\n      const pos = positions[concept.id];\n      const conceptEl = conceptRefs.current[concept.id];\n      const conceptRect = conceptEl.getBoundingClientRect();\n\n      // Calculate connection points based on position relative to center\n      const dx = pos.x;\n      const dy = pos.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      const normalizedDx = dx / distance;\n      const normalizedDy = dy / distance;\n\n      // Starting point near the edge of the central question\n      const startX = svgCenterX + normalizedDx * (centralWidth / 2 - 5);\n      const startY = svgCenterY + normalizedDy * (centralHeight / 2 - 5);\n\n      // Ending point at the concept\n      const conceptWidth = conceptRect.width;\n      const conceptHeight = conceptRect.height;\n\n      // Calculate the connection endpoint (just short of the concept edge)\n      const endX = svgCenterX + pos.x - normalizedDx * (conceptWidth / 2 - 5);\n      const endY = svgCenterY + pos.y - normalizedDy * (conceptHeight / 2 - 5);\n      return /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: startX,\n        y1: startY,\n        x2: endX,\n        y2: endY,\n        className: \"connection\",\n        style: {\n          opacity: dragging === concept.id ? 0.7 : 1\n        }\n      }, `connection-${concept.id}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mind-map-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mind-map\",\n      ref: mindMapRef,\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        className: \"connections\",\n        ref: svgRef,\n        children: renderConnections()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"central-question\",\n        ref: centralQuestionRef,\n        children: centralQuestion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), concepts.map(concept => {\n        if (!positions[concept.id]) return null;\n        const {\n          x,\n          y\n        } = positions[concept.id];\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: el => conceptRefs.current[concept.id] = el,\n          className: `concept ${dragging === concept.id ? 'dragging' : ''}`,\n          style: {\n            transform: `translate(-50%, -50%)`,\n            left: `calc(50% + ${x}px)`,\n            top: `calc(50% + ${y}px)`\n          },\n          onMouseDown: e => handleMouseDown(e, concept.id),\n          children: concept.text\n        }, concept.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n_s(MindMap, \"bHOpQPrN2JU9+UgX0ls23EXswqI=\");\n_c = MindMap;\nexport default MindMap;\nvar _c;\n$RefreshReg$(_c, \"MindMap\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","MindMap","centralQuestion","concepts","_s","positions","setPositions","dragging","setDragging","dragOffset","setDragOffset","x","y","mindMapRef","svgRef","conceptRefs","centralQuestionRef","initialPositions","radius","forEach","concept","index","angle","length","Math","PI","id","cos","sin","handleMouseDown","e","stopPropagation","rect","current","getBoundingClientRect","centerX","width","centerY","height","clientX","clientY","handleMouseMove","preventDefault","prev","handleMouseUp","window","addEventListener","removeEventListener","renderConnections","mindMapRect","centralRect","svgCenterX","svgCenterY","centralWidth","centralHeight","map","pos","conceptEl","conceptRect","dx","dy","distance","sqrt","normalizedDx","normalizedDy","startX","startY","conceptWidth","conceptHeight","endX","endY","x1","y1","x2","y2","className","style","opacity","fileName","_jsxFileName","lineNumber","columnNumber","children","ref","el","transform","left","top","onMouseDown","text","_c","$RefreshReg$"],"sources":["/Users/kei/AIdeator-LLM/frontend/src/components/MindMap.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './MindMap.css';\n\nconst MindMap = ({ centralQuestion, concepts }) => {\n  const [positions, setPositions] = useState({});\n  const [dragging, setDragging] = useState(null);\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n  const mindMapRef = useRef(null);\n  const svgRef = useRef(null);\n  const conceptRefs = useRef({});\n  const centralQuestionRef = useRef(null);\n\n  // Initialize positions in a circle around the central question\n  useEffect(() => {\n    const initialPositions = {};\n    const radius = 250; \n    \n    concepts.forEach((concept, index) => {\n      // Start from the top (270 degrees) and go clockwise\n      const angle = (index / concepts.length) * Math.PI * 2 - Math.PI / 2;\n      initialPositions[concept.id] = {\n        x: Math.cos(angle) * radius,\n        y: Math.sin(angle) * radius\n      };\n    });\n    \n    setPositions(initialPositions);\n  }, [concepts]);\n\n  const handleMouseDown = (e, id) => {\n    e.stopPropagation();\n    \n    const rect = mindMapRef.current.getBoundingClientRect();\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n    \n    setDragging(id);\n    setDragOffset({\n      x: e.clientX - (centerX + positions[id].x),\n      y: e.clientY - (centerY + positions[id].y)\n    });\n  };\n\n  const handleMouseMove = (e) => {\n    if (!dragging) return;\n    \n    e.preventDefault();\n    e.stopPropagation();\n    \n    const rect = mindMapRef.current.getBoundingClientRect();\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n    \n    setPositions(prev => ({\n      ...prev,\n      [dragging]: {\n        x: e.clientX - centerX - dragOffset.x,\n        y: e.clientY - centerY - dragOffset.y\n      }\n    }));\n  };\n\n  const handleMouseUp = (e) => {\n    if (e) e.stopPropagation();\n    setDragging(null);\n  };\n\n  // Add and remove global event listeners\n  useEffect(() => {\n    if (dragging) {\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('mouseup', handleMouseUp);\n    }\n    \n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [dragging, dragOffset]);\n\n  // Render connections between central question and concepts\n  const renderConnections = () => {\n    if (!svgRef.current || !centralQuestionRef.current) return null;\n    \n    const mindMapRect = mindMapRef.current.getBoundingClientRect();\n    const centralRect = centralQuestionRef.current.getBoundingClientRect();\n    \n    // Calculate the center of the SVG\n    const svgCenterX = mindMapRect.width / 2;\n    const svgCenterY = mindMapRect.height / 2;\n\n    // Calculate the central question's dimensions\n    const centralWidth = centralRect.width;\n    const centralHeight = centralRect.height;\n    \n    return concepts.map((concept) => {\n      if (!positions[concept.id] || !conceptRefs.current[concept.id]) return null;\n      \n      // Get the concept's current position\n      const pos = positions[concept.id];\n      const conceptEl = conceptRefs.current[concept.id];\n      const conceptRect = conceptEl.getBoundingClientRect();\n      \n      // Calculate connection points based on position relative to center\n      const dx = pos.x;\n      const dy = pos.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      const normalizedDx = dx / distance;\n      const normalizedDy = dy / distance;\n      \n      // Starting point near the edge of the central question\n      const startX = svgCenterX + normalizedDx * (centralWidth / 2 - 5);\n      const startY = svgCenterY + normalizedDy * (centralHeight / 2 - 5);\n      \n      // Ending point at the concept\n      const conceptWidth = conceptRect.width;\n      const conceptHeight = conceptRect.height;\n      \n      // Calculate the connection endpoint (just short of the concept edge)\n      const endX = svgCenterX + pos.x - normalizedDx * (conceptWidth / 2 - 5);\n      const endY = svgCenterY + pos.y - normalizedDy * (conceptHeight / 2 - 5);\n      \n      return (\n        <line\n          key={`connection-${concept.id}`}\n          x1={startX}\n          y1={startY}\n          x2={endX}\n          y2={endY}\n          className=\"connection\"\n          style={{ opacity: dragging === concept.id ? 0.7 : 1 }}\n        />\n      );\n    });\n  };\n\n  return (\n    <div className=\"mind-map-container\">\n      <div className=\"mind-map\" ref={mindMapRef}>\n        <svg className=\"connections\" ref={svgRef}>\n          {renderConnections()}\n        </svg>\n        \n        <div className=\"central-question\" ref={centralQuestionRef}>\n          {centralQuestion}\n        </div>\n        \n        {concepts.map((concept) => {\n          if (!positions[concept.id]) return null;\n          \n          const { x, y } = positions[concept.id];\n          \n          return (\n            <div\n              key={concept.id}\n              ref={el => conceptRefs.current[concept.id] = el}\n              className={`concept ${dragging === concept.id ? 'dragging' : ''}`}\n              style={{\n                transform: `translate(-50%, -50%)`,\n                left: `calc(50% + ${x}px)`,\n                top: `calc(50% + ${y}px)`\n              }}\n              onMouseDown={(e) => handleMouseDown(e, concept.id)}\n            >\n              {concept.text}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default MindMap; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}