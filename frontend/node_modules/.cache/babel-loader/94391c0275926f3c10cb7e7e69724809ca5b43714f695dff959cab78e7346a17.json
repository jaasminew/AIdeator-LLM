{"ast":null,"code":"var _jsxFileName = \"/Users/kei/AIdeator-LLM/frontend/src/components/MindMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport './MindMap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MindMap = ({\n  centralQuestion,\n  concepts\n}) => {\n  _s();\n  const [positions, setPositions] = useState({});\n  const [dragging, setDragging] = useState(null);\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [isDragging, setIsDragging] = useState(false);\n  const [startPos, setStartPos] = useState({\n    x: 0,\n    y: 0\n  });\n  const mapRef = useRef(null);\n  const centralRef = useRef(null);\n\n  // Initialize positions if not set\n  useEffect(() => {\n    if (Object.keys(positions).length === 0) {\n      const initialPositions = {};\n      concepts.forEach((_, index) => {\n        const angle = 2 * Math.PI * index / concepts.length;\n        initialPositions[`concept-${index}`] = {\n          x: Math.cos(angle) * 200,\n          y: Math.sin(angle) * 200\n        };\n      });\n      setPositions(initialPositions);\n    }\n  }, [concepts, positions]);\n  const handleMouseDown = (e, conceptId) => {\n    e.stopPropagation();\n    const rect = e.currentTarget.getBoundingClientRect();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    setDragging(conceptId);\n    setStartPos({\n      x: e.clientX,\n      y: e.clientY\n    });\n    setDragOffset({\n      x: e.clientX - (rect.left - mapRect.left),\n      y: e.clientY - (rect.top - mapRect.top)\n    });\n  };\n  const handleMouseMove = useCallback(e => {\n    if (!dragging) return;\n\n    // Check if we've moved enough to start dragging\n    if (!isDragging) {\n      const moveX = Math.abs(e.clientX - startPos.x);\n      const moveY = Math.abs(e.clientY - startPos.y);\n      if (moveX < 5 && moveY < 5) return; // Only start dragging after moving 5px\n      setIsDragging(true);\n    }\n    e.stopPropagation();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    const newX = e.clientX - mapRect.left - dragOffset.x;\n    const newY = e.clientY - mapRect.top - dragOffset.y;\n    setPositions(prev => ({\n      ...prev,\n      [dragging]: {\n        x: newX,\n        y: newY\n      }\n    }));\n  }, [dragging, dragOffset, isDragging, startPos]);\n  const handleMouseUp = useCallback(() => {\n    setDragging(null);\n    setIsDragging(false);\n  }, []);\n  useEffect(() => {\n    if (dragging) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n      return () => {\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n    }\n  }, [dragging, handleMouseMove, handleMouseUp]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mind-map\",\n    ref: mapRef,\n    style: {\n      cursor: isDragging ? 'grabbing' : 'default'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"central-question\",\n      ref: centralRef,\n      children: centralQuestion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      className: \"connections\",\n      children: concepts.map((_, index) => {\n        var _centralRef$current, _mapRef$current;\n        const pos = positions[`concept-${index}`];\n        if (!pos) return null;\n        const centralRect = (_centralRef$current = centralRef.current) === null || _centralRef$current === void 0 ? void 0 : _centralRef$current.getBoundingClientRect();\n        const mapRect = (_mapRef$current = mapRef.current) === null || _mapRef$current === void 0 ? void 0 : _mapRef$current.getBoundingClientRect();\n        if (!centralRect || !mapRect) return null;\n        const centerX = centralRect.width / 2;\n        const centerY = centralRect.height / 2;\n        return /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: centerX,\n          y1: centerY,\n          x2: pos.x,\n          y2: pos.y,\n          className: index > 2 ? 'connection inactive' : 'connection'\n        }, `line-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), concepts.map((concept, index) => {\n      const pos = positions[`concept-${index}`] || {\n        x: 0,\n        y: 0\n      };\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `concept concept-${index + 1} ${index > 2 ? 'inactive' : ''} ${isDragging && dragging === `concept-${index}` ? 'dragging' : ''}`,\n        style: {\n          transform: `translate(${pos.x}px, ${pos.y}px)`,\n          cursor: isDragging && dragging === `concept-${index}` ? 'grabbing' : 'grab'\n        },\n        onMouseDown: e => handleMouseDown(e, `concept-${index}`),\n        children: concept\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(MindMap, \"Cj/OTzFB2OYprC2WdSqvA/m1S/k=\");\n_c = MindMap;\nexport default MindMap;\nvar _c;\n$RefreshReg$(_c, \"MindMap\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","jsxDEV","_jsxDEV","MindMap","centralQuestion","concepts","_s","positions","setPositions","dragging","setDragging","dragOffset","setDragOffset","x","y","isDragging","setIsDragging","startPos","setStartPos","mapRef","centralRef","Object","keys","length","initialPositions","forEach","_","index","angle","Math","PI","cos","sin","handleMouseDown","e","conceptId","stopPropagation","rect","currentTarget","getBoundingClientRect","mapRect","current","clientX","clientY","left","top","handleMouseMove","moveX","abs","moveY","newX","newY","prev","handleMouseUp","document","addEventListener","removeEventListener","className","ref","style","cursor","children","fileName","_jsxFileName","lineNumber","columnNumber","map","_centralRef$current","_mapRef$current","pos","centralRect","centerX","width","centerY","height","x1","y1","x2","y2","concept","transform","onMouseDown","_c","$RefreshReg$"],"sources":["/Users/kei/AIdeator-LLM/frontend/src/components/MindMap.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport './MindMap.css';\n\nconst MindMap = ({ centralQuestion, concepts }) => {\n  const [positions, setPositions] = useState({});\n  const [dragging, setDragging] = useState(null);\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n  const [isDragging, setIsDragging] = useState(false);\n  const [startPos, setStartPos] = useState({ x: 0, y: 0 });\n  const mapRef = useRef(null);\n  const centralRef = useRef(null);\n\n  // Initialize positions if not set\n  useEffect(() => {\n    if (Object.keys(positions).length === 0) {\n      const initialPositions = {};\n      concepts.forEach((_, index) => {\n        const angle = (2 * Math.PI * index) / concepts.length;\n        initialPositions[`concept-${index}`] = {\n          x: Math.cos(angle) * 200,\n          y: Math.sin(angle) * 200\n        };\n      });\n      setPositions(initialPositions);\n    }\n  }, [concepts, positions]);\n\n  const handleMouseDown = (e, conceptId) => {\n    e.stopPropagation();\n    const rect = e.currentTarget.getBoundingClientRect();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    setDragging(conceptId);\n    setStartPos({ x: e.clientX, y: e.clientY });\n    setDragOffset({\n      x: e.clientX - (rect.left - mapRect.left),\n      y: e.clientY - (rect.top - mapRect.top)\n    });\n  };\n\n  const handleMouseMove = useCallback((e) => {\n    if (!dragging) return;\n\n    // Check if we've moved enough to start dragging\n    if (!isDragging) {\n      const moveX = Math.abs(e.clientX - startPos.x);\n      const moveY = Math.abs(e.clientY - startPos.y);\n      if (moveX < 5 && moveY < 5) return; // Only start dragging after moving 5px\n      setIsDragging(true);\n    }\n\n    e.stopPropagation();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    const newX = e.clientX - mapRect.left - dragOffset.x;\n    const newY = e.clientY - mapRect.top - dragOffset.y;\n\n    setPositions(prev => ({\n      ...prev,\n      [dragging]: { x: newX, y: newY }\n    }));\n  }, [dragging, dragOffset, isDragging, startPos]);\n\n  const handleMouseUp = useCallback(() => {\n    setDragging(null);\n    setIsDragging(false);\n  }, []);\n\n  useEffect(() => {\n    if (dragging) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n      return () => {\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n    }\n  }, [dragging, handleMouseMove, handleMouseUp]);\n\n  return (\n    <div \n      className=\"mind-map\" \n      ref={mapRef}\n      style={{ cursor: isDragging ? 'grabbing' : 'default' }}\n    >\n      <div className=\"central-question\" ref={centralRef}>\n        {centralQuestion}\n      </div>\n      <svg className=\"connections\">\n        {concepts.map((_, index) => {\n          const pos = positions[`concept-${index}`];\n          if (!pos) return null;\n          \n          const centralRect = centralRef.current?.getBoundingClientRect();\n          const mapRect = mapRef.current?.getBoundingClientRect();\n          \n          if (!centralRect || !mapRect) return null;\n          \n          const centerX = centralRect.width / 2;\n          const centerY = centralRect.height / 2;\n          \n          return (\n            <line\n              key={`line-${index}`}\n              x1={centerX}\n              y1={centerY}\n              x2={pos.x}\n              y2={pos.y}\n              className={index > 2 ? 'connection inactive' : 'connection'}\n            />\n          );\n        })}\n      </svg>\n      {concepts.map((concept, index) => {\n        const pos = positions[`concept-${index}`] || { x: 0, y: 0 };\n        return (\n          <div\n            key={index}\n            className={`concept concept-${index + 1} ${index > 2 ? 'inactive' : ''} ${isDragging && dragging === `concept-${index}` ? 'dragging' : ''}`}\n            style={{\n              transform: `translate(${pos.x}px, ${pos.y}px)`,\n              cursor: isDragging && dragging === `concept-${index}` ? 'grabbing' : 'grab'\n            }}\n            onMouseDown={(e) => handleMouseDown(e, `concept-${index}`)}\n          >\n            {concept}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default MindMap; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}