{"ast":null,"code":"var _jsxFileName = \"/Users/kei/AIdeator-LLM/frontend/src/components/MindMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './MindMap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MindMap = ({\n  centralQuestion,\n  concepts\n}) => {\n  _s();\n  const [positions, setPositions] = useState({});\n  const [draggedConcept, setDraggedConcept] = useState(null);\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [activeNodes, setActiveNodes] = useState(concepts.map(() => true));\n  const [expandedNodeIndex, setExpandedNodeIndex] = useState(null);\n  const [expandedConcepts, setExpandedConcepts] = useState([]);\n  const mapRef = useRef(null);\n  const conceptRefs = useRef([]);\n  const centralRef = useRef(null);\n\n  // Initialize refs for concept nodes\n  useEffect(() => {\n    conceptRefs.current = Array(concepts.length).fill().map(() => /*#__PURE__*/React.createRef());\n  }, [concepts.length]);\n\n  // Initialize positions in a balanced layout\n  useEffect(() => {\n    if (Object.keys(positions).length === 0) {\n      // Positions that match the reference image exactly\n      const initialPositions = {\n        'concept-0': {\n          x: 0,\n          y: -180\n        },\n        // Top\n        'concept-1': {\n          x: -280,\n          y: 0\n        },\n        // Left\n        'concept-2': {\n          x: 280,\n          y: 0\n        },\n        // Right\n        'concept-3': {\n          x: -180,\n          y: 200\n        },\n        // Bottom Left\n        'concept-4': {\n          x: 180,\n          y: 200\n        } // Bottom Right\n      };\n      setPositions(initialPositions);\n    }\n  }, [positions]);\n\n  // Toggle node active state\n  const toggleNodeActive = index => {\n    // Count how many inactive nodes we currently have\n    const inactiveCount = activeNodes.filter(active => !active).length;\n\n    // If this node is already inactive, we can always make it active again\n    if (!activeNodes[index]) {\n      setActiveNodes(prev => {\n        const newActive = [...prev];\n        newActive[index] = true;\n        return newActive;\n      });\n      return;\n    }\n\n    // If we already have 4 inactive nodes and trying to make the 5th inactive,\n    // we should expand the only remaining active node\n    if (inactiveCount === 4) {\n      // Find the index of the only active node (which is not this one)\n      const remainingActiveIndex = activeNodes.findIndex(active => active);\n      if (remainingActiveIndex !== -1 && remainingActiveIndex !== index) {\n        // Make this node inactive\n        setActiveNodes(prev => {\n          const newActive = [...prev];\n          newActive[index] = false;\n          return newActive;\n        });\n\n        // Expand the remaining active node\n        expandNode(remainingActiveIndex);\n      }\n      return;\n    }\n\n    // Otherwise, just toggle this node\n    setActiveNodes(prev => {\n      const newActive = [...prev];\n      newActive[index] = !newActive[index];\n      return newActive;\n    });\n  };\n\n  // Handle starting to drag a concept\n  const handleMouseDown = (e, conceptId) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const rect = e.currentTarget.getBoundingClientRect();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    setDraggedConcept(conceptId);\n    setDragOffset({\n      x: e.clientX - (rect.left - mapRect.left),\n      y: e.clientY - (rect.top - mapRect.top)\n    });\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle dragging a concept\n  const handleMouseMove = e => {\n    if (!draggedConcept) return;\n    e.preventDefault();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    const newX = e.clientX - mapRect.left - dragOffset.x;\n    const newY = e.clientY - mapRect.top - dragOffset.y;\n    setPositions(prev => ({\n      ...prev,\n      [draggedConcept]: {\n        x: newX,\n        y: newY\n      }\n    }));\n  };\n\n  // Handle dropping a concept\n  const handleMouseUp = () => {\n    setDraggedConcept(null);\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Expand a node with 5 new child nodes\n  const expandNode = index => {\n    console.log(\"Expanding node\", index);\n    setExpandedNodeIndex(index);\n\n    // Create 5 new concept nodes\n    const newConcepts = [\"Fear of letting others down\", \"Social and professional pressures\", \"Use progress-sharing with supportive feedback\", \"Emotional Root Causes\", \"Imaginary Customers\"];\n    setExpandedConcepts(newConcepts);\n\n    // Create positions for the new nodes in a fan-like pattern around the parent\n    const parentPos = positions[`concept-${index}`];\n\n    // Calculate positions similar to the reference image\n    const newPositions = {\n      ...positions\n    };\n\n    // Top node\n    newPositions[`expanded-${index}-0`] = {\n      x: parentPos.x,\n      y: parentPos.y - 200\n    };\n\n    // Left node\n    newPositions[`expanded-${index}-1`] = {\n      x: parentPos.x - 280,\n      y: parentPos.y\n    };\n\n    // Right node\n    newPositions[`expanded-${index}-2`] = {\n      x: parentPos.x + 280,\n      y: parentPos.y\n    };\n\n    // Bottom Left node\n    newPositions[`expanded-${index}-3`] = {\n      x: parentPos.x - 180,\n      y: parentPos.y + 200\n    };\n\n    // Bottom Right node\n    newPositions[`expanded-${index}-4`] = {\n      x: parentPos.x + 180,\n      y: parentPos.y + 200\n    };\n    setPositions(newPositions);\n  };\n\n  // Render connection lines between central node and concepts\n  const renderConnections = () => {\n    var _mapRef$current, _centralRef$current;\n    const mapRect = (_mapRef$current = mapRef.current) === null || _mapRef$current === void 0 ? void 0 : _mapRef$current.getBoundingClientRect();\n    const centralRect = (_centralRef$current = centralRef.current) === null || _centralRef$current === void 0 ? void 0 : _centralRef$current.getBoundingClientRect();\n    if (!mapRect || !centralRect) return null;\n\n    // The exact center of the central question box\n    const centerX = mapRect.width / 2;\n    const centerY = mapRect.height / 2;\n    const connections = [];\n\n    // Render connections to main concepts\n    concepts.forEach((_, index) => {\n      const pos = positions[`concept-${index}`];\n      if (!pos) return;\n\n      // Calculate the exact center position of the concept\n      const conceptCenterX = centerX + pos.x;\n      const conceptCenterY = centerY + pos.y;\n      connections.push(/*#__PURE__*/_jsxDEV(\"line\", {\n        x1: centerX,\n        y1: centerY,\n        x2: conceptCenterX,\n        y2: conceptCenterY,\n        className: activeNodes[index] ? 'connection' : 'connection inactive'\n      }, `line-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this));\n\n      // If this is the expanded node, add connections to expanded concepts\n      if (index === expandedNodeIndex) {\n        expandedConcepts.forEach((_, i) => {\n          const expandedPos = positions[`expanded-${index}-${i}`];\n          if (!expandedPos) return;\n          const expandedX = centerX + expandedPos.x;\n          const expandedY = centerY + expandedPos.y;\n          connections.push(/*#__PURE__*/_jsxDEV(\"line\", {\n            x1: conceptCenterX,\n            y1: conceptCenterY,\n            x2: expandedX,\n            y2: expandedY,\n            className: \"connection expanded\"\n          }, `expanded-line-${index}-${i}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, this));\n        });\n      }\n    });\n    return connections;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mind-map-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mind-map\",\n      ref: mapRef,\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        className: \"connections\",\n        children: mapRef.current && centralRef.current && renderConnections()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"central-question\",\n        ref: centralRef,\n        children: centralQuestion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this), concepts.map((concept, index) => {\n        const pos = positions[`concept-${index}`] || {\n          x: 0,\n          y: 0\n        };\n        const isDragging = draggedConcept === `concept-${index}`;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `concept ${!activeNodes[index] ? 'inactive' : ''} ${isDragging ? 'dragging' : ''} ${index === expandedNodeIndex ? 'expanded' : ''}`,\n          style: {\n            top: `calc(50% + ${pos.y}px)`,\n            left: `calc(50% + ${pos.x}px)`,\n            transform: 'translate(-50%, -50%)',\n            cursor: isDragging ? 'grabbing' : 'grab'\n          },\n          ref: conceptRefs.current[index],\n          onMouseDown: e => handleMouseDown(e, `concept-${index}`),\n          onClick: e => {\n            e.stopPropagation();\n            if (!draggedConcept) {\n              toggleNodeActive(index);\n            }\n          },\n          children: concept\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 13\n        }, this);\n      }), expandedNodeIndex !== null && expandedConcepts.map((concept, index) => {\n        const pos = positions[`expanded-${expandedNodeIndex}-${index}`];\n        if (!pos) return null;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"concept expanded-child\",\n          style: {\n            top: `calc(50% + ${pos.y}px)`,\n            left: `calc(50% + ${pos.x}px)`,\n            transform: 'translate(-50%, -50%)'\n          },\n          children: concept\n        }, `expanded-${expandedNodeIndex}-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 5\n  }, this);\n};\n_s(MindMap, \"lUgL2qTVybr7GVwq/gDF27AqFvI=\");\n_c = MindMap;\nexport default MindMap;\nvar _c;\n$RefreshReg$(_c, \"MindMap\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","MindMap","centralQuestion","concepts","_s","positions","setPositions","draggedConcept","setDraggedConcept","dragOffset","setDragOffset","x","y","activeNodes","setActiveNodes","map","expandedNodeIndex","setExpandedNodeIndex","expandedConcepts","setExpandedConcepts","mapRef","conceptRefs","centralRef","current","Array","length","fill","createRef","Object","keys","initialPositions","toggleNodeActive","index","inactiveCount","filter","active","prev","newActive","remainingActiveIndex","findIndex","expandNode","handleMouseDown","e","conceptId","preventDefault","stopPropagation","rect","currentTarget","getBoundingClientRect","mapRect","clientX","left","clientY","top","document","addEventListener","handleMouseMove","handleMouseUp","newX","newY","removeEventListener","console","log","newConcepts","parentPos","newPositions","renderConnections","_mapRef$current","_centralRef$current","centralRect","centerX","width","centerY","height","connections","forEach","_","pos","conceptCenterX","conceptCenterY","push","x1","y1","x2","y2","className","fileName","_jsxFileName","lineNumber","columnNumber","i","expandedPos","expandedX","expandedY","children","ref","concept","isDragging","style","transform","cursor","onMouseDown","onClick","_c","$RefreshReg$"],"sources":["/Users/kei/AIdeator-LLM/frontend/src/components/MindMap.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './MindMap.css';\n\nconst MindMap = ({ centralQuestion, concepts }) => {\n  const [positions, setPositions] = useState({});\n  const [draggedConcept, setDraggedConcept] = useState(null);\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n  const [activeNodes, setActiveNodes] = useState(concepts.map(() => true));\n  const [expandedNodeIndex, setExpandedNodeIndex] = useState(null);\n  const [expandedConcepts, setExpandedConcepts] = useState([]);\n  const mapRef = useRef(null);\n  const conceptRefs = useRef([]);\n  const centralRef = useRef(null);\n\n  // Initialize refs for concept nodes\n  useEffect(() => {\n    conceptRefs.current = Array(concepts.length).fill().map(() => React.createRef());\n  }, [concepts.length]);\n\n  // Initialize positions in a balanced layout\n  useEffect(() => {\n    if (Object.keys(positions).length === 0) {\n      // Positions that match the reference image exactly\n      const initialPositions = {\n        'concept-0': { x: 0, y: -180 },      // Top\n        'concept-1': { x: -280, y: 0 },      // Left\n        'concept-2': { x: 280, y: 0 },       // Right\n        'concept-3': { x: -180, y: 200 },    // Bottom Left\n        'concept-4': { x: 180, y: 200 }      // Bottom Right\n      };\n      \n      setPositions(initialPositions);\n    }\n  }, [positions]);\n\n  // Toggle node active state\n  const toggleNodeActive = (index) => {\n    // Count how many inactive nodes we currently have\n    const inactiveCount = activeNodes.filter(active => !active).length;\n    \n    // If this node is already inactive, we can always make it active again\n    if (!activeNodes[index]) {\n      setActiveNodes(prev => {\n        const newActive = [...prev];\n        newActive[index] = true;\n        return newActive;\n      });\n      return;\n    }\n    \n    // If we already have 4 inactive nodes and trying to make the 5th inactive,\n    // we should expand the only remaining active node\n    if (inactiveCount === 4) {\n      // Find the index of the only active node (which is not this one)\n      const remainingActiveIndex = activeNodes.findIndex(active => active);\n      \n      if (remainingActiveIndex !== -1 && remainingActiveIndex !== index) {\n        // Make this node inactive\n        setActiveNodes(prev => {\n          const newActive = [...prev];\n          newActive[index] = false;\n          return newActive;\n        });\n        \n        // Expand the remaining active node\n        expandNode(remainingActiveIndex);\n      }\n      return;\n    }\n    \n    // Otherwise, just toggle this node\n    setActiveNodes(prev => {\n      const newActive = [...prev];\n      newActive[index] = !newActive[index];\n      return newActive;\n    });\n  };\n  \n  // Handle starting to drag a concept\n  const handleMouseDown = (e, conceptId) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    const rect = e.currentTarget.getBoundingClientRect();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    \n    setDraggedConcept(conceptId);\n    setDragOffset({\n      x: e.clientX - (rect.left - mapRect.left),\n      y: e.clientY - (rect.top - mapRect.top)\n    });\n    \n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle dragging a concept\n  const handleMouseMove = (e) => {\n    if (!draggedConcept) return;\n    \n    e.preventDefault();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    const newX = e.clientX - mapRect.left - dragOffset.x;\n    const newY = e.clientY - mapRect.top - dragOffset.y;\n\n    setPositions(prev => ({\n      ...prev,\n      [draggedConcept]: { x: newX, y: newY }\n    }));\n  };\n\n  // Handle dropping a concept\n  const handleMouseUp = () => {\n    setDraggedConcept(null);\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n  \n  // Expand a node with 5 new child nodes\n  const expandNode = (index) => {\n    console.log(\"Expanding node\", index);\n    setExpandedNodeIndex(index);\n    \n    // Create 5 new concept nodes\n    const newConcepts = [\n      \"Fear of letting others down\",\n      \"Social and professional pressures\", \n      \"Use progress-sharing with supportive feedback\",\n      \"Emotional Root Causes\",\n      \"Imaginary Customers\"\n    ];\n    \n    setExpandedConcepts(newConcepts);\n    \n    // Create positions for the new nodes in a fan-like pattern around the parent\n    const parentPos = positions[`concept-${index}`];\n    \n    // Calculate positions similar to the reference image\n    const newPositions = { ...positions };\n    \n    // Top node\n    newPositions[`expanded-${index}-0`] = { \n      x: parentPos.x, \n      y: parentPos.y - 200 \n    };\n    \n    // Left node\n    newPositions[`expanded-${index}-1`] = { \n      x: parentPos.x - 280, \n      y: parentPos.y \n    };\n    \n    // Right node\n    newPositions[`expanded-${index}-2`] = { \n      x: parentPos.x + 280, \n      y: parentPos.y \n    };\n    \n    // Bottom Left node\n    newPositions[`expanded-${index}-3`] = { \n      x: parentPos.x - 180, \n      y: parentPos.y + 200 \n    };\n    \n    // Bottom Right node\n    newPositions[`expanded-${index}-4`] = { \n      x: parentPos.x + 180, \n      y: parentPos.y + 200 \n    };\n    \n    setPositions(newPositions);\n  };\n\n  // Render connection lines between central node and concepts\n  const renderConnections = () => {\n    const mapRect = mapRef.current?.getBoundingClientRect();\n    const centralRect = centralRef.current?.getBoundingClientRect();\n    \n    if (!mapRect || !centralRect) return null;\n    \n    // The exact center of the central question box\n    const centerX = mapRect.width / 2;\n    const centerY = mapRect.height / 2;\n    \n    const connections = [];\n    \n    // Render connections to main concepts\n    concepts.forEach((_, index) => {\n      const pos = positions[`concept-${index}`];\n      if (!pos) return;\n      \n      // Calculate the exact center position of the concept\n      const conceptCenterX = centerX + pos.x;\n      const conceptCenterY = centerY + pos.y;\n      \n      connections.push(\n        <line\n          key={`line-${index}`}\n          x1={centerX}\n          y1={centerY}\n          x2={conceptCenterX}\n          y2={conceptCenterY}\n          className={activeNodes[index] ? 'connection' : 'connection inactive'}\n        />\n      );\n      \n      // If this is the expanded node, add connections to expanded concepts\n      if (index === expandedNodeIndex) {\n        expandedConcepts.forEach((_, i) => {\n          const expandedPos = positions[`expanded-${index}-${i}`];\n          if (!expandedPos) return;\n          \n          const expandedX = centerX + expandedPos.x;\n          const expandedY = centerY + expandedPos.y;\n          \n          connections.push(\n            <line\n              key={`expanded-line-${index}-${i}`}\n              x1={conceptCenterX}\n              y1={conceptCenterY}\n              x2={expandedX}\n              y2={expandedY}\n              className=\"connection expanded\"\n            />\n          );\n        });\n      }\n    });\n    \n    return connections;\n  };\n\n  return (\n    <div className=\"mind-map-container\">\n      <div className=\"mind-map\" ref={mapRef}>\n        {/* SVG for the connections between nodes */}\n        <svg className=\"connections\">\n          {mapRef.current && centralRef.current && renderConnections()}\n        </svg>\n        \n        {/* Central Question Node */}\n        <div className=\"central-question\" ref={centralRef}>\n          {centralQuestion}\n        </div>\n        \n        {/* Concept Nodes */}\n        {concepts.map((concept, index) => {\n          const pos = positions[`concept-${index}`] || { x: 0, y: 0 };\n          const isDragging = draggedConcept === `concept-${index}`;\n          \n          return (\n            <div\n              key={index}\n              className={`concept ${!activeNodes[index] ? 'inactive' : ''} ${isDragging ? 'dragging' : ''} ${index === expandedNodeIndex ? 'expanded' : ''}`}\n              style={{\n                top: `calc(50% + ${pos.y}px)`,\n                left: `calc(50% + ${pos.x}px)`,\n                transform: 'translate(-50%, -50%)',\n                cursor: isDragging ? 'grabbing' : 'grab'\n              }}\n              ref={conceptRefs.current[index]}\n              onMouseDown={(e) => handleMouseDown(e, `concept-${index}`)}\n              onClick={(e) => {\n                e.stopPropagation();\n                if (!draggedConcept) {\n                  toggleNodeActive(index);\n                }\n              }}\n            >\n              {concept}\n            </div>\n          );\n        })}\n        \n        {/* Expanded Concept Nodes */}\n        {expandedNodeIndex !== null && expandedConcepts.map((concept, index) => {\n          const pos = positions[`expanded-${expandedNodeIndex}-${index}`];\n          if (!pos) return null;\n          \n          return (\n            <div\n              key={`expanded-${expandedNodeIndex}-${index}`}\n              className=\"concept expanded-child\"\n              style={{\n                top: `calc(50% + ${pos.y}px)`,\n                left: `calc(50% + ${pos.x}px)`,\n                transform: 'translate(-50%, -50%)'\n              }}\n            >\n              {concept}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default MindMap; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}