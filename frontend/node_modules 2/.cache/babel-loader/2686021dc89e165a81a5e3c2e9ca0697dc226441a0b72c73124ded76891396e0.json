{"ast":null,"code":"var _jsxFileName = \"/Users/kei/AIdeator-LLM/frontend/src/components/MindMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './MindMap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MindMap = ({\n  centralQuestion,\n  concepts\n}) => {\n  _s();\n  const [positions, setPositions] = useState({});\n  const [draggedConcept, setDraggedConcept] = useState(null);\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [activeNodes, setActiveNodes] = useState(concepts.map(() => false)); // All nodes inactive by default\n  const [expandedNodeIndex, setExpandedNodeIndex] = useState(null);\n  const [expandedConcepts, setExpandedConcepts] = useState([]);\n  const [nodeSizes, setNodeSizes] = useState({});\n  const mapRef = useRef(null);\n  const conceptRefs = useRef([]);\n  const centralRef = useRef(null);\n\n  // Initialize refs for concept nodes\n  useEffect(() => {\n    conceptRefs.current = Array(concepts.length).fill().map(() => /*#__PURE__*/React.createRef());\n  }, [concepts.length]);\n\n  // Initialize positions in a balanced layout\n  useEffect(() => {\n    if (Object.keys(positions).length === 0) {\n      // Positions that match the reference image exactly\n      const initialPositions = {\n        'concept-0': {\n          x: 0,\n          y: -180\n        },\n        // Top\n        'concept-1': {\n          x: -280,\n          y: 0\n        },\n        // Left\n        'concept-2': {\n          x: 280,\n          y: 0\n        },\n        // Right\n        'concept-3': {\n          x: -180,\n          y: 200\n        },\n        // Bottom Left\n        'concept-4': {\n          x: 180,\n          y: 200\n        } // Bottom Right\n      };\n      setPositions(initialPositions);\n    }\n  }, [positions]);\n\n  // Expand a node with 5 new child nodes\n  const expandNode = index => {\n    console.log(\"Expanding node\", index);\n    setExpandedNodeIndex(index);\n\n    // Create 5 new concept nodes with titles and descriptions\n    const newConcepts = [{\n      title: \"Fear of letting others down\",\n      description: \"Social and professional pressures can make people fear judgment from peers.\"\n    }, {\n      title: \"Concept B\",\n      description: \"A detailed description of concept B and its implications.\"\n    }, {\n      title: \"Concept C\",\n      description: \"A detailed description of concept C and its implications.\"\n    }, {\n      title: \"Concept D\",\n      description: \"A detailed description of concept D and its implications.\"\n    }, {\n      title: \"Concept E\",\n      description: \"A detailed description of concept E and its implications.\"\n    }];\n    setExpandedConcepts(newConcepts);\n\n    // Create positions for the new nodes following the parent's side\n    const parentPos = positions[`concept-${index}`];\n    const newPositions = {\n      ...positions\n    };\n\n    // Determine which side the parent node is on relative to the center\n    // This uses the standard layout: top, left, right, bottom-left, bottom-right\n    let direction;\n    if (index === 0) {\n      // Top node - place children above it\n      direction = 'top';\n    } else if (index === 1) {\n      // Left node - place children to the left\n      direction = 'left';\n    } else if (index === 2) {\n      // Right node - place children to the right\n      direction = 'right';\n    } else if (index === 3) {\n      // Bottom Left node - place children below and to the left\n      direction = 'bottom-left';\n    } else if (index === 4) {\n      // Bottom Right node - place children below and to the right\n      direction = 'bottom-right';\n    }\n    console.log(\"Direction for expanded nodes:\", direction);\n\n    // Position nodes based on the parent's position/direction\n    switch (direction) {\n      case 'top':\n        // Arrange horizontally above the parent\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + xOffset,\n            y: parentPos.y - 150\n          };\n        }\n        break;\n      case 'left':\n        // Arrange vertically to the left - increase spacing\n        for (let i = 0; i < newConcepts.length; i++) {\n          const yOffset = (i - 2) * 100; // -200, -100, 0, 100, 200\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x - 250,\n            y: parentPos.y + yOffset\n          };\n        }\n        break;\n      case 'right':\n        // Arrange vertically to the right - increase spacing\n        for (let i = 0; i < newConcepts.length; i++) {\n          const yOffset = (i - 2) * 100; // -200, -100, 0, 100, 200\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + 250,\n            y: parentPos.y + yOffset\n          };\n        }\n        break;\n      case 'bottom-left':\n        // Arrange horizontally below and to the left\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x - 100 + xOffset,\n            y: parentPos.y + 150\n          };\n        }\n        break;\n      case 'bottom-right':\n        // Arrange horizontally below and to the right\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + 100 + xOffset,\n            y: parentPos.y + 150\n          };\n        }\n        break;\n    }\n    setPositions(newPositions);\n  };\n\n  // Toggle node active state and handle expansion\n  const toggleNodeActive = index => {\n    // Count how many active nodes we currently have\n    const activeCount = activeNodes.filter(active => active).length;\n\n    // If this node is already active, toggle it off\n    if (activeNodes[index]) {\n      setActiveNodes(prev => {\n        const newActive = [...prev];\n        newActive[index] = false;\n        return newActive;\n      });\n\n      // If this was the expanded node, clear expansion\n      if (expandedNodeIndex === index) {\n        setExpandedNodeIndex(null);\n        setExpandedConcepts([]);\n      }\n      return;\n    }\n\n    // Otherwise, toggle it on\n    setActiveNodes(prev => {\n      const newActive = [...prev];\n      newActive[index] = true;\n      return newActive;\n    });\n\n    // If we now have exactly 4 active nodes, expand this one\n    if (activeCount === 3) {\n      // Expand this node\n      expandNode(index);\n    }\n  };\n\n  // Helper function to get precise DOM positions of nodes\n  const getNodePosition = nodeId => {\n    const node = document.querySelector(`[data-node-id=\"${nodeId}\"]`);\n    const map = mapRef.current;\n    if (!node || !map) return null;\n    const nodeRect = node.getBoundingClientRect();\n    const mapRect = map.getBoundingClientRect();\n    return {\n      x: nodeRect.left + nodeRect.width / 2 - mapRect.left,\n      y: nodeRect.top + nodeRect.height / 2 - mapRect.top,\n      width: nodeRect.width,\n      height: nodeRect.height\n    };\n  };\n\n  // Helper function to calculate intersection points between line and node\n  const getIntersection = (target, source, nodeSize) => {\n    const dx = source.x - target.x;\n    const dy = source.y - target.y;\n    const w = nodeSize.width / 2;\n    const h = nodeSize.height / 2;\n    if (dx === 0 && dy === 0) return source;\n    const absDX = Math.abs(dx);\n    const absDY = Math.abs(dy);\n    const scale = Math.min(w / absDX, h / absDY);\n    return {\n      x: source.x - dx * scale,\n      y: source.y - dy * scale\n    };\n  };\n\n  // Render connections between nodes using SVG and DOM positions\n  const renderConnections = () => {\n    if (!mapRef.current) return null;\n    return /*#__PURE__*/_jsxDEV(\"svg\", {\n      className: \"connections\",\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        pointerEvents: 'none',\n        zIndex: 1,\n        overflow: 'visible'\n      },\n      children: [concepts.map((_, index) => {\n        const centralPos = getNodePosition('central');\n        const conceptPos = getNodePosition(`concept-${index}`);\n        if (!centralPos || !conceptPos) return null;\n        const centralIntersect = getIntersection(conceptPos, centralPos, centralPos);\n        const conceptIntersect = getIntersection(centralPos, conceptPos, conceptPos);\n        return /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: centralIntersect.x,\n          y1: centralIntersect.y,\n          x2: conceptIntersect.x,\n          y2: conceptIntersect.y,\n          stroke: \"#888\" // Gray color\n          ,\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeDasharray: activeNodes[index] ? \"5,5\" : \"none\" // Dotted when active\n          ,\n          opacity: 0.8\n        }, `line-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this);\n      }), expandedNodeIndex !== null && expandedConcepts.map((_, i) => {\n        const parentPos = getNodePosition(`concept-${expandedNodeIndex}`);\n        const childPos = getNodePosition(`expanded-${expandedNodeIndex}-${i}`);\n        if (!parentPos || !childPos) return null;\n        const parentIntersect = getIntersection(childPos, parentPos, parentPos);\n        const childIntersect = getIntersection(parentPos, childPos, childPos);\n        return /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: parentIntersect.x,\n          y1: parentIntersect.y,\n          x2: childIntersect.x,\n          y2: childIntersect.y,\n          stroke: \"#888\" // Gray color\n          ,\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          opacity: 0.8\n        }, `expanded-line-${expandedNodeIndex}-${i}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Handle starting to drag a concept\n  const handleMouseDown = (e, conceptId) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const rect = e.currentTarget.getBoundingClientRect();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    setDraggedConcept(conceptId);\n    setDragOffset({\n      x: e.clientX - (rect.left - mapRect.left),\n      y: e.clientY - (rect.top - mapRect.top)\n    });\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle dragging a concept\n  const handleMouseMove = e => {\n    if (!draggedConcept) return;\n    e.preventDefault();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    const newX = e.clientX - mapRect.left - dragOffset.x;\n    const newY = e.clientY - mapRect.top - dragOffset.y;\n\n    // Update position in state\n    setPositions(prev => ({\n      ...prev,\n      [draggedConcept]: {\n        x: newX,\n        y: newY\n      }\n    }));\n  };\n\n  // Handle dropping a concept\n  const handleMouseUp = () => {\n    setDraggedConcept(null);\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Use useEffect to observe node sizes and trigger redraws\n  useEffect(() => {\n    const resizeObserver = new ResizeObserver(() => {\n      // Force a re-render to update connections by making a shallow\n      // copy of the positions state\n      setPositions(prev => ({\n        ...prev\n      }));\n    });\n    const observeNodes = () => {\n      // Central Node\n      if (centralRef.current) {\n        centralRef.current.setAttribute('data-node-id', 'central');\n        resizeObserver.observe(centralRef.current);\n      }\n\n      // Concept Nodes\n      conceptRefs.current.forEach((ref, index) => {\n        if (ref.current) {\n          ref.current.setAttribute('data-node-id', `concept-${index}`);\n          resizeObserver.observe(ref.current);\n        }\n      });\n\n      // Expanded Nodes\n      document.querySelectorAll('.expanded-child').forEach(node => {\n        const nodeId = node.getAttribute('data-node-id');\n        if (nodeId) resizeObserver.observe(node);\n      });\n    };\n\n    // Wait a tick for DOM to update\n    setTimeout(observeNodes, 0);\n    return () => resizeObserver.disconnect();\n  }, [positions, expandedConcepts]);\n\n  // Use useEffect to track size changes\n  useEffect(() => {\n    const resizeObserver = new ResizeObserver(entries => {\n      setNodeSizes(prev => {\n        const newSizes = {\n          ...prev\n        };\n        entries.forEach(entry => {\n          const nodeId = entry.target.getAttribute('data-node-id');\n          if (nodeId) {\n            newSizes[nodeId] = {\n              width: entry.contentRect.width,\n              height: entry.contentRect.height\n            };\n          }\n        });\n        return newSizes;\n      });\n    });\n    const observeNodes = () => {\n      // Central Node\n      if (centralRef.current) {\n        centralRef.current.setAttribute('data-node-id', 'central');\n        resizeObserver.observe(centralRef.current);\n      }\n\n      // Concept Nodes\n      conceptRefs.current.forEach((ref, index) => {\n        if (ref.current) {\n          ref.current.setAttribute('data-node-id', `concept-${index}`);\n          resizeObserver.observe(ref.current);\n        }\n      });\n\n      // Expanded Nodes\n      document.querySelectorAll('.expanded-child').forEach(node => {\n        const nodeId = node.getAttribute('data-node-id');\n        if (nodeId) resizeObserver.observe(node);\n      });\n    };\n\n    // Wait for DOM to be ready\n    setTimeout(observeNodes, 0);\n    return () => resizeObserver.disconnect();\n  }, [conceptRefs.current.length, expandedNodeIndex, expandedConcepts]);\n\n  // Force connections to update after DOM changes\n  useEffect(() => {\n    // Force a redraw after the DOM has fully updated\n    const timer = setTimeout(() => {\n      setPositions(prev => ({\n        ...prev\n      }));\n    }, 50);\n    return () => clearTimeout(timer);\n  }, [nodeSizes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mind-map-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mind-map\",\n      ref: mapRef,\n      children: [renderConnections(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"central-question\",\n        ref: centralRef,\n        \"data-node-id\": \"central\",\n        style: {\n          borderColor: \"#888\"\n        } // Gray border\n        ,\n        children: centralQuestion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 9\n      }, this), concepts.map((concept, index) => {\n        const pos = positions[`concept-${index}`] || {\n          x: 0,\n          y: 0\n        };\n        const isDragging = draggedConcept === `concept-${index}`;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `concept ${activeNodes[index] ? 'active' : ''} ${isDragging ? 'dragging' : ''} ${index === expandedNodeIndex ? 'expanded' : ''}`,\n          style: {\n            top: `calc(50% + ${pos.y}px)`,\n            left: `calc(50% + ${pos.x}px)`,\n            cursor: isDragging ? 'grabbing' : 'grab',\n            borderColor: \"#888\",\n            // Gray border\n            color: \"#555\" // Darker gray text\n          },\n          ref: conceptRefs.current[index],\n          \"data-node-id\": `concept-${index}`,\n          onMouseDown: e => handleMouseDown(e, `concept-${index}`),\n          onClick: e => {\n            e.stopPropagation();\n            if (!draggedConcept) {\n              toggleNodeActive(index);\n            }\n          },\n          children: concept\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 13\n        }, this);\n      }), expandedNodeIndex !== null && expandedConcepts.map((concept, index) => {\n        const pos = positions[`expanded-${expandedNodeIndex}-${index}`];\n        if (!pos) return null;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"concept expanded-child\",\n          \"data-node-id\": `expanded-${expandedNodeIndex}-${index}`,\n          style: {\n            top: `calc(50% + ${pos.y}px)`,\n            left: `calc(50% + ${pos.x}px)`,\n            border: '2px solid #888',\n            // Gray border\n            color: \"#555\" // Darker gray text\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"concept-title\",\n            children: concept.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 15\n          }, this), concept.description && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"concept-description\",\n            children: concept.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 497,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"concept-icon\",\n            children: /*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              viewBox: \"0 0 24 24\",\n              width: \"24\",\n              height: \"24\",\n              children: [/*#__PURE__*/_jsxDEV(\"path\", {\n                fill: \"none\",\n                d: \"M0 0h24v24H0z\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 501,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                d: \"M9.973 18h4.054c.132-1.202.745-2.194 1.74-3.277.113-.122.832-.867.917-.973a6 6 0 1 0-9.37-.002c.086.107.807.853.918.974.996 1.084 1.609 2.076 1.741 3.278zM14 20h-4v1h4v-1zm-8.246-5a8 8 0 1 1 12.49.002C17.624 15.774 16 17 16 18.5V21a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2v-2.5C8 17 6.375 15.774 5.754 15z\",\n                fill: \"rgba(0,0,0,0.4)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 502,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 500,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 499,\n            columnNumber: 15\n          }, this)]\n        }, `expanded-${expandedNodeIndex}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 432,\n    columnNumber: 5\n  }, this);\n};\n_s(MindMap, \"SZj3Nz7xDLDj5pH94QcOgKILNZE=\");\n_c = MindMap;\nexport default MindMap;\nvar _c;\n$RefreshReg$(_c, \"MindMap\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","MindMap","centralQuestion","concepts","_s","positions","setPositions","draggedConcept","setDraggedConcept","dragOffset","setDragOffset","x","y","activeNodes","setActiveNodes","map","expandedNodeIndex","setExpandedNodeIndex","expandedConcepts","setExpandedConcepts","nodeSizes","setNodeSizes","mapRef","conceptRefs","centralRef","current","Array","length","fill","createRef","Object","keys","initialPositions","expandNode","index","console","log","newConcepts","title","description","parentPos","newPositions","direction","i","xOffset","yOffset","toggleNodeActive","activeCount","filter","active","prev","newActive","getNodePosition","nodeId","node","document","querySelector","nodeRect","getBoundingClientRect","mapRect","left","width","top","height","getIntersection","target","source","nodeSize","dx","dy","w","h","absDX","Math","abs","absDY","scale","min","renderConnections","className","style","position","pointerEvents","zIndex","overflow","children","_","centralPos","conceptPos","centralIntersect","conceptIntersect","x1","y1","x2","y2","stroke","strokeWidth","strokeLinecap","strokeDasharray","opacity","fileName","_jsxFileName","lineNumber","columnNumber","childPos","parentIntersect","childIntersect","handleMouseDown","e","conceptId","preventDefault","stopPropagation","rect","currentTarget","clientX","clientY","addEventListener","handleMouseMove","handleMouseUp","newX","newY","removeEventListener","resizeObserver","ResizeObserver","observeNodes","setAttribute","observe","forEach","ref","querySelectorAll","getAttribute","setTimeout","disconnect","entries","newSizes","entry","contentRect","timer","clearTimeout","borderColor","concept","pos","isDragging","cursor","color","onMouseDown","onClick","border","xmlns","viewBox","d","_c","$RefreshReg$"],"sources":["/Users/kei/AIdeator-LLM/frontend/src/components/MindMap.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './MindMap.css';\n\nconst MindMap = ({ centralQuestion, concepts }) => {\n  const [positions, setPositions] = useState({});\n  const [draggedConcept, setDraggedConcept] = useState(null);\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n  const [activeNodes, setActiveNodes] = useState(concepts.map(() => false)); // All nodes inactive by default\n  const [expandedNodeIndex, setExpandedNodeIndex] = useState(null);\n  const [expandedConcepts, setExpandedConcepts] = useState([]);\n  const [nodeSizes, setNodeSizes] = useState({});\n  const mapRef = useRef(null);\n  const conceptRefs = useRef([]);\n  const centralRef = useRef(null);\n\n  // Initialize refs for concept nodes\n  useEffect(() => {\n    conceptRefs.current = Array(concepts.length).fill().map(() => React.createRef());\n  }, [concepts.length]);\n\n  // Initialize positions in a balanced layout\n  useEffect(() => {\n    if (Object.keys(positions).length === 0) {\n      // Positions that match the reference image exactly\n      const initialPositions = {\n        'concept-0': { x: 0, y: -180 },      // Top\n        'concept-1': { x: -280, y: 0 },      // Left\n        'concept-2': { x: 280, y: 0 },       // Right\n        'concept-3': { x: -180, y: 200 },    // Bottom Left\n        'concept-4': { x: 180, y: 200 }      // Bottom Right\n      };\n      \n      setPositions(initialPositions);\n    }\n  }, [positions]);\n\n  // Expand a node with 5 new child nodes\n  const expandNode = (index) => {\n    console.log(\"Expanding node\", index);\n    setExpandedNodeIndex(index);\n    \n    // Create 5 new concept nodes with titles and descriptions\n    const newConcepts = [\n      {\n        title: \"Fear of letting others down\",\n        description: \"Social and professional pressures can make people fear judgment from peers.\"\n      },\n      {\n        title: \"Concept B\",\n        description: \"A detailed description of concept B and its implications.\"\n      },\n      {\n        title: \"Concept C\",\n        description: \"A detailed description of concept C and its implications.\"\n      },\n      {\n        title: \"Concept D\",\n        description: \"A detailed description of concept D and its implications.\"\n      },\n      {\n        title: \"Concept E\",\n        description: \"A detailed description of concept E and its implications.\"\n      }\n    ];\n    \n    setExpandedConcepts(newConcepts);\n    \n    // Create positions for the new nodes following the parent's side\n    const parentPos = positions[`concept-${index}`];\n    const newPositions = { ...positions };\n    \n    // Determine which side the parent node is on relative to the center\n    // This uses the standard layout: top, left, right, bottom-left, bottom-right\n    let direction;\n    \n    if (index === 0) {\n      // Top node - place children above it\n      direction = 'top';\n    } else if (index === 1) {\n      // Left node - place children to the left\n      direction = 'left';\n    } else if (index === 2) {\n      // Right node - place children to the right\n      direction = 'right';\n    } else if (index === 3) {\n      // Bottom Left node - place children below and to the left\n      direction = 'bottom-left';\n    } else if (index === 4) {\n      // Bottom Right node - place children below and to the right\n      direction = 'bottom-right';\n    }\n    \n    console.log(\"Direction for expanded nodes:\", direction);\n    \n    // Position nodes based on the parent's position/direction\n    switch (direction) {\n      case 'top':\n        // Arrange horizontally above the parent\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + xOffset,\n            y: parentPos.y - 150\n          };\n        }\n        break;\n        \n      case 'left':\n        // Arrange vertically to the left - increase spacing\n        for (let i = 0; i < newConcepts.length; i++) {\n          const yOffset = (i - 2) * 100; // -200, -100, 0, 100, 200\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x - 250,\n            y: parentPos.y + yOffset\n          };\n        }\n        break;\n        \n      case 'right':\n        // Arrange vertically to the right - increase spacing\n        for (let i = 0; i < newConcepts.length; i++) {\n          const yOffset = (i - 2) * 100; // -200, -100, 0, 100, 200\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + 250,\n            y: parentPos.y + yOffset\n          };\n        }\n        break;\n        \n      case 'bottom-left':\n        // Arrange horizontally below and to the left\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x - 100 + xOffset,\n            y: parentPos.y + 150\n          };\n        }\n        break;\n        \n      case 'bottom-right':\n        // Arrange horizontally below and to the right\n        for (let i = 0; i < newConcepts.length; i++) {\n          const xOffset = (i - 2) * 120; // -240, -120, 0, 120, 240\n          newPositions[`expanded-${index}-${i}`] = {\n            x: parentPos.x + 100 + xOffset,\n            y: parentPos.y + 150\n          };\n        }\n        break;\n    }\n    \n    setPositions(newPositions);\n  };\n\n  // Toggle node active state and handle expansion\n  const toggleNodeActive = (index) => {\n    // Count how many active nodes we currently have\n    const activeCount = activeNodes.filter(active => active).length;\n    \n    // If this node is already active, toggle it off\n    if (activeNodes[index]) {\n      setActiveNodes(prev => {\n        const newActive = [...prev];\n        newActive[index] = false;\n        return newActive;\n      });\n      \n      // If this was the expanded node, clear expansion\n      if (expandedNodeIndex === index) {\n        setExpandedNodeIndex(null);\n        setExpandedConcepts([]);\n      }\n      return;\n    }\n    \n    // Otherwise, toggle it on\n    setActiveNodes(prev => {\n      const newActive = [...prev];\n      newActive[index] = true;\n      return newActive;\n    });\n    \n    // If we now have exactly 4 active nodes, expand this one\n    if (activeCount === 3) {\n      // Expand this node\n      expandNode(index);\n    }\n  };\n  \n  // Helper function to get precise DOM positions of nodes\n  const getNodePosition = (nodeId) => {\n    const node = document.querySelector(`[data-node-id=\"${nodeId}\"]`);\n    const map = mapRef.current;\n    \n    if (!node || !map) return null;\n    \n    const nodeRect = node.getBoundingClientRect();\n    const mapRect = map.getBoundingClientRect();\n    \n    return {\n      x: nodeRect.left + nodeRect.width / 2 - mapRect.left,\n      y: nodeRect.top + nodeRect.height / 2 - mapRect.top,\n      width: nodeRect.width,\n      height: nodeRect.height,\n    };\n  };\n  \n  // Helper function to calculate intersection points between line and node\n  const getIntersection = (target, source, nodeSize) => {\n    const dx = source.x - target.x;\n    const dy = source.y - target.y;\n    \n    const w = nodeSize.width / 2;\n    const h = nodeSize.height / 2;\n    \n    if (dx === 0 && dy === 0) return source;\n    \n    const absDX = Math.abs(dx);\n    const absDY = Math.abs(dy);\n    const scale = Math.min(w / absDX, h / absDY);\n    \n    return {\n      x: source.x - dx * scale,\n      y: source.y - dy * scale\n    };\n  };\n  \n  // Render connections between nodes using SVG and DOM positions\n  const renderConnections = () => {\n    if (!mapRef.current) return null;\n    \n    return (\n      <svg className=\"connections\" style={{\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        pointerEvents: 'none',\n        zIndex: 1,\n        overflow: 'visible'\n      }}>\n        {/* Main lines - from central node to concept nodes */}\n        {concepts.map((_, index) => {\n          const centralPos = getNodePosition('central');\n          const conceptPos = getNodePosition(`concept-${index}`);\n          \n          if (!centralPos || !conceptPos) return null;\n          \n          const centralIntersect = getIntersection(conceptPos, centralPos, centralPos);\n          const conceptIntersect = getIntersection(centralPos, conceptPos, conceptPos);\n          \n          return (\n            <line\n              key={`line-${index}`}\n              x1={centralIntersect.x}\n              y1={centralIntersect.y}\n              x2={conceptIntersect.x}\n              y2={conceptIntersect.y}\n              stroke=\"#888\" // Gray color\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeDasharray={activeNodes[index] ? \"5,5\" : \"none\"} // Dotted when active\n              opacity={0.8}\n            />\n          );\n        })}\n        \n        {/* Expanded node connections - from parent node to expanded children */}\n        {expandedNodeIndex !== null && expandedConcepts.map((_, i) => {\n          const parentPos = getNodePosition(`concept-${expandedNodeIndex}`);\n          const childPos = getNodePosition(`expanded-${expandedNodeIndex}-${i}`);\n          \n          if (!parentPos || !childPos) return null;\n          \n          const parentIntersect = getIntersection(childPos, parentPos, parentPos);\n          const childIntersect = getIntersection(parentPos, childPos, childPos);\n          \n          return (\n            <line\n              key={`expanded-line-${expandedNodeIndex}-${i}`}\n              x1={parentIntersect.x}\n              y1={parentIntersect.y}\n              x2={childIntersect.x}\n              y2={childIntersect.y}\n              stroke=\"#888\" // Gray color\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              opacity={0.8}\n            />\n          );\n        })}\n      </svg>\n    );\n  };\n\n  // Handle starting to drag a concept\n  const handleMouseDown = (e, conceptId) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    const rect = e.currentTarget.getBoundingClientRect();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    \n    setDraggedConcept(conceptId);\n    setDragOffset({\n      x: e.clientX - (rect.left - mapRect.left),\n      y: e.clientY - (rect.top - mapRect.top)\n    });\n    \n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Handle dragging a concept\n  const handleMouseMove = (e) => {\n    if (!draggedConcept) return;\n    \n    e.preventDefault();\n    const mapRect = mapRef.current.getBoundingClientRect();\n    const newX = e.clientX - mapRect.left - dragOffset.x;\n    const newY = e.clientY - mapRect.top - dragOffset.y;\n\n    // Update position in state\n    setPositions(prev => ({\n      ...prev,\n      [draggedConcept]: { x: newX, y: newY }\n    }));\n  };\n\n  // Handle dropping a concept\n  const handleMouseUp = () => {\n    setDraggedConcept(null);\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Use useEffect to observe node sizes and trigger redraws\n  useEffect(() => {\n    const resizeObserver = new ResizeObserver(() => {\n      // Force a re-render to update connections by making a shallow\n      // copy of the positions state\n      setPositions(prev => ({ ...prev }));\n    });\n    \n    const observeNodes = () => {\n      // Central Node\n      if (centralRef.current) {\n        centralRef.current.setAttribute('data-node-id', 'central');\n        resizeObserver.observe(centralRef.current);\n      }\n    \n      // Concept Nodes\n      conceptRefs.current.forEach((ref, index) => {\n        if (ref.current) {\n          ref.current.setAttribute('data-node-id', `concept-${index}`);\n          resizeObserver.observe(ref.current);\n        }\n      });\n    \n      // Expanded Nodes\n      document.querySelectorAll('.expanded-child').forEach((node) => {\n        const nodeId = node.getAttribute('data-node-id');\n        if (nodeId) resizeObserver.observe(node);\n      });\n    };\n    \n    // Wait a tick for DOM to update\n    setTimeout(observeNodes, 0);\n    \n    return () => resizeObserver.disconnect();\n  }, [positions, expandedConcepts]);\n\n  // Use useEffect to track size changes\n  useEffect(() => {\n    const resizeObserver = new ResizeObserver(entries => {\n      setNodeSizes(prev => {\n        const newSizes = { ...prev };\n        entries.forEach(entry => {\n          const nodeId = entry.target.getAttribute('data-node-id');\n          if (nodeId) {\n            newSizes[nodeId] = {\n              width: entry.contentRect.width,\n              height: entry.contentRect.height\n            };\n          }\n        });\n        return newSizes;\n      });\n    });\n    \n    const observeNodes = () => {\n      // Central Node\n      if (centralRef.current) {\n        centralRef.current.setAttribute('data-node-id', 'central');\n        resizeObserver.observe(centralRef.current);\n      }\n    \n      // Concept Nodes\n      conceptRefs.current.forEach((ref, index) => {\n        if (ref.current) {\n          ref.current.setAttribute('data-node-id', `concept-${index}`);\n          resizeObserver.observe(ref.current);\n        }\n      });\n    \n      // Expanded Nodes\n      document.querySelectorAll('.expanded-child').forEach((node) => {\n        const nodeId = node.getAttribute('data-node-id');\n        if (nodeId) resizeObserver.observe(node);\n      });\n    };\n    \n    // Wait for DOM to be ready\n    setTimeout(observeNodes, 0);\n    \n    return () => resizeObserver.disconnect();\n  }, [conceptRefs.current.length, expandedNodeIndex, expandedConcepts]);\n\n  // Force connections to update after DOM changes\n  useEffect(() => {\n    // Force a redraw after the DOM has fully updated\n    const timer = setTimeout(() => {\n      setPositions(prev => ({ ...prev }));\n    }, 50);\n    \n    return () => clearTimeout(timer);\n  }, [nodeSizes]);\n\n  return (\n    <div className=\"mind-map-container\">\n      <div className=\"mind-map\" ref={mapRef}>\n        {/* SVG connections */}\n        {renderConnections()}\n        \n        {/* Central Question Node */}\n        <div \n          className=\"central-question\" \n          ref={centralRef}\n          data-node-id=\"central\"\n          style={{ borderColor: \"#888\" }} // Gray border\n        >\n          {centralQuestion}\n        </div>\n        \n        {/* Concept Nodes */}\n        {concepts.map((concept, index) => {\n          const pos = positions[`concept-${index}`] || { x: 0, y: 0 };\n          const isDragging = draggedConcept === `concept-${index}`;\n          \n          return (\n            <div\n              key={index}\n              className={`concept ${activeNodes[index] ? 'active' : ''} ${isDragging ? 'dragging' : ''} ${index === expandedNodeIndex ? 'expanded' : ''}`}\n              style={{\n                top: `calc(50% + ${pos.y}px)`,\n                left: `calc(50% + ${pos.x}px)`,\n                cursor: isDragging ? 'grabbing' : 'grab',\n                borderColor: \"#888\", // Gray border\n                color: \"#555\" // Darker gray text\n              }}\n              ref={conceptRefs.current[index]}\n              data-node-id={`concept-${index}`}\n              onMouseDown={(e) => handleMouseDown(e, `concept-${index}`)}\n              onClick={(e) => {\n                e.stopPropagation();\n                if (!draggedConcept) {\n                  toggleNodeActive(index);\n                }\n              }}\n            >\n              {concept}\n            </div>\n          );\n        })}\n        \n        {/* Expanded Concept Nodes */}\n        {expandedNodeIndex !== null && expandedConcepts.map((concept, index) => {\n          const pos = positions[`expanded-${expandedNodeIndex}-${index}`];\n          if (!pos) return null;\n          \n          return (\n            <div\n              key={`expanded-${expandedNodeIndex}-${index}`}\n              className=\"concept expanded-child\"\n              data-node-id={`expanded-${expandedNodeIndex}-${index}`}\n              style={{\n                top: `calc(50% + ${pos.y}px)`,\n                left: `calc(50% + ${pos.x}px)`,\n                border: '2px solid #888', // Gray border\n                color: \"#555\" // Darker gray text\n              }}\n            >\n              <div className=\"concept-title\">{concept.title}</div>\n              {concept.description && (\n                <div className=\"concept-description\">{concept.description}</div>\n              )}\n              <div className=\"concept-icon\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\n                  <path fill=\"none\" d=\"M0 0h24v24H0z\"/>\n                  <path d=\"M9.973 18h4.054c.132-1.202.745-2.194 1.74-3.277.113-.122.832-.867.917-.973a6 6 0 1 0-9.37-.002c.086.107.807.853.918.974.996 1.084 1.609 2.076 1.741 3.278zM14 20h-4v1h4v-1zm-8.246-5a8 8 0 1 1 12.49.002C17.624 15.774 16 17 16 18.5V21a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2v-2.5C8 17 6.375 15.774 5.754 15z\" fill=\"rgba(0,0,0,0.4)\"/>\n                </svg>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default MindMap; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}